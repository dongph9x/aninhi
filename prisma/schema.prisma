generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  userId                String
  guildId               String
  balance               BigInt                  @default(0)
  fishBalance           BigInt                  @default(0)  // FishCoin riêng cho hệ thống fish
  dailyStreak           Int                     @default(0)
  dailyBattleCount      Int                     @default(0)  // Số lần đấu cá trong ngày
  lastBattleReset       DateTime                @default(now()) // Thời gian reset battle count
  dailyFeedCount        Int                     @default(0)  // Số lần cho cá ăn trong ngày
  lastFeedReset         DateTime                @default(now()) // Thời gian reset feed count
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  dailyClaims           DailyClaim[]
  fishInventory         FishInventory?
  battleFishInventory   BattleFishInventory?
  fishingData           FishingData?
  gameStats             GameStats[]
  inventory             Inventory?
  tournaments           TournamentParticipant[]
  transactions          Transaction[]
  fishTransactions      FishTransaction[]       // Giao dịch riêng cho FishCoin
  fishFood              FishFood[]
  userWeapons           UserWeapon[]

  @@unique([userId, guildId])
  @@index([userId])
  @@index([guildId])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  amount      BigInt
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId, guildId], references: [userId, guildId])

  @@index([userId, guildId])
  @@index([type])
  @@index([createdAt])
}

model FishTransaction {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  amount      BigInt
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId, guildId], references: [userId, guildId])

  @@index([userId, guildId])
  @@index([type])
  @@index([createdAt])
}

model DailyClaim {
  id        String   @id @default(cuid())
  userId    String
  guildId   String
  claimedAt DateTime @default(now())
  user      User     @relation(fields: [userId, guildId], references: [userId, guildId])

  @@unique([userId, guildId, claimedAt])
  @@index([userId, guildId])
}

model GameStats {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  gameType    String
  gamesPlayed Int      @default(0)
  gamesWon    Int      @default(0)
  totalBet    BigInt   @default(0)
  totalWon    BigInt   @default(0)
  totalLost   BigInt   @default(0)
  biggestWin  BigInt   @default(0)
  biggestLoss BigInt   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId, guildId], references: [userId, guildId])

  @@unique([userId, guildId, gameType])
  @@index([userId, guildId])
  @@index([gameType])
}

model FishingData {
  id            String        @id @default(cuid())
  userId        String
  guildId       String
  totalFish     Int           @default(0)
  totalEarnings BigInt        @default(0)
  biggestFish   String        @default("")
  biggestValue  BigInt        @default(0)
  rarestFish    String        @default("")
  rarestRarity  String        @default("")
  fishingTime   Int           @default(0)
  currentRod    String        @default("basic")
  currentBait   String        @default("basic")
  lastFished    DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  fish          CaughtFish[]
  baits         FishingBait[]
  user          User          @relation(fields: [userId, guildId], references: [userId, guildId])
  rods          FishingRod[]

  @@unique([userId, guildId])
  @@index([userId, guildId])
}

model FishingRod {
  id            String      @id @default(cuid())
  fishingDataId String
  rodType       String
  durability    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  fishingData   FishingData @relation(fields: [fishingDataId], references: [id], onDelete: Cascade)

  @@unique([fishingDataId, rodType])
  @@index([fishingDataId])
}

model FishingBait {
  id            String      @id @default(cuid())
  fishingDataId String
  baitType      String
  quantity      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  fishingData   FishingData @relation(fields: [fishingDataId], references: [id], onDelete: Cascade)

  @@unique([fishingDataId, baitType])
  @@index([fishingDataId])
}

model CaughtFish {
  id            String      @id @default(cuid())
  fishingDataId String
  fishName      String
  fishRarity    String
  fishValue     BigInt      @default(0)
  quantity      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  fishingData   FishingData @relation(fields: [fishingDataId], references: [id], onDelete: Cascade)

  @@unique([fishingDataId, fishName])
  @@index([fishingDataId])
  @@index([fishRarity])
}

model Tournament {
  id                  String                  @id @default(cuid())
  name                String
  description         String
  entryFee            BigInt
  prizePool           BigInt
  maxParticipants     Int
  currentParticipants Int                     @default(0)
  status              String
  startTime           DateTime
  endTime             DateTime
  createdBy           String
  guildId             String
  channelId           String
  winnerId            String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  messages            TournamentMessage[]     @relation("TournamentMessages")
  participants        TournamentParticipant[]

  @@index([guildId])
  @@index([status])
  @@index([createdBy])
  @@index([winnerId])
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  guildId      String
  joinedAt     DateTime   @default(now())
  user         User       @relation(fields: [userId, guildId], references: [userId, guildId])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, userId])
  @@index([tournamentId])
  @@index([userId, guildId])
}

model TournamentMessage {
  id           String     @id @default(cuid())
  tournamentId String
  messageId    String
  channelId    String
  guildId      String
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation("TournamentMessages", fields: [tournamentId], references: [id])

  @@index([tournamentId])
  @@index([guildId])
  @@index([channelId])
  @@index([messageId])
}

model Inventory {
  id        String          @id @default(cuid())
  userId    String
  guildId   String
  capacity  Int             @default(20)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId, guildId], references: [userId, guildId])
  items     InventoryItem[]

  @@unique([userId, guildId])
  @@index([userId, guildId])
}

model InventoryItem {
  id            String    @id @default(cuid())
  inventoryId   String
  itemId        String
  itemName      String
  itemType      String
  itemRarity    String
  quantity      Int       @default(1)
  durability    Int?
  maxDurability Int?
  enchantments  String?
  customData    String?
  isEquipped    Boolean   @default(false)
  equippedSlot  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([itemId])
  @@index([itemType])
  @@index([itemRarity])
  @@index([isEquipped])
}

model ItemTemplate {
  id            String   @id @default(cuid())
  itemId        String   @unique
  itemName      String
  itemType      String
  itemRarity    String
  description   String
  baseValue     BigInt   @default(0)
  maxStack      Int      @default(1)
  maxDurability Int?
  baseStats     String?
  effects       String?
  requirements  String?
  isTradeable   Boolean  @default(true)
  isDroppable   Boolean  @default(true)
  isConsumable  Boolean  @default(false)
  category      String
  subcategory   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([itemId])
  @@index([itemType])
  @@index([itemRarity])
  @@index([category])
}

model ModerationLog {
  id           String   @id @default(cuid())
  guildId      String
  targetUserId String
  moderatorId  String
  action       String
  reason       String?
  duration     Int?
  amount       BigInt?
  channelId    String?
  messageId    String?
  createdAt    DateTime @default(now())

  @@index([guildId])
  @@index([targetUserId])
  @@index([moderatorId])
  @@index([action])
  @@index([createdAt])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model BanRecord {
  id          String    @id @default(cuid())
  userId      String
  guildId     String
  moderatorId String
  reason      String
  banAt       DateTime  @default(now())
  expiresAt   DateTime?
  type        String
  isActive    Boolean   @default(true)

  @@unique([userId, guildId])
  @@index([userId])
  @@index([guildId])
  @@index([moderatorId])
  @@index([isActive])
  @@index([expiresAt])
}

model WarningRecord {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  moderatorId String
  warningLevel Int     @default(1) // 1, 2, 3
  reason      String
  message     String   // Message tùy chỉnh cho từng level
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  expiresAt   DateTime? // Có thể set thời gian hết hạn cảnh cáo

  @@index([userId])
  @@index([guildId])
  @@index([moderatorId])
  @@index([warningLevel])
  @@index([isActive])
  @@index([expiresAt])
}

model Fish {
  id                    String                    @id @default(cuid())
  userId                String
  guildId               String
  species               String
  level                 Int                       @default(1)
  experience            Int                       @default(0)
  rarity                String
  value                 BigInt                    @default(0)
  generation            Int                       @default(1)
  specialTraits         String?
  stats                 String?                   // JSON string chứa stats: strength, agility, intelligence, defense, luck
  status                String                    @default("growing")
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  inventoryItem         FishInventoryItem?
  battleInventoryItem   BattleFishInventoryItem?
  marketListing         FishMarket?

  @@index([userId])
  @@index([guildId])
  @@index([rarity])
  @@index([status])
}

model FishInventory {
  id        String              @id @default(cuid())
  userId    String
  guildId   String
  capacity  Int                 @default(10)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId, guildId], references: [userId, guildId])
  items     FishInventoryItem[]

  @@unique([userId, guildId])
  @@index([userId, guildId])
}

model BattleFishInventory {
  id        String                    @id @default(cuid())
  userId    String
  guildId   String
  capacity  Int                       @default(5)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  user      User                      @relation(fields: [userId, guildId], references: [userId, guildId])
  items     BattleFishInventoryItem[]

  @@unique([userId, guildId])
  @@index([userId, guildId])
}

model FishInventoryItem {
  id              String        @id @default(cuid())
  fishInventoryId String
  fishId          String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fishInventory   FishInventory @relation(fields: [fishInventoryId], references: [id], onDelete: Cascade)
  fish            Fish          @relation(fields: [fishId], references: [id], onDelete: Cascade)

  @@index([fishInventoryId])
  @@index([fishId])
}

model BattleFishInventoryItem {
  id                    String              @id @default(cuid())
  battleFishInventoryId String
  fishId                String              @unique
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  battleFishInventory   BattleFishInventory @relation(fields: [battleFishInventoryId], references: [id], onDelete: Cascade)
  fish                  Fish                @relation(fields: [fishId], references: [id], onDelete: Cascade)

  @@index([battleFishInventoryId])
  @@index([fishId])
}



model FishMarket {
  id        String   @id @default(cuid())
  fishId    String   @unique
  sellerId  String
  guildId   String
  price     BigInt
  listedAt  DateTime @default(now())
  expiresAt DateTime
  fish      Fish     @relation(fields: [fishId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([guildId])
  @@index([price])
  @@index([expiresAt])
}

model BreedingHistory {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  parent1Id   String
  parent2Id   String
  offspringId String
  bredAt      DateTime @default(now())
  success     Boolean  @default(true)
  notes       String?

  @@index([userId])
  @@index([guildId])
  @@index([parent1Id])
  @@index([parent2Id])
  @@index([offspringId])
}

model FishPrice {
  id            String   @id @default(cuid())
  fishName      String   @unique
  basePrice     BigInt
  currentPrice  BigInt
  priceChange   BigInt   @default(0)
  changePercent Float    @default(0)
  lastUpdated   DateTime @default(now())
  priceHistory  String?

  @@index([fishName])
  @@index([lastUpdated])
}

model BattleHistory {
  id             String   @id @default(cuid())
  userId         String
  guildId        String
  fishId         String
  opponentId     String
  opponentUserId String
  userPower      Int
  opponentPower  Int
  userWon        Boolean
  reward         BigInt
  battleLog      String   // JSON string chứa log trận đấu
  battledAt      DateTime @default(now())

  @@index([userId])
  @@index([guildId])
  @@index([fishId])
  @@index([opponentId])
  @@index([battledAt])
}

model FishFood {
  id            String      @id @default(cuid())
  userId        String
  guildId       String
  foodType      String
  quantity      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId, guildId], references: [userId, guildId])

  @@unique([userId, guildId, foodType])
  @@index([userId, guildId])
  @@index([foodType])
}

model UserWeapon {
  id              String   @id @default(cuid())
  userId          String
  guildId         String
  weaponId        String
  quantity        Int      @default(1)
  isEquipped      Boolean  @default(false)
  equippedOnFishId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId, guildId], references: [userId, guildId])

  @@unique([userId, guildId, weaponId])
  @@index([userId, guildId])
  @@index([weaponId])
  @@index([isEquipped])
}

model Achievement {
  id        String   @id @default(cuid())
  name      String
  link      String
  target    String   // user_id sẽ được nhận danh hiệu
  type      Int      // 0: top câu cá, 1: top fishcoin, 2: top fishbattle, 3: top custom
  active    Boolean  @default(false) // Danh hiệu có đang active hay không
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([target])
  @@index([type])
  @@index([active])
}
