import prisma from '../src/utils/prisma';
import { AchievementService } from '../src/utils/achievement';

async function testAchievementsCommand() {
    console.log('üèÖ Testing Achievements Command...\n');

    try {
        const testUserId = '389957152153796608';
        const testUserId2 = '1397381362763169853';

        // 1. Test v·ªõi user c√≥ nhi·ªÅu achievements
        console.log('1Ô∏è‚É£ Testing User with Multiple Achievements...');
        console.log(`   User ID: ${testUserId}`);
        
        const userAchievements = await AchievementService.getUserAchievements(testUserId);
        console.log(`   üìä Total achievements: ${userAchievements.length}`);

        if (userAchievements.length > 0) {
            console.log('   üìã Achievements:');
            userAchievements.forEach((achievement, index) => {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(achievement.type);
                const typeName = AchievementService.getAchievementTypeName(achievement.type);
                const createdAt = achievement.createdAt.toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                console.log(`      ${index + 1}. ${typeEmoji} ${achievement.name}`);
                console.log(`         üèÖ Lo·∫°i: ${typeName}`);
                console.log(`         üìÖ Nh·∫≠n ng√†y: ${createdAt}`);
                console.log(`         üîó Link: ${achievement.link}`);
            });

            // Test highest priority achievement
            const highestPriority = await AchievementService.getHighestPriorityAchievement(testUserId);
            if (highestPriority) {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(highestPriority.type);
                const typeName = AchievementService.getAchievementTypeName(highestPriority.type);
                console.log(`\n   üéØ Highest Priority Achievement:`);
                console.log(`      ${typeEmoji} ${highestPriority.name}`);
                console.log(`      üèÖ Lo·∫°i: ${typeName}`);
                console.log(`      üí° S·∫Ω hi·ªÉn th·ªã khi c√¢u c√°`);
            }
        }

        // 2. Test v·ªõi user c√≥ √≠t achievements
        console.log('\n2Ô∏è‚É£ Testing User with Few Achievements...');
        console.log(`   User ID: ${testUserId2}`);
        
        const user2Achievements = await AchievementService.getUserAchievements(testUserId2);
        console.log(`   üìä Total achievements: ${user2Achievements.length}`);

        if (user2Achievements.length > 0) {
            console.log('   üìã Achievements:');
            user2Achievements.forEach((achievement, index) => {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(achievement.type);
                const typeName = AchievementService.getAchievementTypeName(achievement.type);
                const createdAt = achievement.createdAt.toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                console.log(`      ${index + 1}. ${typeEmoji} ${achievement.name}`);
                console.log(`         üèÖ Lo·∫°i: ${typeName}`);
                console.log(`         üìÖ Nh·∫≠n ng√†y: ${createdAt}`);
                console.log(`         üîó Link: ${achievement.link}`);
            });
        }

        // 3. Test v·ªõi user kh√¥ng c√≥ achievements
        console.log('\n3Ô∏è‚É£ Testing User with No Achievements...');
        const noAchievementUserId = '999999999999999999';
        console.log(`   User ID: ${noAchievementUserId}`);
        
        const noAchievements = await AchievementService.getUserAchievements(noAchievementUserId);
        console.log(`   üìä Total achievements: ${noAchievements.length}`);
        
        if (noAchievements.length === 0) {
            console.log('   ‚úÖ User has no achievements (expected)');
        }

        // 4. Test embed simulation
        console.log('\n4Ô∏è‚É£ Simulating Embed Creation...');
        
        // Simulate embed for user with achievements
        if (userAchievements.length > 0) {
            console.log('\n   üìã Embed for User with Achievements:');
            console.log('   Title: üèÖ Danh Hi·ªáu C·ªßa [Username]');
            console.log(`   Description: [Username] ƒë√£ s·ªü h·ªØu ${userAchievements.length} danh hi·ªáu!`);
            console.log('   Color: #ff6b35');
            console.log('   Thumbnail: User avatar');
            
            console.log('\n   üìã Fields:');
            userAchievements.forEach((achievement, index) => {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(achievement.type);
                const typeName = AchievementService.getAchievementTypeName(achievement.type);
                console.log(`      Field ${index + 1}: ${typeEmoji} ${achievement.name}`);
                console.log(`         Value: üèÖ Lo·∫°i: ${typeName} | üìÖ Nh·∫≠n ng√†y: [Date] | üîó ·∫¢nh: [Link]`);
            });

            // Test highest priority achievement
            const highestPriority = await AchievementService.getHighestPriorityAchievement(testUserId);
            if (highestPriority) {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(highestPriority.type);
                const typeName = AchievementService.getAchievementTypeName(highestPriority.type);
                console.log(`\n      Special Field: üéØ Danh Hi·ªáu ∆Øu Ti√™n Cao Nh·∫•t`);
                console.log(`         Value: ${typeEmoji} ${highestPriority.name} | üèÖ Lo·∫°i: ${typeName} | üí° S·∫Ω hi·ªÉn th·ªã khi c√¢u c√°`);
            }

            console.log(`\n   Footer: T·ªïng c·ªông: ${userAchievements.length} danh hi·ªáu ‚Ä¢ Danh hi·ªáu ∆∞u ti√™n s·∫Ω hi·ªÉn th·ªã khi c√¢u c√°`);
        }

        // Simulate embed for user without achievements
        console.log('\n   üìã Embed for User without Achievements:');
        console.log('   Title: üèÖ Danh Hi·ªáu C·ªßa B·∫°n');
        console.log('   Description: [Username] ch∆∞a c√≥ danh hi·ªáu n√†o!');
        console.log('   Color: #ff6b35');
        console.log('   Thumbnail: User avatar');
        console.log('   Content: C√°ch nh·∫≠n danh hi·ªáu...');

        // 5. Test command aliases
        console.log('\n5Ô∏è‚É£ Testing Command Aliases...');
        const aliases = ['achievements', 'achievement', 'danhhieu', 'badge'];
        console.log('   üìã Available aliases:');
        aliases.forEach((alias, index) => {
            console.log(`      ${index + 1}. n.${alias}`);
        });

        // 6. Test error handling
        console.log('\n6Ô∏è‚É£ Testing Error Handling...');
        try {
            // Simulate database error (invalid user ID)
            const invalidUserId = 'invalid-user-id';
            const invalidAchievements = await AchievementService.getUserAchievements(invalidUserId);
            console.log(`   ‚úÖ Error handling works for invalid user ID`);
        } catch (error) {
            console.log(`   ‚úÖ Error caught: ${error}`);
        }

        console.log('\n‚úÖ Achievements command test completed!');
        console.log('\nüéØ Key Features:');
        console.log('   ‚úÖ Shows all user achievements');
        console.log('   ‚úÖ Displays achievement details (name, type, date, link)');
        console.log('   ‚úÖ Highlights highest priority achievement');
        console.log('   ‚úÖ Handles users with no achievements');
        console.log('   ‚úÖ Multiple command aliases');
        console.log('   ‚úÖ Error handling');

    } catch (error) {
        console.error('‚ùå Error testing achievements command:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

testAchievementsCommand().catch(console.error); 