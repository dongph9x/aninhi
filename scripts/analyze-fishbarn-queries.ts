import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function analyzeFishbarnQueries() {
  console.log('üîç Ph√¢n T√≠ch C√°c Query C·ªßa L·ªánh n.fishbarn\n');

  const testUserId = 'test-user-fishbarn';
  const testGuildId = 'test-guild-fishbarn';

  try {
    console.log('1Ô∏è‚É£ Query 1: Ki·ªÉm tra v√† t·∫°o User (n·∫øu ch∆∞a c√≥)');
    console.log('   B·∫£ng: User');
    console.log('   Query: prisma.user.upsert()');
    console.log('   M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o user t·ªìn t·∫°i tr∆∞·ªõc khi t·∫°o FishInventory');
    console.log('   Fields ƒë∆∞·ª£c query:');
    console.log('     - userId, guildId (unique constraint)');
    console.log('     - balance, dailyStreak (n·∫øu t·∫°o m·ªõi)');
    console.log();

    console.log('2Ô∏è‚É£ Query 2: L·∫•y ho·∫∑c t·∫°o FishInventory');
    console.log('   B·∫£ng: FishInventory');
    console.log('   Query: prisma.fishInventory.upsert()');
    console.log('   Include: items (FishInventoryItem) v·ªõi fish (Fish)');
    console.log('   M·ª•c ƒë√≠ch: L·∫•y inventory c·ªßa user v·ªõi t·∫•t c·∫£ c√°');
    console.log('   Fields ƒë∆∞·ª£c query:');
    console.log('     - id, userId, guildId, capacity');
    console.log('     - items: id, fishInventoryId, fishId, createdAt');
    console.log('     - fish: t·∫•t c·∫£ fields c·ªßa b·∫£ng Fish');
    console.log();

    console.log('3Ô∏è‚É£ Query 3: Ki·ªÉm tra Daily Feed Limit');
    console.log('   B·∫£ng: User');
    console.log('   Query: prisma.user.findUnique()');
    console.log('   M·ª•c ƒë√≠ch: Ki·ªÉm tra gi·ªõi h·∫°n cho c√° ƒÉn h√†ng ng√†y');
    console.log('   Fields ƒë∆∞·ª£c query:');
    console.log('     - dailyFeedCount');
    console.log('     - lastFeedReset');
    console.log();

    console.log('4Ô∏è‚É£ Query 4: Update Daily Feed Count (n·∫øu reset)');
    console.log('   B·∫£ng: User');
    console.log('   Query: prisma.user.update() (n·∫øu sang ng√†y m·ªõi)');
    console.log('   M·ª•c ƒë√≠ch: Reset daily feed count v·ªÅ 0');
    console.log('   Fields ƒë∆∞·ª£c update:');
    console.log('     - dailyFeedCount: 0');
    console.log('     - lastFeedReset: now()');
    console.log();

    console.log('5Ô∏è‚É£ Query 5: Load User Fish Food (t·ª´ FishBarnUI)');
    console.log('   B·∫£ng: FishFood');
    console.log('   Query: prisma.fishFood.findMany()');
    console.log('   M·ª•c ƒë√≠ch: L·∫•y danh s√°ch th·ª©c ƒÉn c·ªßa user');
    console.log('   Fields ƒë∆∞·ª£c query:');
    console.log('     - id, userId, guildId, foodType, quantity');
    console.log('     - createdAt, updatedAt');
    console.log();

    console.log('üìä T√≥m T·∫Øt C√°c B·∫£ng ƒê∆∞·ª£c Query:');
    console.log('   1. User - Th√¥ng tin user v√† daily feed limit');
    console.log('   2. FishInventory - R∆∞∆°ng nu√¥i c√°');
    console.log('   3. FishInventoryItem - C√° trong r∆∞∆°ng');
    console.log('   4. Fish - Th√¥ng tin chi ti·∫øt c√°');
    console.log('   5. FishFood - Th·ª©c ƒÉn c·ªßa user');
    console.log();

    console.log('üîó M·ªëi Quan H·ªá Gi·ªØa C√°c B·∫£ng:');
    console.log('   User (1) ‚Üê‚Üí (1) FishInventory');
    console.log('   FishInventory (1) ‚Üê‚Üí (N) FishInventoryItem');
    console.log('   FishInventoryItem (1) ‚Üê‚Üí (1) Fish');
    console.log('   User (1) ‚Üê‚Üí (N) FishFood');
    console.log();

    console.log('üìã C√°c Query Ch√≠nh:');
    console.log('   1. prisma.user.upsert() - T·∫°o/update user');
    console.log('   2. prisma.fishInventory.upsert() - T·∫°o/l·∫•y inventory');
    console.log('   3. prisma.user.findUnique() - Ki·ªÉm tra daily feed limit');
    console.log('   4. prisma.user.update() - Reset daily feed count (n·∫øu c·∫ßn)');
    console.log('   5. prisma.fishFood.findMany() - L·∫•y th·ª©c ƒÉn');
    console.log();

    console.log('üéØ M·ª•c ƒê√≠ch Ch√≠nh:');
    console.log('   - Hi·ªÉn th·ªã danh s√°ch c√° trong r∆∞∆°ng nu√¥i');
    console.log('   - Hi·ªÉn th·ªã th√¥ng tin daily feed limit');
    console.log('   - Hi·ªÉn th·ªã danh s√°ch th·ª©c ƒÉn c√≥ s·∫µn');
    console.log('   - Cho ph√©p t∆∞∆°ng t√°c (cho ƒÉn, b√°n, lai t·∫°o)');

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeFishbarnQueries(); 