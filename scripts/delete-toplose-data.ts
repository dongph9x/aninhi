import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function deleteTopLoseData() {
  console.log('üóëÔ∏è X√≥a To√†n B·ªô Data n.toplose (GameStats)\n');

  try {
    // 1. Th·ªëng k√™ tr∆∞·ªõc khi x√≥a
    console.log('1Ô∏è‚É£ Th·ªëng K√™ Tr∆∞·ªõc Khi X√≥a:');
    
    // ƒê·∫øm t·ªïng s·ªë GameStats records
    const totalGameStats = await prisma.gameStats.count();
    console.log(`   üìä T·ªïng s·ªë GameStats records: ${totalGameStats.toLocaleString()}`);
    
    // ƒê·∫øm theo gameType
    const gameStatsByType = await prisma.gameStats.groupBy({
      by: ['gameType'],
      _count: {
        id: true
      },
      _sum: {
        totalLost: true,
        totalBet: true,
        gamesPlayed: true,
        gamesWon: true
      },
      orderBy: {
        gameType: 'asc'
      }
    });

    console.log('\n   üìà Th·ªëng k√™ theo lo·∫°i game:');
    gameStatsByType.forEach(group => {
      const totalLost = group._sum.totalLost || 0n;
      const totalBet = group._sum.totalBet || 0n;
      const gamesPlayed = group._sum.gamesPlayed || 0;
      const gamesWon = group._sum.gamesWon || 0;
      
      console.log(`   üéÆ ${group.gameType}:`);
      console.log(`      üìä Records: ${group._count.id.toLocaleString()}`);
      console.log(`      üí∏ Total Lost: ${totalLost.toLocaleString()} AniCoin`);
      console.log(`      üí∞ Total Bet: ${totalBet.toLocaleString()} AniCoin`);
      console.log(`      üéØ Games Played: ${gamesPlayed.toLocaleString()}`);
      console.log(`      üèÜ Games Won: ${gamesWon.toLocaleString()}`);
    });

    // 2. T√¨m t·∫•t c·∫£ GameStats records
    console.log('\n2Ô∏è‚É£ T√¨m T·∫•t C·∫£ GameStats Records:');
    
    const allGameStats = await prisma.gameStats.findMany({
      select: {
        id: true,
        userId: true,
        guildId: true,
        gameType: true,
        totalLost: true,
        totalBet: true,
        gamesPlayed: true,
        gamesWon: true,
        biggestLoss: true,
        createdAt: true,
        updatedAt: true
      },
      orderBy: [
        { totalLost: 'desc' },
        { createdAt: 'desc' }
      ]
    });

    if (allGameStats.length === 0) {
      console.log('   ‚úÖ Kh√¥ng c√≥ GameStats data n√†o ƒë·ªÉ x√≥a');
      return;
    }

    console.log(`   üìä T√¨m th·∫•y ${allGameStats.length.toLocaleString()} GameStats records:`);
    
    // Nh√≥m theo gameType
    const statsByGameType = allGameStats.reduce((acc, stat) => {
      if (!acc[stat.gameType]) {
        acc[stat.gameType] = [];
      }
      acc[stat.gameType].push(stat);
      return acc;
    }, {} as Record<string, any[]>);

    Object.entries(statsByGameType).forEach(([gameType, stats]) => {
      console.log(`\n   üéÆ ${gameType} (${stats.length} records):`);
      
      // Hi·ªÉn th·ªã top 5 records c√≥ totalLost cao nh·∫•t
      const topLosers = stats
        .sort((a, b) => Number(b.totalLost - a.totalLost))
        .slice(0, 5);
      
      topLosers.forEach((stat, index) => {
        const winRate = stat.gamesPlayed > 0 ? Math.round((stat.gamesWon / stat.gamesPlayed) * 100) : 0;
        console.log(`     ${index + 1}. User ${stat.userId}:`);
        console.log(`        üí∏ Lost: ${stat.totalLost.toLocaleString()} AniCoin`);
        console.log(`        üí∞ Bet: ${stat.totalBet.toLocaleString()} AniCoin`);
        console.log(`        üìä Games: ${stat.gamesPlayed} | üèÜ Won: ${stat.gamesWon} (${winRate}%)`);
        console.log(`        üéØ Biggest Loss: ${stat.biggestLoss.toLocaleString()} AniCoin`);
      });
      
      if (stats.length > 5) {
        console.log(`     ... v√† ${stats.length - 5} records kh√°c`);
      }
    });

    // 3. X√°c nh·∫≠n x√≥a
    console.log('\n3Ô∏è‚É£ X√°c Nh·∫≠n X√≥a:');
    console.log(`   ‚ö†Ô∏è  B·∫°n s·∫Øp x√≥a ${allGameStats.length.toLocaleString()} GameStats records!`);
    console.log('   ‚ö†Ô∏è  H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!');
    console.log('   ‚ö†Ô∏è  T·∫•t c·∫£ d·ªØ li·ªáu n.toplose s·∫Ω b·ªã m·∫•t vƒ©nh vi·ªÖn!');
    console.log('   ‚ö†Ô∏è  C√°c l·ªánh sau s·∫Ω kh√¥ng ho·∫°t ƒë·ªông:');
    console.log('      - n.toplose');
    console.log('      - n.toplose all');
    console.log('      - n.toplose blackjack');
    console.log('      - n.toplose slots');
    console.log('      - n.toplose roulette');
    console.log('      - n.toplose coinflip');
    console.log('      - n.toplose stats');
    console.log('   ‚ö†Ô∏è  Top Lose GIF trong n.fishing s·∫Ω kh√¥ng hi·ªÉn th·ªã!');
    
    // 4. B·∫Øt ƒë·∫ßu x√≥a
    console.log('\n4Ô∏è‚É£ B·∫Øt ƒê·∫ßu X√≥a...');
    
    // X√≥a t·ª´ng GameStats record
    let deletedCount = 0;
    let errorCount = 0;
    
    for (const stat of allGameStats) {
      try {
        // X√≥a GameStats record
        await prisma.gameStats.delete({
          where: { id: stat.id }
        });
        
        deletedCount++;
        if (deletedCount % 50 === 0) {
          console.log(`   ‚úÖ ƒê√£ x√≥a ${deletedCount.toLocaleString()}/${allGameStats.length.toLocaleString()} records`);
        }
      } catch (error) {
        errorCount++;
        console.error(`   ‚ùå L·ªói khi x√≥a record ${stat.id}:`, error);
      }
    }

    // 5. Th·ªëng k√™ sau khi x√≥a
    console.log('\n5Ô∏è‚É£ Th·ªëng K√™ Sau Khi X√≥a:');
    
    const remainingGameStats = await prisma.gameStats.count();
    console.log(`   üìä GameStats records c√≤n l·∫°i: ${remainingGameStats.toLocaleString()}`);
    
    if (remainingGameStats === 0) {
      console.log('   ‚úÖ ƒê√£ x√≥a s·∫°ch t·∫•t c·∫£ GameStats data!');
    } else {
      console.log(`   ‚ö†Ô∏è  V·∫´n c√≤n ${remainingGameStats.toLocaleString()} records ch∆∞a x√≥a ƒë∆∞·ª£c`);
    }

    // 6. T√≥m t·∫Øt k·∫øt qu·∫£
    console.log('\n6Ô∏è‚É£ T√≥m T·∫Øt K·∫øt Qu·∫£:');
    console.log(`   ‚úÖ ƒê√£ x√≥a th√†nh c√¥ng: ${deletedCount.toLocaleString()} records`);
    console.log(`   ‚ùå L·ªói khi x√≥a: ${errorCount} records`);
    console.log(`   üìä T·ªïng c·ªông: ${allGameStats.length.toLocaleString()} GameStats records`);
    
    if (deletedCount === allGameStats.length) {
      console.log('   üéâ X√≥a th√†nh c√¥ng 100%!');
    } else {
      console.log(`   ‚ö†Ô∏è  X√≥a th√†nh c√¥ng ${Math.round((deletedCount / allGameStats.length) * 100)}%`);
    }

    // 7. Ki·ªÉm tra ·∫£nh h∆∞·ªüng
    console.log('\n7Ô∏è‚É£ Ki·ªÉm Tra ·∫¢nh H∆∞·ªüng:');
    
    // Ki·ªÉm tra xem c√≤n user n√†o kh√¥ng
    const remainingUsers = await prisma.user.count();
    console.log(`   üë• Users c√≤n l·∫°i: ${remainingUsers.toLocaleString()}`);
    
    // Ki·ªÉm tra xem c√≤n fish n√†o kh√¥ng
    const remainingFish = await prisma.fish.count();
    console.log(`   üêü Fish c√≤n l·∫°i: ${remainingFish.toLocaleString()}`);
    
    // Ki·ªÉm tra xem c√≤n breeding history kh√¥ng
    const remainingBreeding = await prisma.breedingHistory.count();
    console.log(`   üß¨ Breeding history c√≤n l·∫°i: ${remainingBreeding.toLocaleString()}`);
    
    // Ki·ªÉm tra xem c√≤n battle history kh√¥ng
    const remainingBattles = await prisma.battleHistory.count();
    console.log(`   ‚öîÔ∏è Battle history c√≤n l·∫°i: ${remainingBattles.toLocaleString()}`);

    // 8. Th√¥ng b√°o v·ªÅ c√°c l·ªánh b·ªã ·∫£nh h∆∞·ªüng
    console.log('\n8Ô∏è‚É£ L·ªánh B·ªã ·∫¢nh H∆∞·ªüng:');
    console.log('   ‚ùå n.toplose - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó n√†o!"');
    console.log('   ‚ùå n.toplose all - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó n√†o!"');
    console.log('   ‚ùå n.toplose blackjack - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó Blackjack n√†o!"');
    console.log('   ‚ùå n.toplose slots - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó Slots n√†o!"');
    console.log('   ‚ùå n.toplose roulette - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó Roulette n√†o!"');
    console.log('   ‚ùå n.toplose coinflip - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu thua l·ªó Coin Flip n√†o!"');
    console.log('   ‚ùå n.toplose stats - S·∫Ω hi·ªÉn th·ªã "Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ n√†o!"');
    console.log('   ‚ö†Ô∏è  n.fishing - Top Lose GIF s·∫Ω kh√¥ng hi·ªÉn th·ªã cho b·∫•t k·ª≥ ai');

    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('‚úÖ X√≥a data n.toplose ho√†n t·∫•t!');
    console.log('üí° L∆∞u √Ω: C√°c l·ªánh n.toplose s·∫Ω kh√¥ng ho·∫°t ƒë·ªông cho ƒë·∫øn khi c√≥ data m·ªõi');

  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a data n.toplose:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
deleteTopLoseData(); 