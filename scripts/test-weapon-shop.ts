/**
 * üß™ Test Weapon Shop
 * 
 * Script n√†y test c√°c t√≠nh nƒÉng c·ªßa weapon shop
 */

import { PrismaClient } from '@prisma/client';
import { WeaponService } from '../src/utils/weapon';
import { EcommerceService } from '../src/utils/ecommerce-db';

const prisma = new PrismaClient();

async function testWeaponShop() {
    console.log('üß™ Test Weapon Shop\n');

    const testGuildId = "test-guild-123";
    const testUserId = "test-user-456";

    try {
        // 1. T·∫°o user test
        console.log('1Ô∏è‚É£ T·∫°o user test:');
        
        await prisma.user.upsert({
            where: {
                userId_guildId: {
                    userId: testUserId,
                    guildId: testGuildId
                }
            },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 1000000n,
                fishBalance: 5000n
            }
        });

        console.log('   ‚úÖ User test ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 2. Test l·∫•y danh s√°ch v≈© kh√≠
        console.log('\n2Ô∏è‚É£ Test l·∫•y danh s√°ch v≈© kh√≠:');
        
        const weapons = WeaponService.getAllWeapons();
        console.log(`   üìä T·ªïng s·ªë v≈© kh√≠: ${weapons.length}`);
        
        weapons.forEach((weapon, index) => {
            console.log(`   ${index + 1}. ${weapon.name} - ${weapon.price.toLocaleString()} AniCoin`);
        });

        // 3. Test th√™m v≈© kh√≠ v√†o inventory
        console.log('\n3Ô∏è‚É£ Test th√™m v≈© kh√≠ v√†o inventory:');
        
        await WeaponService.addWeaponToInventory(testUserId, testGuildId, "sword", 2);
        await WeaponService.addWeaponToInventory(testUserId, testGuildId, "shield", 1);
        await WeaponService.addWeaponToInventory(testUserId, testGuildId, "spear", 1);
        
        console.log('   ‚úÖ ƒê√£ th√™m v≈© kh√≠ v√†o inventory');

        // 4. Test l·∫•y inventory
        console.log('\n4Ô∏è‚É£ Test l·∫•y inventory:');
        
        const inventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ trong inventory: ${inventory.length}`);
        
        inventory.forEach(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (weapon) {
                console.log(`   ‚Ä¢ ${weapon.name}: ${item.quantity}x (Trang b·ªã: ${item.isEquipped ? 'C√≥' : 'Kh√¥ng'})`);
            }
        });

        // 5. Test trang b·ªã v≈© kh√≠
        console.log('\n5Ô∏è‚É£ Test trang b·ªã v≈© kh√≠:');
        
        const equipSuccess = await WeaponService.equipWeapon(testUserId, testGuildId, "sword");
        console.log(`   ‚öîÔ∏è Trang b·ªã sword: ${equipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);

        // 6. Test l·∫•y v≈© kh√≠ ƒëang trang b·ªã
        console.log('\n6Ô∏è‚É£ Test l·∫•y v≈© kh√≠ ƒëang trang b·ªã:');
        
        const equippedWeapon = await WeaponService.getEquippedWeapon(testUserId, testGuildId);
        if (equippedWeapon) {
            const weapon = WeaponService.getWeaponById(equippedWeapon.weaponId);
            console.log(`   ‚öîÔ∏è V≈© kh√≠ ƒëang trang b·ªã: ${weapon?.name}`);
        } else {
            console.log('   ‚ùå Kh√¥ng c√≥ v≈© kh√≠ n√†o ƒëang trang b·ªã');
        }

        // 7. Test t√≠nh t·ªïng s·ª©c m·∫°nh
        console.log('\n7Ô∏è‚É£ Test t√≠nh t·ªïng s·ª©c m·∫°nh:');
        
        const stats = await WeaponService.getTotalWeaponStats(testUserId, testGuildId);
        console.log(`   ‚öîÔ∏è ATK: +${stats.power}`);
        console.log(`   üõ°Ô∏è DEF: +${stats.defense}`);
        console.log(`   üéØ Accuracy: +${stats.accuracy}%`);

        // 8. Test g·ª° trang b·ªã
        console.log('\n8Ô∏è‚É£ Test g·ª° trang b·ªã:');
        
        const unequipSuccess = await WeaponService.unequipWeapon(testUserId, testGuildId);
        console.log(`   üõ°Ô∏è G·ª° trang b·ªã: ${unequipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);

        // 9. Test b√°n v≈© kh√≠
        console.log('\n9Ô∏è‚É£ Test b√°n v≈© kh√≠:');
        
        const sellResult = await WeaponService.sellWeapon(testUserId, testGuildId, "shield", 1);
        if (sellResult.success) {
            console.log(`   üí∞ B√°n shield th√†nh c√¥ng: ${sellResult.sellPrice} AniCoin`);
        } else {
            console.log('   ‚ùå B√°n shield th·∫•t b·∫°i');
        }

        // 10. Test m√¥ ph·ªèng mua v≈© kh√≠
        console.log('\nüîü Test m√¥ ph·ªèng mua v≈© kh√≠:');
        
        const balance = await EcommerceService.getBalance(testUserId, testGuildId);
        console.log(`   üí≥ Balance hi·ªán t·∫°i: ${balance.toLocaleString()} AniCoin`);
        
        const weaponToBuy = WeaponService.getWeaponById("bow");
        if (weaponToBuy) {
            const cost = Number(weaponToBuy.price);
            console.log(`   üèπ Mua ${weaponToBuy.name}: ${cost.toLocaleString()} AniCoin`);
            
            if (balance >= cost) {
                console.log('   ‚úÖ ƒê·ªß ti·ªÅn ƒë·ªÉ mua');
            } else {
                console.log('   ‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua');
            }
        }

        // 11. Ki·ªÉm tra inventory cu·ªëi c√πng
        console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Ki·ªÉm tra inventory cu·ªëi c√πng:');
        
        const finalInventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ c√≤n l·∫°i: ${finalInventory.length}`);
        
        finalInventory.forEach(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (weapon) {
                console.log(`   ‚Ä¢ ${weapon.name}: ${item.quantity}x`);
            }
        });

        // 12. D·ªçn d·∫πp d·ªØ li·ªáu test
        console.log('\n1Ô∏è‚É£2Ô∏è‚É£ D·ªçn d·∫πp d·ªØ li·ªáu test:');
        
        await prisma.userWeapon.deleteMany({
            where: {
                userId: testUserId,
                guildId: testGuildId
            }
        });
        
        console.log('   üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu test');

        console.log('\n‚úÖ Test Weapon Shop ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå Test error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testWeaponShop(); 