import { ChannelRestrictionsStorage } from '../src/utils/channel-restrictions-storage';
import { isChannelAllowed } from '../src/config/channel-restrictions';

console.log('ü§ñ Bot Simulation Test\n');

// Load current configuration
const currentConfig = ChannelRestrictionsStorage.load();
console.log('Current config loaded');

// M√¥ ph·ªèng c√°ch bot x·ª≠ l√Ω l·ªánh
const simulateBotProcessing = (fullCommand: string) => {
    console.log(`\nüîç Processing: ${fullCommand}`);
    
    // B∆∞·ªõc 1: Bot s·∫Ω lo·∫°i b·ªè prefix v√† l·∫•y input
    const prefix = 'n.';
    const input = fullCommand.slice(prefix.length);
    console.log(`Input after removing prefix: "${input}"`);
    
    // B∆∞·ªõc 2: Bot s·∫Ω split input th√†nh args
    const args = input.trim().split(/\s+/g);
    console.log(`Args: [${args.join(', ')}]`);
    
    // B∆∞·ªõc 3: Bot s·∫Ω l·∫•y command name (ph·∫ßn ƒë·∫ßu ti√™n)
    const commandName = args[0];
    console.log(`Command name extracted: "${commandName}"`);
    
    // Debug: Hi·ªÉn th·ªã th√¥ng tin
    console.log(`First arg (command): ${args[0]}`);
    console.log(`Second arg (action): ${args[1] || 'none'}`);
    
    // Ki·ªÉm tra xem command name c√≥ ph·∫£i l√† m·ªôt trong c√°c l·ªánh channel restrictions kh√¥ng
    const isChannelRestrictionCommand = ['channelrestrictions', 'chrestrict', 'chrest', 'restrictch'].includes(commandName);
    console.log(`Is channel restriction command: ${isChannelRestrictionCommand}`);
    
    // N·∫øu ƒë√¢y l√† channel restriction command, n√≥ s·∫Ω ƒë∆∞·ª£c allow
    if (isChannelRestrictionCommand) {
        console.log(`‚úÖ Channel restriction command detected - will be allowed`);
        return true;
    }
    
    // B∆∞·ªõc 3: Bot s·∫Ω ki·ªÉm tra channel restrictions
    const channelId = 'ANY_CHANNEL';
    const categoryId = null;
    const isAdmin = true; // Gi·∫£ s·ª≠ user l√† admin
    
    console.log(`Checking channel restrictions for command: "${commandName}"`);
    console.log(`Channel: ${channelId}, Category: ${categoryId}, Admin: ${isAdmin}`);
    
    const result = isChannelAllowed(channelId, categoryId, currentConfig, commandName, isAdmin);
    console.log(`Result: ${result.allowed ? '‚úÖ Allowed' : '‚ùå Blocked'} - ${result.reason || 'No reason'}`);
    
    // B∆∞·ªõc 4: N·∫øu b·ªã ch·∫∑n, bot s·∫Ω kh√¥ng th·ª±c thi command
    if (!result.allowed) {
        console.log(`‚ùå Command would be blocked: ${result.reason}`);
        return false;
    } else {
        console.log(`‚úÖ Command would be allowed to proceed`);
        return true;
    }
};

// Test c√°c l·ªánh th·ª±c t·∫ø
const testCommands = [
    'n.chrestrict show',
    'n.chrestrict add channel 1362234245392765201',
    'n.chrestrict add category 123456789',
    'n.chrestrict remove channel 1362234245392765201',
    'n.chrestrict mode whitelist off',
    'n.chrestrict backup',
    'n.chrestrict restore',
    'n.channelrestrictions show',
    'n.chrest show',
    'n.restrictch add channel 1362234245392765201'
];

console.log('üìã Testing Bot Command Processing:');
let allowedCount = 0;
let blockedCount = 0;

testCommands.forEach(command => {
    const allowed = simulateBotProcessing(command);
    if (allowed) allowedCount++;
    else blockedCount++;
});

console.log('\nüìä Summary:');
console.log(`‚úÖ Allowed: ${allowedCount}`);
console.log(`‚ùå Blocked: ${blockedCount}`);
console.log(`Total: ${testCommands.length}`);

console.log('\nüîç Analysis:');
console.log('- If all commands are blocked, there might be an issue with the command name extraction');
console.log('- If some commands are allowed, the system is working correctly');
console.log('- The issue might be in how the bot processes the command vs how we simulate it'); 