import { FISH_LIST, FISHING_RODS, BAITS } from '../src/config/fish-data';

function testFinalFishingSystem() {
    console.log('üé£ Test H·ªá Th·ªëng C√¢u C√° Cu·ªëi C√πng\n');
    console.log('‚≠ê Logic: Kim c∆∞∆°ng + M·ªìi th·∫ßn = 4.96%, c√≤n l·∫°i < 1%\n');

    function calcLegendaryRate(rodKey: string, baitKey: string) {
        const rod = FISHING_RODS[rodKey];
        const bait = BAITS[baitKey];
        const totalBonus = rod.rarityBonus + bait.rarityBonus;
        const isDiamondDivine = rodKey === "diamond" && baitKey === "divine";
        
        const adjustedFish = FISH_LIST.map(fish => {
            let adjustedChance = fish.chance;
            if (fish.rarity === "legendary") {
                if (isDiamondDivine) {
                    adjustedChance += totalBonus * 0.1;
                } else {
                    adjustedChance = fish.chance * 0.01 + totalBonus * 0.005;
                }
            } else if (fish.rarity === "rare") {
                adjustedChance += totalBonus * 0.5;
            } else if (fish.rarity === "epic") {
                adjustedChance += totalBonus * 0.3;
            }
            return { ...fish, adjustedChance };
        });
        
        const totalChance = adjustedFish.reduce((sum, fish) => sum + fish.adjustedChance, 0);
        const legendaryChance = adjustedFish.filter(f => f.rarity === 'legendary').reduce((sum, f) => sum + f.adjustedChance, 0);
        return (legendaryChance / totalChance) * 100;
    }

    // Test 1: Ki·ªÉm tra t·∫•t c·∫£ t·ªï h·ª£p
    console.log('1Ô∏è‚É£ Ki·ªÉm tra t·ª∑ l·ªá c√° huy·ªÅn tho·∫°i v·ªõi t·∫•t c·∫£ t·ªï h·ª£p:');
    const rodKeys = Object.keys(FISHING_RODS);
    const baitKeys = Object.keys(BAITS);
    let maxRate = 0;
    let maxCombo = '';
    let allUnderOne = true;

    rodKeys.forEach(rodKey => {
        baitKeys.forEach(baitKey => {
            const rate = calcLegendaryRate(rodKey, baitKey);
            const rod = FISHING_RODS[rodKey];
            const bait = BAITS[baitKey];
            const isDiamondDivine = rodKey === "diamond" && baitKey === "divine";
            
            if (rate > maxRate) {
                maxRate = rate;
                maxCombo = `${rod.name} + ${bait.name}`;
            }
            
            if (rate >= 1 && !isDiamondDivine) {
                allUnderOne = false;
            }
            
            const status = isDiamondDivine ? "‚≠ê T·ªêI ƒêA" : (rate < 1 ? "‚úÖ < 1%" : "‚ùå >= 1%");
            console.log(`   ${rod.name.padEnd(20)} + ${bait.name.padEnd(18)}: ${rate.toFixed(3)}% ${status}`);
        });
    });

    console.log(`\nüìä K·∫øt qu·∫£:`);
    console.log(`   - T·ª∑ l·ªá t·ªëi ƒëa: ${maxRate.toFixed(2)}% (${maxCombo})`);
    console.log(`   - T·∫•t c·∫£ tr∆∞·ªùng h·ª£p kh√°c < 1%: ${allUnderOne ? '‚úÖ ƒê√öNG' : '‚ùå SAI'}`);

    // Test 2: So s√°nh v·ªõi logic c≈©
    console.log('\n2Ô∏è‚É£ So s√°nh v·ªõi logic c≈©:');
    console.log(`   - Logic c≈©: T·ª∑ l·ªá t·ªëi ƒëa ~6.72%`);
    console.log(`   - Logic m·ªõi: T·ª∑ l·ªá t·ªëi ƒëa ${maxRate.toFixed(2)}%`);
    console.log(`   - Gi·∫£m: ${(6.72 - maxRate).toFixed(2)}%`);

    // Test 3: Ki·ªÉm tra t√≠nh c√¥ng b·∫±ng
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra t√≠nh c√¥ng b·∫±ng:');
    const basicRate = calcLegendaryRate('basic', 'basic');
    const diamondDivineRate = calcLegendaryRate('diamond', 'divine');
    console.log(`   - C·∫ßn c∆° b·∫£n + M·ªìi c∆° b·∫£n: ${basicRate.toFixed(3)}%`);
    console.log(`   - C·∫ßn kim c∆∞∆°ng + M·ªìi th·∫ßn: ${diamondDivineRate.toFixed(2)}%`);
    console.log(`   - Ch√™nh l·ªách: ${(diamondDivineRate / basicRate).toFixed(0)}x`);

    // Test 4: K·∫øt lu·∫≠n
    console.log('\n4Ô∏è‚É£ K·∫øt lu·∫≠n:');
    console.log('   ‚úÖ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c√¢n b·∫±ng ho√†n h·∫£o');
    console.log('   ‚úÖ Ch·ªâ ƒë·∫ßu t∆∞ cao m·ªõi c√≥ t·ª∑ l·ªá c√° huy·ªÅn tho·∫°i t·ªët');
    console.log('   ‚úÖ T·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë·ªÅu c√≥ c∆° h·ªôi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i');
    console.log('   ‚úÖ C√° huy·ªÅn tho·∫°i gi·ªù ƒë√¢y th·ª±c s·ª± hi·∫øm v√† qu√Ω gi√°');
    console.log('   ‚úÖ Logic m·ªõi ƒë·∫£m b·∫£o c√¥ng b·∫±ng v√† th√°ch th·ª©c');

    console.log('\nüéØ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!');
}

testFinalFishingSystem(); 