import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkAllDatabaseTables() {
  console.log('üîç Ki·ªÉm Tra T·∫•t C·∫£ B·∫£ng Trong Database\n');

  try {
    // 1. Ki·ªÉm tra k·∫øt n·ªëi database
    console.log('1Ô∏è‚É£ Ki·ªÉm Tra K·∫øt N·ªëi Database:');
    
    await prisma.$connect();
    console.log('   ‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');

    // 2. Th·ª≠ query t·∫•t c·∫£ c√°c b·∫£ng ch√≠nh
    console.log('\n2Ô∏è‚É£ Ki·ªÉm Tra C√°c B·∫£ng Ch√≠nh:');
    
    // Ki·ªÉm tra b·∫£ng User
    try {
      const userCount = await prisma.user.count();
      console.log(`   ‚úÖ B·∫£ng User: ${userCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng User: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng Fish
    try {
      const fishCount = await prisma.fish.count();
      console.log(`   ‚úÖ B·∫£ng Fish: ${fishCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng Fish: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
      console.log(`   üîç L·ªói chi ti·∫øt: ${error}`);
    }

    // Ki·ªÉm tra b·∫£ng FishInventory
    try {
      const fishInventoryCount = await prisma.fishInventory.count();
      console.log(`   ‚úÖ B·∫£ng FishInventory: ${fishInventoryCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng FishInventory: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng FishInventoryItem
    try {
      const fishInventoryItemCount = await prisma.fishInventoryItem.count();
      console.log(`   ‚úÖ B·∫£ng FishInventoryItem: ${fishInventoryItemCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng FishInventoryItem: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng BattleFishInventory
    try {
      const battleFishInventoryCount = await prisma.battleFishInventory.count();
      console.log(`   ‚úÖ B·∫£ng BattleFishInventory: ${battleFishInventoryCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng BattleFishInventory: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng BattleFishInventoryItem
    try {
      const battleFishInventoryItemCount = await prisma.battleFishInventoryItem.count();
      console.log(`   ‚úÖ B·∫£ng BattleFishInventoryItem: ${battleFishInventoryItemCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng BattleFishInventoryItem: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng BreedingHistory
    try {
      const breedingHistoryCount = await prisma.breedingHistory.count();
      console.log(`   ‚úÖ B·∫£ng BreedingHistory: ${breedingHistoryCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng BreedingHistory: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng FishMarket
    try {
      const fishMarketCount = await prisma.fishMarket.count();
      console.log(`   ‚úÖ B·∫£ng FishMarket: ${fishMarketCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng FishMarket: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng FishFood
    try {
      const fishFoodCount = await prisma.fishFood.count();
      console.log(`   ‚úÖ B·∫£ng FishFood: ${fishFoodCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng FishFood: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng Transaction
    try {
      const transactionCount = await prisma.transaction.count();
      console.log(`   ‚úÖ B·∫£ng Transaction: ${transactionCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng Transaction: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // Ki·ªÉm tra b·∫£ng FishTransaction
    try {
      const fishTransactionCount = await prisma.fishTransaction.count();
      console.log(`   ‚úÖ B·∫£ng FishTransaction: ${fishTransactionCount} records`);
    } catch (error) {
      console.log('   ‚ùå B·∫£ng FishTransaction: Kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói');
    }

    // 3. Ki·ªÉm tra schema
    console.log('\n3Ô∏è‚É£ Ki·ªÉm Tra Schema:');
    
    // Th·ª≠ l·∫•y m·ªôt record t·ª´ b·∫£ng User ƒë·ªÉ ki·ªÉm tra schema
    try {
      const sampleUser = await prisma.user.findFirst({
        select: {
          id: true,
          userId: true,
          guildId: true,
          balance: true,
          fishBalance: true,
          dailyStreak: true,
          dailyBattleCount: true,
          dailyFeedCount: true,
          createdAt: true,
          updatedAt: true
        }
      });
      
      if (sampleUser) {
        console.log('   ‚úÖ Schema User h·ª£p l·ªá');
        console.log(`   üìã Sample User: ${JSON.stringify(sampleUser, null, 2)}`);
      } else {
        console.log('   ‚ö†Ô∏è B·∫£ng User tr·ªëng');
      }
    } catch (error) {
      console.log('   ‚ùå L·ªói khi ki·ªÉm tra schema User');
    }

    // 4. Ki·ªÉm tra Prisma Client
    console.log('\n4Ô∏è‚É£ Ki·ªÉm Tra Prisma Client:');
    
    const prismaModels = Object.keys(prisma).filter(key => 
      typeof prisma[key as keyof typeof prisma] === 'object' && 
      prisma[key as keyof typeof prisma] !== null &&
      typeof (prisma[key as keyof typeof prisma] as any).findMany === 'function'
    );
    
    console.log('   üìã C√°c model c√≥ s·∫µn trong Prisma Client:');
    prismaModels.forEach(model => {
      console.log(`      - ${model}`);
    });

    // 5. Ki·ªÉm tra file schema.prisma
    console.log('\n5Ô∏è‚É£ Ki·ªÉm Tra File Schema:');
    
    const fs = require('fs');
    const path = require('path');
    
    const schemaPath = path.join(process.cwd(), 'prisma', 'schema.prisma');
    
    if (fs.existsSync(schemaPath)) {
      console.log('   ‚úÖ File schema.prisma t·ªìn t·∫°i');
      
      const schemaContent = fs.readFileSync(schemaPath, 'utf8');
      const modelMatches = schemaContent.match(/model\s+(\w+)\s*{/g);
      
      if (modelMatches) {
        console.log('   üìã C√°c model trong schema.prisma:');
        modelMatches.forEach(match => {
          const modelName = match.replace(/model\s+(\w+)\s*{/, '$1');
          console.log(`      - ${modelName}`);
        });
      }
    } else {
      console.log('   ‚ùå File schema.prisma kh√¥ng t·ªìn t·∫°i');
    }

    // 6. Ki·ªÉm tra migrations
    console.log('\n6Ô∏è‚É£ Ki·ªÉm Tra Migrations:');
    
    const migrationsPath = path.join(process.cwd(), 'prisma', 'migrations');
    
    if (fs.existsSync(migrationsPath)) {
      const migrations = fs.readdirSync(migrationsPath).filter(dir => 
        fs.statSync(path.join(migrationsPath, dir)).isDirectory()
      );
      
      console.log(`   üìã S·ªë migrations: ${migrations.length}`);
      migrations.forEach(migration => {
        console.log(`      - ${migration}`);
      });
    } else {
      console.log('   ‚ùå Th∆∞ m·ª•c migrations kh√¥ng t·ªìn t·∫°i');
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra database:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
checkAllDatabaseTables(); 