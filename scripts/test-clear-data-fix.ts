/**
 * üß™ Test Clear Data Fix
 * 
 * Script n√†y test script clear data ƒë√£ s·ª≠a ƒë·ªÉ tr√°nh l·ªói foreign key constraint
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testClearDataFix() {
    console.log('üß™ Testing Clear Data Fix...\n');

    try {
        // 1. T·∫°o m·ªôt s·ªë d·ªØ li·ªáu test ƒë·ªÉ x√≥a
        console.log('1Ô∏è‚É£ Creating test data...');
        
        const testUserId = 'test-clear-user';
        const testGuildId = 'test-clear-guild';
        
        // T·∫°o user
        const user = await prisma.user.upsert({
            where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 1000n,
                fishBalance: 500n
            }
        });
        console.log('   ‚úÖ Test user created');

        // T·∫°o transaction
        await prisma.transaction.create({
            data: {
                userId: testUserId,
                guildId: testGuildId,
                amount: 100n,
                type: 'test',
                description: 'Test transaction'
            }
        });
        console.log('   ‚úÖ Test transaction created');

        // T·∫°o fish transaction
        await prisma.fishTransaction.create({
            data: {
                userId: testUserId,
                guildId: testGuildId,
                amount: 50n,
                type: 'test',
                description: 'Test fish transaction'
            }
        });
        console.log('   ‚úÖ Test fish transaction created');

        // T·∫°o daily claim
        await prisma.dailyClaim.create({
            data: {
                userId: testUserId,
                guildId: testGuildId
            }
        });
        console.log('   ‚úÖ Test daily claim created');

        // T·∫°o fish food
        await prisma.fishFood.create({
            data: {
                userId: testUserId,
                guildId: testGuildId,
                foodType: 'basic',
                quantity: 10
            }
        });
        console.log('   ‚úÖ Test fish food created');

        console.log('');

        // 2. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·∫°o
        console.log('2Ô∏è‚É£ Checking created data...');
        
        const userCount = await prisma.user.count();
        const transactionCount = await prisma.transaction.count();
        const fishTransactionCount = await prisma.fishTransaction.count();
        const dailyClaimCount = await prisma.dailyClaim.count();
        const fishFoodCount = await prisma.fishFood.count();
        
        console.log(`   Users: ${userCount}`);
        console.log(`   Transactions: ${transactionCount}`);
        console.log(`   Fish Transactions: ${fishTransactionCount}`);
        console.log(`   Daily Claims: ${dailyClaimCount}`);
        console.log(`   Fish Food: ${fishFoodCount}`);
        console.log('');

        // 3. Import v√† ch·∫°y script clear data
        console.log('3Ô∏è‚É£ Running clear data script...');
        
        // Import script clear data
        const { execSync } = require('child_process');
        
        try {
            execSync('npx tsx scripts/clear-all-data.ts', { 
                stdio: 'inherit',
                cwd: process.cwd()
            });
            console.log('   ‚úÖ Clear data script completed successfully');
        } catch (error) {
            console.error('   ‚ùå Clear data script failed:', error);
            return;
        }
        console.log('');

        // 4. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a
        console.log('4Ô∏è‚É£ Checking if data was cleared...');
        
        const finalUserCount = await prisma.user.count();
        const finalTransactionCount = await prisma.transaction.count();
        const finalFishTransactionCount = await prisma.fishTransaction.count();
        const finalDailyClaimCount = await prisma.dailyClaim.count();
        const finalFishFoodCount = await prisma.fishFood.count();
        
        console.log(`   Users: ${finalUserCount} (was ${userCount})`);
        console.log(`   Transactions: ${finalTransactionCount} (was ${transactionCount})`);
        console.log(`   Fish Transactions: ${finalFishTransactionCount} (was ${fishTransactionCount})`);
        console.log(`   Daily Claims: ${finalDailyClaimCount} (was ${dailyClaimCount})`);
        console.log(`   Fish Food: ${finalFishFoodCount} (was ${fishFoodCount})`);
        console.log('');

        // 5. Ki·ªÉm tra k·∫øt qu·∫£
        const allCleared = finalUserCount === 0 && 
                          finalTransactionCount === 0 && 
                          finalFishTransactionCount === 0 && 
                          finalDailyClaimCount === 0 && 
                          finalFishFoodCount === 0;

        if (allCleared) {
            console.log('üéâ SUCCESS: All data cleared successfully!');
            console.log('‚úÖ Foreign key constraint issue has been fixed!');
        } else {
            console.log('‚ùå FAILED: Some data still remains');
            console.log('‚ùå Clear data script may still have issues');
        }

    } catch (error) {
        console.error('‚ùå Test failed:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Run the test
testClearDataFix().catch(console.error); 