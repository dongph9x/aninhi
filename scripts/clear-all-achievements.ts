import prisma from '../src/utils/prisma';

async function clearAllAchievements() {
  console.log('üóëÔ∏è Clear All Achievements...\n');

  try {
    // ƒê·∫øm s·ªë achievement hi·ªán c√≥
    const count = await prisma.achievement.count();
    console.log(`üìä T√¨m th·∫•y ${count} achievement trong database`);

    if (count === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ achievement n√†o ƒë·ªÉ x√≥a!');
      return;
    }

    // Xem danh s√°ch achievement tr∆∞·ªõc khi x√≥a
    console.log('\nüìã Danh s√°ch achievement s·∫Ω b·ªã x√≥a:');
    const achievements = await prisma.achievement.findMany({
      orderBy: { createdAt: 'desc' },
    });

    achievements.forEach((achievement, index) => {
      const typeNames = ['Top c√¢u c√°', 'Top FishCoin', 'Top FishBattle', 'Top Custom'];
      const typeName = typeNames[achievement.type] || 'Unknown';
      console.log(`   ${index + 1}. ${achievement.name} (${typeName}) - ID: ${achievement.id}`);
    });

    // X√°c nh·∫≠n x√≥a
    console.log('\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ achievement?');
    console.log('   L∆∞u √Ω: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!');
    
    // Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ th√™m prompt ƒë·ªÉ x√°c nh·∫≠n
    // Nh∆∞ng trong script n√†y, ch√∫ng ta s·∫Ω x√≥a tr·ª±c ti·∫øp
    
    // X√≥a t·∫•t c·∫£ achievement
    const deleteResult = await prisma.achievement.deleteMany({});
    
    console.log(`\n‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${deleteResult.count} achievement!`);
    
    // Ki·ªÉm tra l·∫°i
    const remainingCount = await prisma.achievement.count();
    console.log(`üìä S·ªë achievement c√≤n l·∫°i: ${remainingCount}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a achievement:', error);
  } finally {
    await prisma.$disconnect();
  }
}

clearAllAchievements().catch(console.error); 