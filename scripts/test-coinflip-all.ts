/**
 * ü™ô Test Coinflip "all" bet v·ªõi maxBet
 * 
 * Script n√†y test l·ªánh coinflip v·ªõi bet "all" ƒë·ªÉ ƒë·∫£m b·∫£o
 * kh√¥ng b·ªã m·∫•t h·∫øt ti·ªÅn khi maxBet ch·ªâ 100k
 */

import { PrismaClient } from '@prisma/client';
import { EcommerceService } from '../src/utils/ecommerce-db';

const prisma = new PrismaClient();
const maxBet = 100000;

async function testCoinflipAll() {
    console.log('ü™ô Test Coinflip "all" bet v·ªõi maxBet\n');

    try {
        // 1. T√¨m user c√≥ balance l·ªõn h∆°n maxBet
        console.log('1Ô∏è‚É£ Finding user with balance > maxBet...');
        const userWithHighBalance = await prisma.user.findFirst({
            where: {
                balance: { gt: BigInt(maxBet) }
            },
            orderBy: {
                balance: 'desc'
            }
        });

        if (!userWithHighBalance) {
            console.log('   ‚ùå No user with balance > maxBet found');
            console.log('   üí° Creating test user with high balance...');
            
            // T·∫°o test user v·ªõi balance cao
            const testUserId = 'test-coinflip-all-user';
            const testGuildId = '1005280612845891615';
            
            await EcommerceService.addMoney(testUserId, testGuildId, 500000, 'Test coinflip all');
            console.log('   ‚úÖ Created test user with 500,000 AniCoin');
            
            const balance = await EcommerceService.getBalance(testUserId, testGuildId);
            console.log(`   üìä Test user balance: ${balance.toLocaleString()} AniCoin`);
            
            return testUserWithHighBalance(testUserId, testGuildId, balance);
        }

        const userId = userWithHighBalance.userId;
        const guildId = userWithHighBalance.guildId;
        const balance = userWithHighBalance.balance;
        
        console.log(`   ‚úÖ Found user: ${userId}`);
        console.log(`   üìä Balance: ${balance.toLocaleString()} AniCoin`);
        console.log(`   üéØ MaxBet: ${maxBet.toLocaleString()} AniCoin`);

        return testUserWithHighBalance(userId, guildId, balance);

    } catch (error) {
        console.error('‚ùå Error testing coinflip all:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

async function testUserWithHighBalance(userId: string, guildId: string, balance: bigint) {
    console.log('\n2Ô∏è‚É£ Testing coinflip "all" logic...');
    
    // Test logic x·ª≠ l√Ω "all" bet
    const originalBet = "all";
    const currentBalance = balance;
    
    console.log('   üìã Original bet: "all"');
    console.log(`   üìä Current balance: ${currentBalance.toLocaleString()} AniCoin`);
    console.log(`   üéØ MaxBet: ${maxBet.toLocaleString()} AniCoin`);
    
    // Logic x·ª≠ l√Ω "all" bet (t·ª´ code)
    let bet = originalBet;
    if (bet === "all") {
        bet = Math.min(Number(currentBalance), maxBet);
    }
    
    const betAmount = bet as number;
    console.log(`   üí∞ Actual bet amount: ${betAmount.toLocaleString()} AniCoin`);
    
    // Ki·ªÉm tra logic
    if (betAmount <= maxBet) {
        console.log('   ‚úÖ Bet amount is within maxBet limit');
    } else {
        console.log('   ‚ùå Bet amount exceeds maxBet limit');
    }
    
    if (betAmount < Number(currentBalance)) {
        console.log('   ‚úÖ User will not lose all money');
    } else {
        console.log('   ‚ö†Ô∏è  User will lose all money (but within maxBet)');
    }
    
    // Test display text logic
    console.log('\n3Ô∏è‚É£ Testing display text logic...');
    
    let betDisplayText = `**${bet}** AniCoin`;
    if (originalBet === "all") {
        const actualBet = bet as number;
        const totalBalance = Number(currentBalance);
        if (actualBet < totalBalance) {
            betDisplayText = `**${actualBet}** AniCoin (t·ªëi ƒëa ${maxBet.toLocaleString()})`;
        } else {
            betDisplayText = `**${actualBet}** AniCoin (t·∫•t c·∫£)`;
        }
    }
    
    console.log('   üìã Display text:', betDisplayText);
    
    // Test c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    console.log('\n4Ô∏è‚É£ Testing different scenarios...');
    
    // Scenario 1: Balance > maxBet
    console.log('\n   üìã Scenario 1: Balance > maxBet');
    console.log(`   Balance: 500,000 AniCoin`);
    console.log(`   MaxBet: ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   Bet "all": ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   Display: **${maxBet.toLocaleString()}** AniCoin (t·ªëi ƒëa ${maxBet.toLocaleString()})`);
    console.log(`   Result: User keeps ${(500000 - maxBet).toLocaleString()} AniCoin if lose`);
    
    // Scenario 2: Balance < maxBet
    console.log('\n   üìã Scenario 2: Balance < maxBet');
    console.log(`   Balance: 50,000 AniCoin`);
    console.log(`   MaxBet: ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   Bet "all": 50,000 AniCoin`);
    console.log(`   Display: **50,000** AniCoin (t·∫•t c·∫£)`);
    console.log(`   Result: User loses all money if lose`);
    
    // Scenario 3: Balance = maxBet
    console.log('\n   üìã Scenario 3: Balance = maxBet');
    console.log(`   Balance: ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   MaxBet: ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   Bet "all": ${maxBet.toLocaleString()} AniCoin`);
    console.log(`   Display: **${maxBet.toLocaleString()}** AniCoin (t·∫•t c·∫£)`);
    console.log(`   Result: User loses all money if lose`);
    
    // Test win/lose calculations
    console.log('\n5Ô∏è‚É£ Testing win/lose calculations...');
    
    const testBet = betAmount;
    const winAmount = testBet * 2;
    const loseAmount = testBet;
    
    console.log(`   üí∞ Bet amount: ${testBet.toLocaleString()} AniCoin`);
    console.log(`   üéâ Win amount: ${winAmount.toLocaleString()} AniCoin`);
    console.log(`   üò¢ Lose amount: ${loseAmount.toLocaleString()} AniCoin`);
    
    const remainingAfterLose = Number(currentBalance) - loseAmount;
    console.log(`   üí∏ Remaining after lose: ${remainingAfterLose.toLocaleString()} AniCoin`);
    
    if (remainingAfterLose > 0) {
        console.log('   ‚úÖ User will have money left after losing');
    } else {
        console.log('   ‚ö†Ô∏è  User will have no money left after losing');
    }
    
    // Test balance check logic
    console.log('\n6Ô∏è‚É£ Testing balance check logic...');
    
    const currentBalanceBigInt = BigInt(currentBalance);
    const betAmountBigInt = BigInt(betAmount);
    
    console.log(`   üìä Current balance (BigInt): ${currentBalanceBigInt}`);
    console.log(`   üí∞ Bet amount (BigInt): ${betAmountBigInt}`);
    console.log(`   ‚úÖ Balance >= Bet: ${currentBalanceBigInt >= betAmountBigInt}`);
    
    if (currentBalanceBigInt >= betAmountBigInt) {
        console.log('   ‚úÖ User has enough money to bet');
    } else {
        console.log('   ‚ùå User does not have enough money to bet');
    }
    
    console.log('\n‚úÖ Coinflip "all" test completed!');
    console.log('\nüéØ Key Fixes:');
    console.log('   ‚úÖ "all" bet now limited to maxBet (100k)');
    console.log('   ‚úÖ User cannot lose all money when balance > maxBet');
    console.log('   ‚úÖ Clear display text shows actual bet amount');
    console.log('   ‚úÖ Proper balance checks with BigInt');
    console.log('   ‚úÖ Consistent logic across all game commands');
    
    console.log('\nüìã Test Commands:');
    console.log('   n.coinflip all head');
    console.log('   n.coinflip all tail');
    console.log('   n.coinflip head all');
    console.log('   n.coinflip tail all');
}

// Ch·∫°y test
testCoinflipAll().catch(console.error); 