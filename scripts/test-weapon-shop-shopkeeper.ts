/**
 * üß™ Test Weapon Shop Shopkeeper
 * 
 * Script n√†y test vi·ªác hi·ªÉn th·ªã ·∫£nh shopkeeper trong weapon shop
 */

import { PrismaClient } from '@prisma/client';
import { WeaponService } from '../src/utils/weapon';
import { EcommerceService } from '../src/utils/ecommerce-db';

const prisma = new PrismaClient();

async function testWeaponShopShopkeeper() {
    console.log('üß™ Test Weapon Shop Shopkeeper\n');

    const testGuildId = "test-guild-789";
    const testUserId = "test-user-123";

    try {
        // 1. T·∫°o user test
        console.log('1Ô∏è‚É£ T·∫°o user test:');
        
        await prisma.user.upsert({
            where: {
                userId_guildId: {
                    userId: testUserId,
                    guildId: testGuildId
                }
            },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 100000n,
                fishBalance: 1000n
            }
        });

        console.log('   ‚úÖ User test ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 2. Test l·∫•y danh s√°ch v≈© kh√≠
        console.log('\n2Ô∏è‚É£ Test l·∫•y danh s√°ch v≈© kh√≠:');
        
        const weapons = WeaponService.getAllWeapons();
        console.log(`   üìä T·ªïng s·ªë v≈© kh√≠: ${weapons.length}`);
        
        weapons.forEach((weapon, index) => {
            console.log(`   ${index + 1}. ${weapon.name} - ${weapon.price.toLocaleString()} AniCoin`);
        });

        // 3. Test mua v≈© kh√≠
        console.log('\n3Ô∏è‚É£ Test mua v≈© kh√≠:');
        
        const ironSword = weapons.find(w => w.id === 'sword');
        
        if (ironSword) {
            // Mua weapon
            await EcommerceService.subtractMoney(testUserId, testGuildId, Number(ironSword.price), `Mua ${ironSword.name}`);
            await WeaponService.addWeaponToInventory(testUserId, testGuildId, ironSword.id, 1);
            console.log(`   üõí ƒê√£ mua ${ironSword.name}`);
            
            // Trang b·ªã weapon
            const equipSuccess = await WeaponService.equipWeapon(testUserId, testGuildId, ironSword.id);
            console.log(`   ‚öîÔ∏è Trang b·ªã ${ironSword.name}: ${equipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
        }

        // 4. Test inventory
        console.log('\n4Ô∏è‚É£ Test inventory:');
        
        const inventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ trong inventory: ${inventory.length}`);
        
        inventory.forEach(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (weapon) {
                console.log(`   ‚Ä¢ ${weapon.name}: ${item.quantity}x (Trang b·ªã: ${item.isEquipped ? 'C√≥' : 'Kh√¥ng'})`);
            }
        });

        // 5. Test weapon info
        console.log('\n5Ô∏è‚É£ Test weapon info:');
        
        if (ironSword) {
            console.log(`   üìù Th√¥ng tin ${ironSword.name}:`);
            console.log(`   ‚Ä¢ ID: ${ironSword.id}`);
            console.log(`   ‚Ä¢ T√™n: ${ironSword.name}`);
            console.log(`   ‚Ä¢ Gi√°: ${ironSword.price.toLocaleString()} AniCoin`);
            console.log(`   ‚Ä¢ ATK: +${ironSword.power}`);
            console.log(`   ‚Ä¢ DEF: +${ironSword.defense}`);
            console.log(`   ‚Ä¢ Accuracy: +${ironSword.accuracy}%`);
            console.log(`   ‚Ä¢ Rarity: ${ironSword.rarity}`);
            console.log(`   ‚Ä¢ Type: ${ironSword.type}`);
        }

        // 6. Test weapon stats
        console.log('\n6Ô∏è‚É£ Test weapon stats:');
        
        const weaponStats = await WeaponService.getTotalWeaponStats(testUserId, testGuildId);
        console.log(`   üìä Weapon stats: ATK +${weaponStats.power}, DEF +${weaponStats.defense}, Accuracy +${weaponStats.accuracy}%`);

        // 7. Test g·ª° trang b·ªã
        console.log('\n7Ô∏è‚É£ Test g·ª° trang b·ªã:');
        
        const unequipSuccess = await WeaponService.unequipWeapon(testUserId, testGuildId);
        console.log(`   üõ°Ô∏è G·ª° trang b·ªã: ${unequipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);

        // 8. Ki·ªÉm tra inventory sau khi g·ª° trang b·ªã
        console.log('\n8Ô∏è‚É£ Ki·ªÉm tra inventory sau khi g·ª° trang b·ªã:');
        
        const finalInventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ c√≤n l·∫°i: ${finalInventory.length}`);
        
        finalInventory.forEach(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (weapon) {
                console.log(`   ‚Ä¢ ${weapon.name}: ${item.quantity}x (Trang b·ªã: ${item.isEquipped ? 'C√≥' : 'Kh√¥ng'})`);
            }
        });

        // 9. D·ªçn d·∫πp d·ªØ li·ªáu test
        console.log('\n9Ô∏è‚É£ D·ªçn d·∫πp d·ªØ li·ªáu test:');
        
        await prisma.userWeapon.deleteMany({
            where: {
                userId: testUserId,
                guildId: testGuildId
            }
        });
        
        console.log('   üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu test');

        console.log('\n‚úÖ Test Weapon Shop Shopkeeper ho√†n t·∫•t!');
        console.log('\nüé≠ **L∆∞u √Ω:** ·∫¢nh shopkeeper s·∫Ω hi·ªÉn th·ªã trong t·∫•t c·∫£ c√°c embed c·ªßa weapon shop:');
        console.log('   ‚Ä¢ Main shop (n.weaponshop)');
        console.log('   ‚Ä¢ Buy weapon button');
        console.log('   ‚Ä¢ Inventory button');
        console.log('   ‚Ä¢ Equip weapon button');
        console.log('   ‚Ä¢ Help button');
        console.log('   ‚Ä¢ Weapon info');
        console.log('   ‚Ä¢ Success messages');

    } catch (error) {
        console.error('‚ùå Test error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testWeaponShopShopkeeper(); 