import { FISH_LIST, FISHING_RODS, BAITS, FishDataService } from '../src/config/fish-data';

console.log('üêü Testing Fish Data Management System\n');

// Test 1: Hi·ªÉn th·ªã t·ªïng quan
console.log('üìä T·ªïng quan d·ªØ li·ªáu:');
console.log(`- T·ªïng s·ªë lo·∫°i c√°: ${FISH_LIST.length}`);
console.log(`- T·ªïng s·ªë lo·∫°i c·∫ßn c√¢u: ${Object.keys(FISHING_RODS).length}`);
console.log(`- T·ªïng s·ªë lo·∫°i m·ªìi: ${Object.keys(BAITS).length}\n`);

// Test 2: Ph√¢n lo·∫°i theo rarity
console.log('üè∑Ô∏è Ph√¢n lo·∫°i theo Rarity:');
const rarityCounts = {
    common: 0,
    rare: 0,
    epic: 0,
    legendary: 0
};

FISH_LIST.forEach(fish => {
    rarityCounts[fish.rarity]++;
});

Object.entries(rarityCounts).forEach(([rarity, count]) => {
    console.log(`- ${rarity}: ${count} lo·∫°i`);
});
console.log('');

// Test 3: Test c√°c h√†m ti·ªán √≠ch
console.log('üîç Test c√°c h√†m ti·ªán √≠ch:');

// Test l·∫•y c√° theo rarity
const legendaryFish = FishDataService.getFishByRarity('legendary');
console.log(`- C√° huy·ªÅn tho·∫°i: ${legendaryFish.length} lo·∫°i`);
legendaryFish.forEach(fish => {
    console.log(`  ‚Ä¢ ${fish.name} (${fish.emoji}) - ${fish.description}`);
});

// Test l·∫•y c√° theo habitat
const freshwaterFish = FishDataService.getFishByHabitat('freshwater');
const saltwaterFish = FishDataService.getFishByHabitat('saltwater');
console.log(`\n- C√° n∆∞·ªõc ng·ªçt: ${freshwaterFish.length} lo·∫°i`);
console.log(`- C√° n∆∞·ªõc m·∫∑n: ${saltwaterFish.length} lo·∫°i`);

// Test l·∫•y c√° theo m√πa
const springFish = FishDataService.getFishBySeason('spring');
console.log(`\n- C√° m√πa xu√¢n: ${springFish.length} lo·∫°i`);

// Test l·∫•y c√° c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát
const specialFish = FishDataService.getFishWithSpecialAbilities();
console.log(`\n- C√° c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát: ${specialFish.length} lo·∫°i`);
specialFish.forEach(fish => {
    console.log(`  ‚Ä¢ ${fish.name}: ${fish.specialAbilities?.join(', ')}`);
});

// Test l·∫•y c√° c√≥ th·ªëng k√™ chi·∫øn ƒë·∫•u
const battleFish = FishDataService.getFishWithBattleStats();
console.log(`\n- C√° c√≥ th·ªëng k√™ chi·∫øn ƒë·∫•u: ${battleFish.length} lo·∫°i`);

// Test 4: Hi·ªÉn th·ªã th√¥ng tin c·∫ßn c√¢u
console.log('\nüé£ Th√¥ng tin c·∫ßn c√¢u:');
Object.entries(FISHING_RODS).forEach(([type, rod]) => {
    console.log(`- ${rod.name} (${type}): ${rod.emoji}`);
    console.log(`  Gi√°: ${rod.price.toLocaleString()} | Bonus: +${rod.rarityBonus}% | ƒê·ªô b·ªÅn: ${rod.durability}`);
    if (rod.specialEffects) {
        console.log(`  Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát: ${rod.specialEffects.join(', ')}`);
    }
});

// Test 5: Hi·ªÉn th·ªã th√¥ng tin m·ªìi
console.log('\nü™± Th√¥ng tin m·ªìi:');
Object.entries(BAITS).forEach(([type, bait]) => {
    console.log(`- ${bait.name} (${type}): ${bait.emoji}`);
    console.log(`  Gi√°: ${bait.price.toLocaleString()} | Bonus: +${bait.rarityBonus}%`);
    if (bait.specialEffects) {
        console.log(`  Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát: ${bait.specialEffects.join(', ')}`);
    }
});

// Test 6: Test t√¨m ki·∫øm c√° theo t√™n
console.log('\nüîé Test t√¨m ki·∫øm:');
const testFishNames = ['C√° r√¥ phi', 'C√° voi xanh', 'C√° kh√¥ng t·ªìn t·∫°i'];
testFishNames.forEach(name => {
    const fish = FishDataService.getFishByName(name);
    if (fish) {
        console.log(`‚úì T√¨m th·∫•y: ${fish.name} (${fish.rarity})`);
    } else {
        console.log(`‚úó Kh√¥ng t√¨m th·∫•y: ${name}`);
    }
});

// Test 7: Test l·∫•y c·∫ßn c√¢u v√† m·ªìi
console.log('\nüé£ Test l·∫•y c·∫ßn c√¢u v√† m·ªìi:');
const testRodTypes = ['basic', 'diamond', 'kh√¥ng t·ªìn t·∫°i'];
testRodTypes.forEach(type => {
    const rod = FishDataService.getRodByType(type);
    if (rod) {
        console.log(`‚úì C·∫ßn c√¢u ${type}: ${rod.name}`);
    } else {
        console.log(`‚úó Kh√¥ng t√¨m th·∫•y c·∫ßn c√¢u: ${type}`);
    }
});

const testBaitTypes = ['basic', 'divine', 'kh√¥ng t·ªìn t·∫°i'];
testBaitTypes.forEach(type => {
    const bait = FishDataService.getBaitByType(type);
    if (bait) {
        console.log(`‚úì M·ªìi ${type}: ${bait.name}`);
    } else {
        console.log(`‚úó Kh√¥ng t√¨m th·∫•y m·ªìi: ${type}`);
    }
});

console.log('\n‚úÖ Test ho√†n th√†nh!'); 