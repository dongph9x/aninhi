import { FishBattleService } from '../src/utils/fish-battle';
import { BattleFishInventoryService } from '../src/utils/battle-fish-inventory';
import { FishBreedingService } from '../src/utils/fish-breeding';
import prisma from '../src/utils/prisma';

async function testDailyBattleDisplay() {
  console.log('üß™ Testing Daily Battle Limit Display...\n');

  const testUserId = 'test-user-daily-battle-display';
  const testGuildId = 'test-guild-daily-battle-display';

  try {
    // 1. T·∫°o user test
    console.log('1Ô∏è‚É£ Creating test user...');
    await prisma.user.upsert({
      where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
      update: {},
      create: {
        userId: testUserId,
        guildId: testGuildId,
        balance: BigInt(0),
        fishBalance: BigInt(0),
        dailyStreak: 0,
        dailyBattleCount: 0,
        lastBattleReset: new Date()
      }
    });
    console.log('‚úÖ Test user created\n');

    // 2. Test hi·ªÉn th·ªã daily battle limit ban ƒë·∫ßu
    console.log('2Ô∏è‚É£ Testing initial daily battle limit display...');
    const initialCheck = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    console.log('Initial daily battle info:');
    console.log(`   Can battle: ${initialCheck.canBattle}`);
    console.log(`   Remaining battles: ${initialCheck.remainingBattles}/20`);
    console.log(`   Error: ${initialCheck.error || 'None'}`);
    console.log('‚úÖ Initial display test completed\n');

    // 3. Test hi·ªÉn th·ªã sau khi ƒë·∫•u 5 l·∫ßn
    console.log('3Ô∏è‚É£ Testing display after 5 battles...');
    for (let i = 1; i <= 5; i++) {
      await FishBattleService.incrementDailyBattleCount(testUserId, testGuildId);
    }
    
    const after5Battles = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    console.log('After 5 battles:');
    console.log(`   Can battle: ${after5Battles.canBattle}`);
    console.log(`   Remaining battles: ${after5Battles.remainingBattles}/20`);
    console.log(`   Error: ${after5Battles.error || 'None'}`);
    console.log('‚úÖ After 5 battles test completed\n');

    // 4. Test hi·ªÉn th·ªã khi ƒë·∫°t gi·ªõi h·∫°n
    console.log('4Ô∏è‚É£ Testing display at maximum limit...');
    // TƒÉng th√™m 15 l·∫ßn n·ªØa ƒë·ªÉ ƒë·∫°t 20 l·∫ßn
    for (let i = 6; i <= 20; i++) {
      await FishBattleService.incrementDailyBattleCount(testUserId, testGuildId);
    }
    
    const atMaxLimit = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    console.log('At maximum limit:');
    console.log(`   Can battle: ${atMaxLimit.canBattle}`);
    console.log(`   Remaining battles: ${atMaxLimit.remainingBattles}/20`);
    console.log(`   Error: ${atMaxLimit.error || 'None'}`);
    console.log('‚úÖ Maximum limit test completed\n');

    // 5. Test hi·ªÉn th·ªã sau khi reset ng√†y m·ªõi
    console.log('5Ô∏è‚É£ Testing display after new day reset...');
    // Gi·∫£ l·∫≠p ng√†y m·ªõi
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    await prisma.user.update({
      where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
      data: { lastBattleReset: yesterday }
    });

    const afterReset = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    console.log('After reset for new day:');
    console.log(`   Can battle: ${afterReset.canBattle}`);
    console.log(`   Remaining battles: ${afterReset.remainingBattles}/20`);
    console.log(`   Error: ${afterReset.error || 'None'}`);
    console.log('‚úÖ Reset test completed\n');

    // 6. Test m√¥ ph·ªèng hi·ªÉn th·ªã trong l·ªánh fishbattle
    console.log('6Ô∏è‚É£ Simulating fishbattle command display...');
    console.log('üìã Embed fields that would be displayed:');
    console.log(`   ‚è∞ Gi·ªõi H·∫°n ƒê·∫•u C√° H√¥m Nay: ‚úÖ C√≤n **${afterReset.remainingBattles}/20** l·∫ßn ƒë·∫•u c√°`);
    console.log('‚úÖ Fishbattle display simulation completed\n');

    // 7. Test v·ªõi admin user
    console.log('7Ô∏è‚É£ Testing with admin user...');
    const adminUserId = '389957152153796608'; // ID trong danh s√°ch admin
    const adminCheck = await FishBattleService.checkAndResetDailyBattleCount(adminUserId, testGuildId);
    console.log('Admin user daily battle info:');
    console.log(`   Can battle: ${adminCheck.canBattle}`);
    console.log(`   Remaining battles: ${adminCheck.remainingBattles}/20`);
    console.log(`   Error: ${adminCheck.error || 'None'}`);
    console.log('‚úÖ Admin test completed\n');

    console.log('üéâ All daily battle display tests completed successfully!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    // Cleanup
    console.log('üßπ Cleaning up test data...');
    await prisma.user.deleteMany({
      where: { userId: testUserId, guildId: testGuildId }
    });
    console.log('‚úÖ Cleanup completed');
    
    await prisma.$disconnect();
  }
}

testDailyBattleDisplay(); 