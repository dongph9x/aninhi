/**
 * üîç Debug ngu·ªìn d·ªØ li·ªáu n.toplose
 * 
 * Script n√†y debug ƒë·ªÉ t√¨m ngu·ªìn d·ªØ li·ªáu toplose
 */

import { PrismaClient } from '@prisma/client';
import { GameStatsService } from '../src/utils/gameStats';

const prisma = new PrismaClient();

async function debugTopLoseSource() {
    console.log('üîç Debug ngu·ªìn d·ªØ li·ªáu n.toplose\n');

    try {
        // 1. Ki·ªÉm tra t·∫•t c·∫£ database files
        console.log('1Ô∏è‚É£ Ki·ªÉm tra t·∫•t c·∫£ database files:');
        
        const fs = require('fs');
        const path = require('path');
        
        const dataDir = './data';
        const files = fs.readdirSync(dataDir);
        
        const dbFiles = files.filter(file => file.includes('database.db'));
        console.log(`   üìÅ T√¨m th·∫•y ${dbFiles.length} database files:`);
        
        dbFiles.forEach(file => {
            const filePath = path.join(dataDir, file);
            const stats = fs.statSync(filePath);
            console.log(`   üìÑ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
        });

        // 2. Ki·ªÉm tra environment variables
        console.log('\n2Ô∏è‚É£ Ki·ªÉm tra environment variables:');
        console.log(`   üóÑÔ∏è DATABASE_URL: ${process.env.DATABASE_URL || 'Not set'}`);
        console.log(`   üóÑÔ∏è PRISMA_DATABASE_URL: ${process.env.PRISMA_DATABASE_URL || 'Not set'}`);

        // 3. Ki·ªÉm tra Prisma schema
        console.log('\n3Ô∏è‚É£ Ki·ªÉm tra Prisma schema:');
        const schemaPath = './prisma/schema.prisma';
        if (fs.existsSync(schemaPath)) {
            const schema = fs.readFileSync(schemaPath, 'utf8');
            const dbUrlMatch = schema.match(/url\s*=\s*["']([^"']+)["']/);
            if (dbUrlMatch) {
                console.log(`   üìã Schema database URL: ${dbUrlMatch[1]}`);
            }
        }

        // 4. Test GameStatsService tr·ª±c ti·∫øp
        console.log('\n4Ô∏è‚É£ Test GameStatsService tr·ª±c ti·∫øp:');
        
        try {
            // Test v·ªõi guildId th·ª±c t·∫ø (c√≥ th·ªÉ c·∫ßn thay ƒë·ªïi)
            const testGuildId = "your-actual-guild-id"; // C·∫ßn thay ƒë·ªïi th√†nh guildId th·ª±c t·∫ø
            
            const overallLoseLeaderboard = await GameStatsService.getOverallLoseLeaderboard(testGuildId, 10);
            console.log(`   üìä GameStatsService.getOverallLoseLeaderboard result: ${overallLoseLeaderboard.length} records`);
            
            if (overallLoseLeaderboard.length > 0) {
                console.log('   üèÜ Top losers from GameStatsService:');
                overallLoseLeaderboard.forEach((player, index) => {
                    console.log(`   ${index + 1}. ${player.userId}`);
                    console.log(`      üí∏ ${player.totalLost.toLocaleString()} AniCoin thua`);
                    console.log(`      üìä ${player.gamesPlayed} tr·∫≠n | üèÜ ${player.gamesWon} th·∫Øng`);
                    console.log('');
                });
            }
        } catch (error) {
            console.log(`   ‚ùå GameStatsService error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }

        // 5. Ki·ªÉm tra t·∫•t c·∫£ b·∫£ng trong database hi·ªán t·∫°i
        console.log('\n5Ô∏è‚É£ Ki·ªÉm tra t·∫•t c·∫£ b·∫£ng trong database hi·ªán t·∫°i:');
        
        try {
            const tables = await prisma.$queryRaw`
                SELECT name FROM sqlite_master 
                WHERE type='table' 
                ORDER BY name;
            `;
            console.log('   üìã Tables found:');
            (tables as any[]).forEach(table => {
                console.log(`   - ${table.name}`);
            });
        } catch (error) {
            console.log(`   ‚ùå Error querying tables: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }

        // 6. Ki·ªÉm tra xem c√≥ GameStats table kh√¥ng
        console.log('\n6Ô∏è‚É£ Ki·ªÉm tra GameStats table:');
        
        try {
            const gameStatsCount = await prisma.gameStats.count();
            console.log(`   üìä GameStats records: ${gameStatsCount}`);
            
            if (gameStatsCount > 0) {
                const sampleStats = await prisma.gameStats.findMany({
                    take: 3,
                    orderBy: { totalLost: 'desc' }
                });
                
                console.log('   üìã Sample GameStats records:');
                sampleStats.forEach((stat, index) => {
                    console.log(`   ${index + 1}. User: ${stat.userId}, Game: ${stat.gameType}`);
                    console.log(`      üí∏ Total Lost: ${stat.totalLost.toLocaleString()}`);
                    console.log(`      üí∞ Total Bet: ${stat.totalBet.toLocaleString()}`);
                    console.log('');
                });
            }
        } catch (error) {
            console.log(`   ‚ùå GameStats table error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }

        // 7. Ki·ªÉm tra User table
        console.log('\n7Ô∏è‚É£ Ki·ªÉm tra User table:');
        
        try {
            const userCount = await prisma.user.count();
            console.log(`   üë• User records: ${userCount}`);
            
            if (userCount > 0) {
                const sampleUsers = await prisma.user.findMany({
                    take: 5,
                    orderBy: { username: 'asc' }
                });
                
                console.log('   üìã Sample Users:');
                sampleUsers.forEach((user, index) => {
                    console.log(`   ${index + 1}. ${user.username || user.userId} (${user.userId})`);
                });
            }
        } catch (error) {
            console.log(`   ‚ùå User table error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }

    } catch (error) {
        console.error('‚ùå Debug error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

debugTopLoseSource(); 