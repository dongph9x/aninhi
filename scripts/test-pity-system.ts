import { PrismaClient } from '@prisma/client';
import { PitySystemService } from '../src/utils/pity-system';
import { FishingService } from '../src/utils/fishing';

const prisma = new PrismaClient();

const testUserId = 'test-user-pity';
const testGuildId = 'test-guild-pity';

async function testPitySystem() {
    console.log('üé£ Testing Pity System\n');

    try {
        // T·∫°o test user v√† fishing data
        await prisma.user.upsert({
            where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 1000000n,
                fishBalance: 1000000n
            }
        });

        await prisma.fishingData.upsert({
            where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                totalFish: 0,
                totalEarnings: 0n,
                biggestFish: '',
                biggestValue: 0n,
                rarestFish: '',
                rarestRarity: '',
                fishingTime: 0,
                currentRod: 'basic',
                currentBait: 'basic',
                legendaryPityCount: 0,
                lastLegendaryCaught: null
            }
        });

        // Test 1: Ki·ªÉm tra pity info ban ƒë·∫ßu
        console.log('üìä Test 1: Pity info ban ƒë·∫ßu');
        const initialPityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
        console.log('Pity info:', initialPityInfo);
        console.log('');

        // Test 2: Ki·ªÉm tra pity multiplier ban ƒë·∫ßu
        console.log('üìà Test 2: Pity multiplier ban ƒë·∫ßu');
        const initialMultiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
        console.log('Pity multiplier:', initialMultiplier);
        console.log('');

        // Test 3: M√¥ ph·ªèng c√¢u c√° nhi·ªÅu l·∫ßn kh√¥ng ra c√° huy·ªÅn tho·∫°i
        console.log('üé£ Test 3: M√¥ ph·ªèng c√¢u c√° 400 l·∫ßn kh√¥ng ra c√° huy·ªÅn tho·∫°i');
        
        for (let i = 1; i <= 400; i++) {
            // C·∫≠p nh·∫≠t pity count th·ªß c√¥ng
            await prisma.fishingData.update({
                where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
                data: {
                    legendaryPityCount: i,
                    totalFish: { increment: 1 }
                }
            });

            if (i % 100 === 0) {
                const pityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
                const multiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
                console.log(`L·∫ßn ${i}: Pity count = ${pityInfo.legendaryPityCount}, Multiplier = ${multiplier.toFixed(2)}`);
            }
        }
        console.log('');

        // Test 4: Ki·ªÉm tra pity multiplier khi g·∫ßn ng∆∞·ª°ng
        console.log('üìà Test 4: Pity multiplier khi g·∫ßn ng∆∞·ª°ng');
        const nearThresholdPityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
        const nearThresholdMultiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
        console.log('Pity info khi g·∫ßn ng∆∞·ª°ng:', nearThresholdPityInfo);
        console.log('Multiplier khi g·∫ßn ng∆∞·ª°ng:', nearThresholdMultiplier);
        console.log('');

        // Test 5: Ki·ªÉm tra k√≠ch ho·∫°t pity system
        console.log('üéØ Test 5: Ki·ªÉm tra k√≠ch ho·∫°t pity system');
        const shouldActivate = await PitySystemService.shouldActivatePity(testUserId, testGuildId);
        console.log('Should activate pity:', shouldActivate);
        console.log('');

        // Test 6: M√¥ ph·ªèng c√¢u c√° huy·ªÅn tho·∫°i v√† reset pity
        console.log('üêã Test 6: M√¥ ph·ªèng c√¢u c√° huy·ªÅn tho·∫°i v√† reset pity');
        
        // T·∫°o m·ªôt con c√° huy·ªÅn tho·∫°i gi·∫£
        const legendaryFish = {
            name: 'C√° voi xanh',
            emoji: 'üê≥',
            rarity: 'legendary',
            minValue: 10000,
            maxValue: 20000,
            chance: 1,
            description: 'C√° voi xanh, sinh v·∫≠t l·ªõn nh·∫•t ƒë·∫°i d∆∞∆°ng'
        };

        // C·∫≠p nh·∫≠t pity count (reset v·ªÅ 0)
        await PitySystemService.updatePityCount(testUserId, testGuildId, legendaryFish);
        
        const afterLegendaryPityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
        console.log('Pity info sau khi c√¢u c√° huy·ªÅn tho·∫°i:', afterLegendaryPityInfo);
        console.log('');

        // Test 7: Ki·ªÉm tra pity multiplier sau khi reset
        console.log('üìà Test 7: Pity multiplier sau khi reset');
        const resetMultiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
        console.log('Multiplier sau khi reset:', resetMultiplier);
        console.log('');

        // Test 8: Test getRandomLegendaryFish
        console.log('üé≤ Test 8: Test getRandomLegendaryFish');
        const randomLegendary = PitySystemService.getRandomLegendaryFish();
        console.log('Random legendary fish:', randomLegendary);
        console.log('');

        console.log('‚úÖ T·∫•t c·∫£ test ho√†n th√†nh!');

    } catch (error) {
        console.error('‚ùå L·ªói trong test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y test
testPitySystem(); 