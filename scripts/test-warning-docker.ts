import prisma from '../src/utils/prisma';

async function testWarningRecord() {
  console.log('üîç Testing WarningRecord in Docker...\n');

  try {
    // Test t·∫°o warning record
    console.log('1. Creating test warning record...');
    const testWarning = await prisma.warningRecord.create({
      data: {
        id: 'test_warning_' + Date.now(),
        userId: 'test_user_docker',
        guildId: 'test_guild_docker',
        moderatorId: 'test_moderator_docker',
        warningLevel: 1,
        reason: 'Test warning in Docker',
        message: 'This is a test warning in Docker environment',
        isActive: true,
      }
    });
    console.log('‚úÖ Test warning created:', testWarning.id);

    // Test ƒë·ªçc warning record
    console.log('\n2. Reading test warning record...');
    const readWarning = await prisma.warningRecord.findUnique({
      where: { id: testWarning.id }
    });
    console.log('‚úÖ Warning record read:', readWarning?.reason);

    // Test ƒë·ªçc t·∫•t c·∫£ warnings
    console.log('\n3. Reading all warning records...');
    const allWarnings = await prisma.warningRecord.findMany({
      where: { userId: 'test_user_docker' }
    });
    console.log('‚úÖ Found warnings:', allWarnings.length);

    // X√≥a test warning
    console.log('\n4. Cleaning up test warning...');
    await prisma.warningRecord.delete({
      where: { id: testWarning.id }
    });
    console.log('‚úÖ Test warning cleaned up');

    console.log('\nüéâ WarningRecord test completed successfully!');
    console.log('üìä Table is working correctly in Docker environment');

  } catch (error) {
    console.error('‚ùå Error testing WarningRecord:', error);
    
    // N·∫øu table kh√¥ng t·ªìn t·∫°i, t·∫°o n√≥
    if (error.message.includes('WarningRecord') && error.message.includes('does not exist')) {
      console.log('\nüîß Creating WarningRecord table...');
      try {
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS WarningRecord (
            id TEXT NOT NULL PRIMARY KEY,
            userId TEXT NOT NULL,
            guildId TEXT NOT NULL,
            moderatorId TEXT NOT NULL,
            warningLevel INTEGER NOT NULL DEFAULT 1,
            reason TEXT NOT NULL,
            message TEXT NOT NULL,
            isActive BOOLEAN NOT NULL DEFAULT true,
            createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            expiresAt DATETIME
          )
        `;
        console.log('‚úÖ WarningRecord table created successfully');
        
        // T·∫°o indexes
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_userId_idx ON WarningRecord(userId)`;
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_guildId_idx ON WarningRecord(guildId)`;
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_moderatorId_idx ON WarningRecord(moderatorId)`;
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_warningLevel_idx ON WarningRecord(warningLevel)`;
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_isActive_idx ON WarningRecord(isActive)`;
        await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS WarningRecord_expiresAt_idx ON WarningRecord(expiresAt)`;
        console.log('‚úÖ All indexes created successfully');
        
        console.log('\nüîÑ Retrying test...');
        await testWarningRecord();
      } catch (createError) {
        console.error('‚ùå Error creating WarningRecord table:', createError);
      }
    }
  } finally {
    await prisma.$disconnect();
  }
}

testWarningRecord();