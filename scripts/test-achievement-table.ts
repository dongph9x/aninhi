/**
 * üèÜ Test Achievement Table
 * 
 * Script n√†y test b·∫£ng Achievement
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testAchievementTable() {
    console.log('üèÜ Test Achievement Table\n');

    try {
        // 1. Ki·ªÉm tra b·∫£ng c√≥ t·ªìn t·∫°i kh√¥ng
        console.log('1Ô∏è‚É£ Ki·ªÉm tra b·∫£ng Achievement:');
        const count = await prisma.achievement.count();
        console.log(`   ‚úÖ B·∫£ng Achievement t·ªìn t·∫°i, c√≥ ${count} records\n`);

        // 2. T·∫°o test achievement
        console.log('2Ô∏è‚É£ T·∫°o test achievement:');
        const testAchievement = await prisma.achievement.create({
            data: {
                name: "Test Achievement",
                link: "https://example.com/badge.png",
                target: "123456789",
                type: 0, // Top c√¢u c√°
                active: true
            }
        });
        console.log(`   ‚úÖ T·∫°o th√†nh c√¥ng: ${testAchievement.name} (ID: ${testAchievement.id})\n`);

        // 3. L·∫•y danh s√°ch achievements
        console.log('3Ô∏è‚É£ L·∫•y danh s√°ch achievements:');
        const achievements = await prisma.achievement.findMany({
            orderBy: { createdAt: 'desc' }
        });
        console.log(`   üìä T·ªïng s·ªë: ${achievements.length} achievements`);
        achievements.forEach((achievement, index) => {
            console.log(`   ${index + 1}. ${achievement.name} (Type: ${achievement.type}, Active: ${achievement.active})`);
        });
        console.log('');

        // 4. X√≥a test achievement
        console.log('4Ô∏è‚É£ X√≥a test achievement:');
        await prisma.achievement.delete({
            where: { id: testAchievement.id }
        });
        console.log('   ‚úÖ ƒê√£ x√≥a test achievement\n');

        // 5. Ki·ªÉm tra l·∫°i
        console.log('5Ô∏è‚É£ Ki·ªÉm tra sau khi x√≥a:');
        const finalCount = await prisma.achievement.count();
        console.log(`   üìä C√≤n l·∫°i: ${finalCount} achievements\n`);

        console.log('‚úÖ Test Achievement Table ho√†n t·∫•t!');
        console.log('üèÜ B·∫£ng Achievement ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!');

    } catch (error: any) {
        console.error('‚ùå L·ªói:', error);
        
        if (error.code === 'P2021') {
            console.log('üîß Gi·∫£i ph√°p:');
            console.log('   1. Ch·∫°y: npx prisma db push --force-reset');
            console.log('   2. Ho·∫∑c: npx prisma migrate deploy');
            console.log('   3. Ki·ªÉm tra l·∫°i schema.prisma');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y test
testAchievementTable().catch(console.error); 