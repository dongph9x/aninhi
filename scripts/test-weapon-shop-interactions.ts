/**
 * üß™ Test Weapon Shop Interactions
 * 
 * Script n√†y test c√°c interactions c·ªßa weapon shop
 */

import { PrismaClient } from '@prisma/client';
import { WeaponService } from '../src/utils/weapon';
import { EcommerceService } from '../src/utils/ecommerce-db';

const prisma = new PrismaClient();

async function testWeaponShopInteractions() {
    console.log('üß™ Test Weapon Shop Interactions\n');

    const testGuildId = "test-guild-123";
    const testUserId = "test-user-789";

    try {
        // 1. T·∫°o user test
        console.log('1Ô∏è‚É£ T·∫°o user test:');
        
        await prisma.user.upsert({
            where: {
                userId_guildId: {
                    userId: testUserId,
                    guildId: testGuildId
                }
            },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 50000n,
                fishBalance: 1000n
            }
        });

        console.log('   ‚úÖ User test ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 2. Test l·∫•y danh s√°ch v≈© kh√≠
        console.log('\n2Ô∏è‚É£ Test l·∫•y danh s√°ch v≈© kh√≠:');
        
        const weapons = WeaponService.getAllWeapons();
        console.log(`   üìä T·ªïng s·ªë v≈© kh√≠: ${weapons.length}`);
        
        weapons.forEach((weapon, index) => {
            console.log(`   ${index + 1}. ${weapon.name} - ${weapon.price.toLocaleString()} AniCoin`);
        });

        // 3. Test balance v√† kh·∫£ nƒÉng mua
        console.log('\n3Ô∏è‚É£ Test balance v√† kh·∫£ nƒÉng mua:');
        
        const balance = await EcommerceService.getBalance(testUserId, testGuildId);
        console.log(`   üí≥ Balance: ${balance.toLocaleString()} AniCoin`);
        
        weapons.forEach(weapon => {
            const canAfford = balance >= weapon.price;
            console.log(`   ${weapon.name}: ${canAfford ? '‚úÖ' : '‚ùå'} (${weapon.price.toLocaleString()} AniCoin)`);
        });

        // 4. Test mua v≈© kh√≠
        console.log('\n4Ô∏è‚É£ Test mua v≈© kh√≠:');
        
        const weaponToBuy = weapons[0]; // Iron Sword
        console.log(`   üõí Mua ${weaponToBuy.name}: ${weaponToBuy.price.toLocaleString()} AniCoin`);
        
        if (balance >= weaponToBuy.price) {
            await EcommerceService.subtractMoney(testUserId, testGuildId, Number(weaponToBuy.price), `Mua ${weaponToBuy.name}`);
            await WeaponService.addWeaponToInventory(testUserId, testGuildId, weaponToBuy.id, 1);
            console.log('   ‚úÖ Mua th√†nh c√¥ng');
        } else {
            console.log('   ‚ùå Kh√¥ng ƒë·ªß ti·ªÅn');
        }

        // 5. Test inventory sau khi mua
        console.log('\n5Ô∏è‚É£ Test inventory sau khi mua:');
        
        const inventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ trong inventory: ${inventory.length}`);
        
        inventory.forEach(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (weapon) {
                console.log(`   ‚Ä¢ ${weapon.name}: ${item.quantity}x (Trang b·ªã: ${item.isEquipped ? 'C√≥' : 'Kh√¥ng'})`);
            }
        });

        // 6. Test trang b·ªã v≈© kh√≠
        console.log('\n6Ô∏è‚É£ Test trang b·ªã v≈© kh√≠:');
        
        if (inventory.length > 0) {
            const equipSuccess = await WeaponService.equipWeapon(testUserId, testGuildId, weaponToBuy.id);
            console.log(`   ‚öîÔ∏è Trang b·ªã ${weaponToBuy.name}: ${equipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
        }

        // 7. Test l·∫•y v≈© kh√≠ ƒëang trang b·ªã
        console.log('\n7Ô∏è‚É£ Test l·∫•y v≈© kh√≠ ƒëang trang b·ªã:');
        
        const equippedWeapon = await WeaponService.getEquippedWeapon(testUserId, testGuildId);
        if (equippedWeapon) {
            const weapon = WeaponService.getWeaponById(equippedWeapon.weaponId);
            console.log(`   ‚öîÔ∏è V≈© kh√≠ ƒëang trang b·ªã: ${weapon?.name}`);
        } else {
            console.log('   ‚ùå Kh√¥ng c√≥ v≈© kh√≠ n√†o ƒëang trang b·ªã');
        }

        // 8. Test t√≠nh t·ªïng s·ª©c m·∫°nh
        console.log('\n8Ô∏è‚É£ Test t√≠nh t·ªïng s·ª©c m·∫°nh:');
        
        const stats = await WeaponService.getTotalWeaponStats(testUserId, testGuildId);
        console.log(`   ‚öîÔ∏è ATK: +${stats.power}`);
        console.log(`   üõ°Ô∏è DEF: +${stats.defense}`);
        console.log(`   üéØ Accuracy: +${stats.accuracy}%`);

        // 9. Test g·ª° trang b·ªã
        console.log('\n9Ô∏è‚É£ Test g·ª° trang b·ªã:');
        
        const unequipSuccess = await WeaponService.unequipWeapon(testUserId, testGuildId);
        console.log(`   üõ°Ô∏è G·ª° trang b·ªã: ${unequipSuccess ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);

        // 10. Test b√°n v≈© kh√≠
        console.log('\nüîü Test b√°n v≈© kh√≠:');
        
        const sellResult = await WeaponService.sellWeapon(testUserId, testGuildId, weaponToBuy.id, 1);
        if (sellResult.success) {
            console.log(`   üí∞ B√°n ${weaponToBuy.name} th√†nh c√¥ng: ${sellResult.sellPrice} AniCoin`);
        } else {
            console.log('   ‚ùå B√°n th·∫•t b·∫°i');
        }

        // 11. Ki·ªÉm tra inventory cu·ªëi c√πng
        console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Ki·ªÉm tra inventory cu·ªëi c√πng:');
        
        const finalInventory = await WeaponService.getUserWeaponInventory(testUserId, testGuildId);
        console.log(`   üì¶ S·ªë l∆∞·ª£ng v≈© kh√≠ c√≤n l·∫°i: ${finalInventory.length}`);

        // 12. D·ªçn d·∫πp d·ªØ li·ªáu test
        console.log('\n1Ô∏è‚É£2Ô∏è‚É£ D·ªçn d·∫πp d·ªØ li·ªáu test:');
        
        await prisma.userWeapon.deleteMany({
            where: {
                userId: testUserId,
                guildId: testGuildId
            }
        });
        
        console.log('   üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu test');

        console.log('\n‚úÖ Test Weapon Shop Interactions ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå Test error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testWeaponShopInteractions(); 