import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkFishTableStructure() {
  console.log('üîç Ki·ªÉm Tra C·∫•u Tr√∫c B·∫£ng Fish V√† C√° Gen 2\n');

  try {
    // 1. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng Fish
    console.log('1Ô∏è‚É£ C·∫•u Tr√∫c B·∫£ng Fish:');
    console.log('   üìã B·∫£ng: Fish');
    console.log('   üìã Tr∆∞·ªùng generation: Int (m·∫∑c ƒë·ªãnh = 1)');
    console.log('   üìã C√° gen 1: T·ª´ c√¢u c√° (fishing)');
    console.log('   üìã C√° gen 2+: T·ª´ lai t·∫°o (breeding)');
    console.log('   üìã M·ªëi quan h·ªá: Fish -> FishInventoryItem -> FishInventory -> User');

    // 2. Ki·ªÉm tra t·∫•t c·∫£ c√° hi·ªán t·∫°i
    console.log('\n2Ô∏è‚É£ T·∫•t C·∫£ C√° Trong Database:');
    
    const allFish = await prisma.fish.findMany({
      select: {
        id: true,
        userId: true,
        guildId: true,
        species: true,
        generation: true,
        level: true,
        rarity: true,
        value: true,
        status: true,
        createdAt: true
      },
      orderBy: [
        { generation: 'asc' },
        { createdAt: 'desc' }
      ]
    });

    if (allFish.length === 0) {
      console.log('   ‚úÖ Kh√¥ng c√≥ c√° n√†o trong database');
    } else {
      console.log(`   üìä T·ªïng c·ªông: ${allFish.length} con c√°`);
      
      // Nh√≥m theo generation
      const fishByGeneration = allFish.reduce((acc, fish) => {
        if (!acc[fish.generation]) {
          acc[fish.generation] = [];
        }
        acc[fish.generation].push(fish);
        return acc;
      }, {} as Record<number, any[]>);

      Object.entries(fishByGeneration).forEach(([gen, fishes]) => {
        console.log(`\n   üêü Gen ${gen} (${fishes.length} con):`);
        fishes.forEach((fish, index) => {
          console.log(`     ${index + 1}. ${fish.species} - Level ${fish.level} - ${fish.rarity} - ${fish.value.toLocaleString()} coins - ${fish.status}`);
          console.log(`        User: ${fish.userId} | Guild: ${fish.guildId} | ID: ${fish.id}`);
        });
      });
    }

    // 3. Ki·ªÉm tra m·ªëi quan h·ªá v·ªõi FishInventory
    console.log('\n3Ô∏è‚É£ M·ªëi Quan H·ªá V·ªõi FishInventory:');
    
    const fishWithInventory = await prisma.fish.findMany({
      include: {
        inventoryItem: {
          include: {
            fishInventory: {
              include: {
                user: {
                  select: {
                    userId: true,
                    guildId: true,
                    balance: true
                  }
                }
              }
            }
          }
        }
      },
      orderBy: [
        { generation: 'asc' },
        { createdAt: 'desc' }
      ]
    });

    if (fishWithInventory.length === 0) {
      console.log('   ‚úÖ Kh√¥ng c√≥ c√° n√†o trong inventory');
    } else {
      console.log(`   üìä C√° trong inventory: ${fishWithInventory.length} con`);
      
      fishWithInventory.forEach((fish, index) => {
        console.log(`\n   ${index + 1}. ${fish.species} (Gen ${fish.generation})`);
        console.log(`      üì¶ Trong inventory: ${fish.inventoryItem ? 'C√≥' : 'Kh√¥ng'}`);
        if (fish.inventoryItem) {
          console.log(`      üë§ User: ${fish.inventoryItem.fishInventory.user.userId}`);
          console.log(`      üè† Guild: ${fish.inventoryItem.fishInventory.user.guildId}`);
          console.log(`      üí∞ Balance: ${fish.inventoryItem.fishInventory.user.balance.toLocaleString()} coins`);
        }
      });
    }

    // 4. Ki·ªÉm tra m·ªëi quan h·ªá v·ªõi BattleFishInventory
    console.log('\n4Ô∏è‚É£ M·ªëi Quan H·ªá V·ªõi BattleFishInventory:');
    
    const fishWithBattleInventory = await prisma.fish.findMany({
      include: {
        battleInventoryItem: {
          include: {
            battleFishInventory: {
              include: {
                user: {
                  select: {
                    userId: true,
                    guildId: true
                  }
                }
              }
            }
          }
        }
      },
      orderBy: [
        { generation: 'asc' },
        { createdAt: 'desc' }
      ]
    });

    const battleFish = fishWithBattleInventory.filter(fish => fish.battleInventoryItem);
    
    if (battleFish.length === 0) {
      console.log('   ‚úÖ Kh√¥ng c√≥ c√° n√†o trong battle inventory');
    } else {
      console.log(`   üìä C√° trong battle inventory: ${battleFish.length} con`);
      
      battleFish.forEach((fish, index) => {
        console.log(`\n   ${index + 1}. ${fish.species} (Gen ${fish.generation})`);
        console.log(`      ‚öîÔ∏è Trong battle inventory: C√≥`);
        console.log(`      üë§ User: ${fish.battleInventoryItem!.battleFishInventory.user.userId}`);
        console.log(`      üè† Guild: ${fish.battleInventoryItem!.battleFishInventory.user.guildId}`);
      });
    }

    // 5. Ki·ªÉm tra m·ªëi quan h·ªá v·ªõi FishMarket
    console.log('\n5Ô∏è‚É£ M·ªëi Quan H·ªá V·ªõi FishMarket:');
    
    const fishInMarket = await prisma.fish.findMany({
      include: {
        marketListing: true
      },
      where: {
        marketListing: {
          isNot: null
        }
      },
      orderBy: [
        { generation: 'asc' },
        { createdAt: 'desc' }
      ]
    });

    if (fishInMarket.length === 0) {
      console.log('   ‚úÖ Kh√¥ng c√≥ c√° n√†o ƒëang b√°n tr√™n market');
    } else {
      console.log(`   üìä C√° ƒëang b√°n tr√™n market: ${fishInMarket.length} con`);
      
      fishInMarket.forEach((fish, index) => {
        console.log(`\n   ${index + 1}. ${fish.species} (Gen ${fish.generation})`);
        console.log(`      üí∞ Gi√°: ${fish.marketListing!.price.toLocaleString()} coins`);
        console.log(`      üïí H·∫øt h·∫°n: ${fish.marketListing!.expiresAt.toLocaleString()}`);
      });
    }

    // 6. T√≥m t·∫Øt v·ªÅ c√° gen 2
    console.log('\n6Ô∏è‚É£ T√≥m T·∫Øt V·ªÅ C√° Gen 2:');
    console.log('   üìã B·∫£ng ch√≠nh: Fish');
    console.log('   üìã Tr∆∞·ªùng generation = 2');
    console.log('   üìã ƒê∆∞·ª£c t·∫°o t·ª´: Breeding (lai t·∫°o)');
    console.log('   üìã L∆∞u tr·ªØ: C√πng b·∫£ng v·ªõi c√° gen 1');
    console.log('   üìã M·ªëi quan h·ªá:');
    console.log('      - Fish -> FishInventoryItem -> FishInventory -> User');
    console.log('      - Fish -> BattleFishInventoryItem -> BattleFishInventory -> User');
    console.log('      - Fish -> FishMarket (n·∫øu ƒëang b√°n)');
    console.log('   üìã D·ªØ li·ªáu b·ªï sung:');
    console.log('      - BreedingHistory: L∆∞u l·ªãch s·ª≠ lai t·∫°o');
    console.log('      - stats: JSON string ch·ª©a stats c·ªßa c√°');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra c·∫•u tr√∫c b·∫£ng Fish:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
checkFishTableStructure(); 