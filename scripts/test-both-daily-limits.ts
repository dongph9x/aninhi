import { FishBattleService } from '../src/utils/fish-battle';
import { FishFeedService } from '../src/utils/fish-feed';
import prisma from '../src/utils/prisma';

async function testBothDailyLimits() {
  console.log('üß™ Testing Both Daily Limit Systems (Battle + Feed)...\n');

  const testUserId = 'test-user-both-limits';
  const testGuildId = 'test-guild-both-limits';

  try {
    // 1. T·∫°o user test
    console.log('1Ô∏è‚É£ Creating test user...');
    await prisma.user.upsert({
      where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
      update: {},
      create: {
        userId: testUserId,
        guildId: testGuildId,
        balance: BigInt(0),
        fishBalance: BigInt(0),
        dailyStreak: 0,
        dailyBattleCount: 0,
        lastBattleReset: new Date(),
        dailyFeedCount: 0,
        lastFeedReset: new Date()
      }
    });
    console.log('‚úÖ Test user created\n');

    // 2. Test daily battle limit
    console.log('2Ô∏è‚É£ Testing Daily Battle Limit...');
    const battleCheck = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    console.log('Battle limit check:', battleCheck);
    console.log('‚úÖ Battle limit test completed\n');

    // 3. Test daily feed limit
    console.log('3Ô∏è‚É£ Testing Daily Feed Limit...');
    const feedCheck = await FishFeedService.checkAndResetDailyFeedCount(testUserId, testGuildId);
    console.log('Feed limit check:', feedCheck);
    console.log('‚úÖ Feed limit test completed\n');

    // 4. Test tƒÉng c·∫£ hai limits
    console.log('4Ô∏è‚É£ Testing incrementing both limits...');
    await FishBattleService.incrementDailyBattleCount(testUserId, testGuildId);
    await FishFeedService.incrementDailyFeedCount(testUserId, testGuildId);
    
    const newBattleCheck = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    const newFeedCheck = await FishFeedService.checkAndResetDailyFeedCount(testUserId, testGuildId);
    
    console.log('After incrementing:');
    console.log('  Battle:', newBattleCheck);
    console.log('  Feed:', newFeedCheck);
    console.log('‚úÖ Increment test completed\n');

    // 5. Test ƒë·∫°t gi·ªõi h·∫°n c·∫£ hai
    console.log('5Ô∏è‚É£ Testing reaching both limits...');
    
    // TƒÉng battle count ƒë·∫øn gi·ªõi h·∫°n
    for (let i = 2; i <= 20; i++) {
      await FishBattleService.incrementDailyBattleCount(testUserId, testGuildId);
    }
    
    // TƒÉng feed count ƒë·∫øn gi·ªõi h·∫°n
    for (let i = 2; i <= 20; i++) {
      await FishFeedService.incrementDailyFeedCount(testUserId, testGuildId);
    }
    
    const maxBattleCheck = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    const maxFeedCheck = await FishFeedService.checkAndResetDailyFeedCount(testUserId, testGuildId);
    
    console.log('At maximum limits:');
    console.log('  Battle:', maxBattleCheck);
    console.log('  Feed:', maxFeedCheck);
    console.log('‚úÖ Maximum limits test completed\n');

    // 6. Test reset c·∫£ hai cho ng√†y m·ªõi
    console.log('6Ô∏è‚É£ Testing reset for new day...');
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    await prisma.user.update({
      where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
      data: { 
        lastBattleReset: yesterday,
        lastFeedReset: yesterday
      }
    });

    const resetBattleCheck = await FishBattleService.checkAndResetDailyBattleCount(testUserId, testGuildId);
    const resetFeedCheck = await FishFeedService.checkAndResetDailyFeedCount(testUserId, testGuildId);
    
    console.log('After reset for new day:');
    console.log('  Battle:', resetBattleCheck);
    console.log('  Feed:', resetFeedCheck);
    console.log('‚úÖ Reset test completed\n');

    // 7. Ki·ªÉm tra database state cu·ªëi c√πng
    console.log('7Ô∏è‚É£ Checking final database state...');
    const finalUser = await prisma.user.findUnique({
      where: { userId_guildId: { userId: testUserId, guildId: testGuildId } }
    });
    console.log('Final user state:', {
      dailyBattleCount: finalUser?.dailyBattleCount,
      lastBattleReset: finalUser?.lastBattleReset,
      dailyFeedCount: finalUser?.dailyFeedCount,
      lastFeedReset: finalUser?.lastFeedReset
    });
    console.log('‚úÖ Database state check completed\n');

    // 8. So s√°nh hai h·ªá th·ªëng
    console.log('8Ô∏è‚É£ Comparing both systems...');
    console.log('Daily Battle Limit:', FishBattleService['DAILY_BATTLE_LIMIT']);
    console.log('Daily Feed Limit:', FishFeedService.getDailyFeedLimit());
    console.log('‚úÖ Comparison completed\n');

    console.log('üéâ All tests completed successfully!');
    console.log('\nüìä Summary:');
    console.log('‚úÖ Daily Battle Limit: 20 l·∫ßn/ng√†y');
    console.log('‚úÖ Daily Feed Limit: 20 l·∫ßn/ng√†y');
    console.log('‚úÖ Both systems work independently');
    console.log('‚úÖ Both systems reset at 00:00 next day');
    console.log('‚úÖ Both systems have admin exceptions');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    // Cleanup
    console.log('üßπ Cleaning up test data...');
    await prisma.user.deleteMany({
      where: { userId: testUserId, guildId: testGuildId }
    });
    console.log('‚úÖ Cleanup completed');
    
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testBothDailyLimits(); 