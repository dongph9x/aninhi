/**
 * üê≥ Test Achievement in Docker
 * 
 * Script n√†y test Achievement system trong Docker
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testDockerAchievement() {
    console.log('üê≥ Test Achievement in Docker\n');

    try {
        // 1. Ki·ªÉm tra k·∫øt n·ªëi database
        console.log('1Ô∏è‚É£ Ki·ªÉm tra k·∫øt n·ªëi database:');
        await prisma.$connect();
        console.log('   ‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng\n');

        // 2. Ki·ªÉm tra b·∫£ng Achievement
        console.log('2Ô∏è‚É£ Ki·ªÉm tra b·∫£ng Achievement:');
        const count = await prisma.achievement.count();
        console.log(`   ‚úÖ B·∫£ng Achievement t·ªìn t·∫°i, c√≥ ${count} records\n`);

        // 3. T·∫°o test achievement
        console.log('3Ô∏è‚É£ T·∫°o test achievement:');
        const testAchievement = await prisma.achievement.create({
            data: {
                name: "Docker Test Achievement",
                link: "https://example.com/docker-badge.png",
                target: "987654321",
                type: 1, // Top FishCoin
                active: true
            }
        });
        console.log(`   ‚úÖ T·∫°o th√†nh c√¥ng: ${testAchievement.name}`);
        console.log(`   üìä ID: ${testAchievement.id}`);
        console.log(`   üéØ Target: ${testAchievement.target}`);
        console.log(`   üìä Type: ${testAchievement.type}`);
        console.log(`   üîó Link: ${testAchievement.link}\n`);

        // 4. L·∫•y danh s√°ch achievements
        console.log('4Ô∏è‚É£ L·∫•y danh s√°ch achievements:');
        const achievements = await prisma.achievement.findMany({
            orderBy: { createdAt: 'desc' }
        });
        console.log(`   üìä T·ªïng s·ªë: ${achievements.length} achievements`);
        achievements.forEach((achievement, index) => {
            const typeNames = ['Top c√¢u c√°', 'Top FishCoin', 'Top FishBattle', 'Top Custom'];
            const typeName = typeNames[achievement.type] || 'Unknown';
            console.log(`   ${index + 1}. ${achievement.name} (${typeName})`);
        });
        console.log('');

        // 5. Test update achievement
        console.log('5Ô∏è‚É£ Test update achievement:');
        const updatedAchievement = await prisma.achievement.update({
            where: { id: testAchievement.id },
            data: { active: false }
        });
        console.log(`   ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: active = ${updatedAchievement.active}\n`);

        // 6. X√≥a test achievement
        console.log('6Ô∏è‚É£ X√≥a test achievement:');
        await prisma.achievement.delete({
            where: { id: testAchievement.id }
        });
        console.log('   ‚úÖ ƒê√£ x√≥a test achievement\n');

        // 7. Ki·ªÉm tra cu·ªëi c√πng
        console.log('7Ô∏è‚É£ Ki·ªÉm tra cu·ªëi c√πng:');
        const finalCount = await prisma.achievement.count();
        console.log(`   üìä C√≤n l·∫°i: ${finalCount} achievements\n`);

        console.log('‚úÖ Test Achievement in Docker ho√†n t·∫•t!');
        console.log('üèÜ Achievement system ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng trong Docker!');

    } catch (error: any) {
        console.error('‚ùå L·ªói:', error);
        
        if (error.code === 'P2021') {
            console.log('üîß Gi·∫£i ph√°p:');
            console.log('   1. Ch·∫°y: ./scripts/deploy-docker-database.sh');
            console.log('   2. Ho·∫∑c: docker-compose --profile init up database-init');
            console.log('   3. Ki·ªÉm tra logs: docker-compose logs database-init');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y test
testDockerAchievement().catch(console.error); 