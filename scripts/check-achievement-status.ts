/**
 * üèÜ Check Achievement Status
 * 
 * Script n√†y ki·ªÉm tra tr·∫°ng th√°i Achievement system
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkAchievementStatus() {
    console.log('üèÜ Check Achievement Status\n');

    try {
        // 1. Ki·ªÉm tra k·∫øt n·ªëi database
        console.log('1Ô∏è‚É£ Ki·ªÉm tra k·∫øt n·ªëi database:');
        await prisma.$connect();
        console.log('   ‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng\n');

        // 2. Ki·ªÉm tra b·∫£ng Achievement
        console.log('2Ô∏è‚É£ Ki·ªÉm tra b·∫£ng Achievement:');
        const count = await prisma.achievement.count();
        console.log(`   ‚úÖ B·∫£ng Achievement t·ªìn t·∫°i, c√≥ ${count} records\n`);

        // 3. L·∫•y danh s√°ch achievements
        let achievements: any[] = [];
        if (count > 0) {
            console.log('3Ô∏è‚É£ Danh s√°ch achievements:');
            achievements = await prisma.achievement.findMany({
                orderBy: { createdAt: 'desc' }
            });
            
            const typeNames = ['Top c√¢u c√°', 'Top FishCoin', 'Top FishBattle', 'Top Custom'];
            
            achievements.forEach((achievement, index) => {
                const typeName = typeNames[achievement.type] || 'Unknown';
                const status = achievement.active ? '‚úÖ Active' : '‚ùå Inactive';
                console.log(`   ${index + 1}. ${achievement.name}`);
                console.log(`      üìä Type: ${typeName} (${achievement.type})`);
                console.log(`      üë§ Target: ${achievement.target}`);
                console.log(`      üîó Link: ${achievement.link}`);
                console.log(`      üìÖ Created: ${achievement.createdAt.toLocaleString()}`);
                console.log(`      üéØ Status: ${status}`);
                console.log('');
            });
        }

        // 4. Ki·ªÉm tra c√°c b·∫£ng li√™n quan
        console.log('4Ô∏è‚É£ Ki·ªÉm tra c√°c b·∫£ng li√™n quan:');
        
        try {
            const userCount = await prisma.user.count();
            console.log(`   ‚úÖ B·∫£ng User: ${userCount} users`);
        } catch (error: any) {
            console.log(`   ‚ùå B·∫£ng User: ${error.message}`);
        }

        try {
            const systemSettingsCount = await prisma.systemSettings.count();
            console.log(`   ‚úÖ B·∫£ng SystemSettings: ${systemSettingsCount} records`);
        } catch (error: any) {
            console.log(`   ‚ùå B·∫£ng SystemSettings: ${error.message}`);
        }

        console.log('');

        // 5. T√≥m t·∫Øt
        console.log('5Ô∏è‚É£ T√≥m t·∫Øt:');
        console.log(`   üèÜ Achievement system: ‚úÖ Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`);
        console.log(`   üìä Total achievements: ${count}`);
        console.log(`   üéØ Active achievements: ${achievements?.filter(a => a.active).length || 0}`);
        console.log(`   üìÖ Last updated: ${achievements?.[0]?.updatedAt.toLocaleString() || 'N/A'}`);

        console.log('\n‚úÖ Achievement system ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!');

    } catch (error: any) {
        console.error('‚ùå L·ªói:', error);
        
        if (error.code === 'P2021') {
            console.log('üîß Gi·∫£i ph√°p:');
            console.log('   1. Ch·∫°y: docker compose --profile init up database-init');
            console.log('   2. Ho·∫∑c: npx prisma db push --force-reset');
            console.log('   3. Restart bot: docker compose restart aninhi-bot');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y check
checkAchievementStatus().catch(console.error); 