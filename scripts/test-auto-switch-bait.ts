/**
 * ü™± Test Auto-Switch Bait Feature
 * 
 * Script n√†y test t√≠nh nƒÉng t·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c khi m·ªìi hi·ªán t·∫°i h·∫øt
 */

import { PrismaClient } from '@prisma/client';
import { FishingService, BAITS } from '../src/utils/fishing';
import { fishCoinDB } from '../src/utils/fish-coin';

const prisma = new PrismaClient();

async function testAutoSwitchBait() {
    console.log('ü™± Test Auto-Switch Bait Feature\n');

    try {
        // 1. T·∫°o test user v·ªõi nhi·ªÅu lo·∫°i m·ªìi
        console.log('1Ô∏è‚É£ Creating test user with multiple baits...');
        const testUserId = 'test-auto-switch-bait-user';
        const testGuildId = '1005280612845891615';
        
        // Th√™m FishCoin cho test
        await fishCoinDB.addFishCoin(testUserId, testGuildId, 10000, 'Test auto-switch bait');
        
        // Mua nhi·ªÅu lo·∫°i m·ªìi
        console.log('   üõí Buying multiple baits...');
        
        // Mua m·ªìi basic (10 FishCoin)
        await FishingService.buyBait(testUserId, testGuildId, 'basic', 5);
        console.log('   ‚úÖ Bought 5 basic baits');
        
        // Mua m·ªìi good (50 FishCoin)
        await FishingService.buyBait(testUserId, testGuildId, 'good', 3);
        console.log('   ‚úÖ Bought 3 good baits');
        
        // Mua m·ªìi premium (200 FishCoin)
        await FishingService.buyBait(testUserId, testGuildId, 'premium', 2);
        console.log('   ‚úÖ Bought 2 premium baits');
        
        // Mua m·ªìi divine (1000 FishCoin)
        await FishingService.buyBait(testUserId, testGuildId, 'divine', 1);
        console.log('   ‚úÖ Bought 1 divine bait');

        // 2. Ki·ªÉm tra inventory ban ƒë·∫ßu
        console.log('\n2Ô∏è‚É£ Checking initial bait inventory...');
        const initialFishingData = await FishingService.getFishingData(testUserId, testGuildId);
        
        console.log('   üìä Current bait inventory:');
        initialFishingData.baits.forEach((bait: any) => {
            const baitData = BAITS[bait.baitType];
            console.log(`   ${baitData.emoji} ${baitData.name}: ${bait.quantity} c√°i`);
        });
        
        console.log(`   üéØ Current bait: ${initialFishingData.currentBait || 'None'}`);

        // 3. Test auto-switch logic
        console.log('\n3Ô∏è‚É£ Testing auto-switch logic...');
        
        // Test scenario 1: H·∫øt m·ªìi hi·ªán t·∫°i, c√≥ m·ªìi kh√°c
        console.log('\n   üìã Scenario 1: Current bait runs out, other baits available');
        
        // Set m·ªìi basic l√†m m·ªìi hi·ªán t·∫°i
        await FishingService.setCurrentBait(testUserId, testGuildId, 'basic');
        console.log('   üéØ Set basic bait as current');
        
        // Gi·∫£ l·∫≠p h·∫øt m·ªìi basic b·∫±ng c√°ch x√≥a quantity
        await prisma.fishingBait.updateMany({
            where: {
                fishingDataId: initialFishingData.id,
                baitType: 'basic'
            },
            data: {
                quantity: 0
            }
        });
        console.log('   üóëÔ∏è  Emptied basic bait quantity');
        
        // Test auto-switch
        const autoSwitchResult = await FishingService.autoSwitchBait(testUserId, testGuildId, 'basic');
        console.log('   üîÑ Auto-switch result:', autoSwitchResult);
        
        if (autoSwitchResult.success) {
            console.log(`   ‚úÖ Successfully switched to: ${autoSwitchResult.baitName}`);
            console.log(`   üìä Remaining quantity: ${autoSwitchResult.remainingQuantity}`);
        } else {
            console.log(`   ‚ùå Auto-switch failed: ${autoSwitchResult.message}`);
        }

        // 4. Test priority system
        console.log('\n4Ô∏è‚É£ Testing bait priority system...');
        
        // Ki·ªÉm tra priority: divine > premium > good > basic
        console.log('   üèÜ Bait Priority Order:');
        console.log('      1. üßú‚Äç‚ôÄÔ∏è Divine (highest)');
        console.log('      2. ü¶Ä Premium');
        console.log('      3. ü¶ê Good');
        console.log('      4. ü™± Basic (lowest)');
        
        // Test v·ªõi t·∫•t c·∫£ m·ªìi c√≥ s·∫µn
        const fishingDataAfterSwitch = await FishingService.getFishingData(testUserId, testGuildId);
        console.log(`   üéØ Current bait after auto-switch: ${fishingDataAfterSwitch.currentBait}`);
        
        const currentBaitData = BAITS[fishingDataAfterSwitch.currentBait];
        console.log(`   üìã Selected bait: ${currentBaitData.emoji} ${currentBaitData.name}`);

        // 5. Test fishing with auto-switch
        console.log('\n5Ô∏è‚É£ Testing fishing with auto-switch...');
        
        // Mua c·∫ßn c√¢u n·∫øu ch∆∞a c√≥
        if (!fishingDataAfterSwitch.currentRod || fishingDataAfterSwitch.currentRod === "") {
            await FishingService.buyRod(testUserId, testGuildId, 'basic');
            console.log('   üé£ Bought basic rod');
        }
        
        // Gi·∫£ l·∫≠p c√¢u c√° v√† h·∫øt m·ªìi
        console.log('   üé£ Simulating fishing...');
        
        // Gi·∫£m s·ªë l∆∞·ª£ng m·ªìi hi·ªán t·∫°i xu·ªëng 1
        const currentBait = fishingDataAfterSwitch.baits.find((b: any) => b.baitType === fishingDataAfterSwitch.currentBait);
        if (currentBait) {
            await prisma.fishingBait.update({
                where: { id: currentBait.id },
                data: { quantity: 1 }
            });
            console.log(`   üìä Set ${currentBaitData.name} quantity to 1`);
        }
        
        // Test c√¢u c√° (s·∫Ω trigger auto-switch)
        try {
            const fishResult = await FishingService.fish(testUserId, testGuildId, false);
            console.log('   üêü Fishing result:', fishResult);
            
            // Ki·ªÉm tra m·ªìi sau khi c√¢u
            const fishingDataAfterFishing = await FishingService.getFishingData(testUserId, testGuildId);
            const newBait = fishingDataAfterFishing.baits.find((b: any) => b.baitType === fishingDataAfterFishing.currentBait);
            const newBaitData = BAITS[fishingDataAfterFishing.currentBait];
            
            console.log(`   üéØ New current bait: ${newBaitData.emoji} ${newBaitData.name}`);
            console.log(`   üìä New bait quantity: ${newBait?.quantity || 0}`);
            
        } catch (error) {
            console.log('   ‚ùå Fishing failed:', error.message);
        }

        // 6. Test edge cases
        console.log('\n6Ô∏è‚É£ Testing edge cases...');
        
        // Test case: Kh√¥ng c√≥ m·ªìi n√†o kh√°c
        console.log('\n   üìã Edge Case: No other baits available');
        
        // X√≥a t·∫•t c·∫£ m·ªìi kh√°c
        await prisma.fishingBait.updateMany({
            where: {
                fishingDataId: initialFishingData.id,
                baitType: { not: fishingDataAfterSwitch.currentBait }
            },
            data: {
                quantity: 0
            }
        });
        console.log('   üóëÔ∏è  Emptied all other baits');
        
        // Test auto-switch khi kh√¥ng c√≥ m·ªìi n√†o kh√°c
        const edgeCaseResult = await FishingService.autoSwitchBait(testUserId, testGuildId, fishingDataAfterSwitch.currentBait);
        console.log('   üîÑ Edge case result:', edgeCaseResult);
        
        if (!edgeCaseResult.success) {
            console.log('   ‚úÖ Correctly handled no available baits');
        }

        console.log('\n‚úÖ Auto-switch bait test completed!');
        console.log('\nüéØ Key Features:');
        console.log('   ‚úÖ Automatic bait switching when current bait runs out');
        console.log('   ‚úÖ Priority system: divine > premium > good > basic');
        console.log('   ‚úÖ Clear notification when auto-switching');
        console.log('   ‚úÖ Graceful handling when no other baits available');
        console.log('   ‚úÖ Integration with fishing system');
        
        console.log('\nüìã Test Commands:');
        console.log('   n.fishing');
        console.log('   n.fishing inventory');
        console.log('   n.fishing setbait <bait_type>');

    } catch (error) {
        console.error('‚ùå Error testing auto-switch bait:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y test
testAutoSwitchBait().catch(console.error); 