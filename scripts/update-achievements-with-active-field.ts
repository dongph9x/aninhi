import prisma from '../src/utils/prisma';
import { AchievementService } from '../src/utils/achievement';

async function updateAchievementsWithActiveField() {
    console.log('üîÑ Updating Achievements with Active Field...\n');

    try {
        // 1. Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
        const totalAchievements = await prisma.achievement.count();
        console.log(`üìä Total achievements in database: ${totalAchievements}`);

        if (totalAchievements === 0) {
            console.log('‚úÖ No achievements to update!');
            return;
        }

        // 2. L·∫•y t·∫•t c·∫£ achievements
        const achievements = await prisma.achievement.findMany({
            orderBy: { createdAt: 'desc' }
        });

        console.log('\nüìã Current achievements:');
        achievements.forEach((achievement, index) => {
            const typeNames = ['Top c√¢u c√°', 'Top FishCoin', 'Top FishBattle', 'Top Custom'];
            const typeName = typeNames[achievement.type] || 'Unknown';
            console.log(`   ${index + 1}. ${achievement.name} (${typeName}) - User: ${achievement.target} - Active: ${achievement.active}`);
        });

        // 3. C·∫≠p nh·∫≠t active field cho t·ª´ng user
        const userGroups = new Map<string, any[]>();
        
        // Nh√≥m achievements theo user
        achievements.forEach(achievement => {
            if (!userGroups.has(achievement.target)) {
                userGroups.set(achievement.target, []);
            }
            userGroups.get(achievement.target)!.push(achievement);
        });

        console.log(`\nüë• Found ${userGroups.size} users with achievements`);

        // 4. C·∫≠p nh·∫≠t active field cho t·ª´ng user
        let updatedCount = 0;
        
        for (const [userId, userAchievements] of userGroups) {
            console.log(`\nüîÑ Processing user ${userId}:`);
            console.log(`   üìä Has ${userAchievements.length} achievements`);
            
            // S·∫Øp x·∫øp theo priority (type th·∫•p nh·∫•t = priority cao nh·∫•t)
            const sortedAchievements = userAchievements.sort((a, b) => {
                if (a.type !== b.type) {
                    return a.type - b.type; // Type th·∫•p nh·∫•t tr∆∞·ªõc
                }
                return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(); // C≈© nh·∫•t tr∆∞·ªõc
            });

            // Deactivate t·∫•t c·∫£ achievements c·ªßa user n√†y
            await prisma.achievement.updateMany({
                where: { target: userId },
                data: { active: false }
            });

            // Active achievement c√≥ priority cao nh·∫•t
            if (sortedAchievements.length > 0) {
                const highestPriorityAchievement = sortedAchievements[0];
                await prisma.achievement.update({
                    where: { id: highestPriorityAchievement.id },
                    data: { active: true }
                });

                const typeNames = ['Top c√¢u c√°', 'Top FishCoin', 'Top FishBattle', 'Top Custom'];
                const typeName = typeNames[highestPriorityAchievement.type] || 'Unknown';
                
                console.log(`   ‚úÖ Activated: ${highestPriorityAchievement.name} (${typeName})`);
                updatedCount++;
            }
        }

        // 5. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\nüìä Final Results:');
        const finalAchievements = await prisma.achievement.findMany({
            orderBy: { createdAt: 'desc' }
        });

        const activeCount = finalAchievements.filter(a => a.active).length;
        const inactiveCount = finalAchievements.filter(a => !a.active).length;

        console.log(`   ‚úÖ Active achievements: ${activeCount}`);
        console.log(`   ‚ùå Inactive achievements: ${inactiveCount}`);
        console.log(`   üìä Total updated: ${updatedCount} users`);

        // 6. Test AchievementService methods
        console.log('\nüß™ Testing AchievementService methods:');
        
        for (const [userId] of userGroups) {
            const activeAchievements = await AchievementService.getActiveAchievements(userId);
            const hasActive = await AchievementService.hasActiveAchievement(userId);
            const highestPriority = await AchievementService.getHighestPriorityAchievement(userId);
            
            console.log(`   User ${userId}:`);
            console.log(`     Active achievements: ${activeAchievements.length}`);
            console.log(`     Has active: ${hasActive}`);
            console.log(`     Highest priority: ${highestPriority ? highestPriority.name : 'None'}`);
        }

        console.log('\n‚úÖ Achievements update completed successfully!');

    } catch (error) {
        console.error('‚ùå Error updating achievements:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

updateAchievementsWithActiveField().catch(console.error); 