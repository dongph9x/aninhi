import { PrismaClient } from '@prisma/client';
import { PitySystemService } from '../src/utils/pity-system';

const prisma = new PrismaClient();

const testUserId = 'demo-user-pity';
const testGuildId = 'demo-guild-pity';

async function demoPitySystem() {
    console.log('üé£ Demo Pity System\n');

    try {
        // T·∫°o demo user v√† fishing data
        console.log('üìù T·∫°o demo data...');
        await prisma.user.upsert({
            where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                balance: 1000000n,
                fishBalance: 1000000n
            }
        });

        await prisma.fishingData.upsert({
            where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
            update: {},
            create: {
                userId: testUserId,
                guildId: testGuildId,
                totalFish: 0,
                totalEarnings: 0n,
                biggestFish: '',
                biggestValue: 0n,
                rarestFish: '',
                rarestRarity: '',
                fishingTime: 0,
                currentRod: 'basic',
                currentBait: 'basic',
                legendaryPityCount: 0,
                lastLegendaryCaught: null
            }
        });
        console.log('‚úÖ Demo data ƒë√£ ƒë∆∞·ª£c t·∫°o\n');

        // Demo 1: Pity info ban ƒë·∫ßu
        console.log('üìä Demo 1: Pity info ban ƒë·∫ßu');
        const initialPityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
        console.log(`üé£ S·ªë l·∫ßn c√¢u kh√¥ng ra c√° huy·ªÅn tho·∫°i: ${initialPityInfo.legendaryPityCount}/${initialPityInfo.legendaryThreshold}`);
        console.log(`üéØ C√≤n l·∫°i ƒë·∫øn ƒë·∫£m b·∫£o: ${initialPityInfo.remainingToGuaranteed} l·∫ßn`);
        console.log(`üìà T·ª∑ l·ªá pity: ${initialPityInfo.pityPercentage.toFixed(1)}%`);
        console.log('');

        // Demo 2: M√¥ ph·ªèng c√¢u c√° 100 l·∫ßn
        console.log('üé£ Demo 2: M√¥ ph·ªèng c√¢u c√° 100 l·∫ßn kh√¥ng ra c√° huy·ªÅn tho·∫°i');
        for (let i = 1; i <= 100; i++) {
            await prisma.fishingData.update({
                where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
                data: {
                    legendaryPityCount: i,
                    totalFish: { increment: 1 }
                }
            });

            if (i % 25 === 0) {
                const pityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
                const multiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
                console.log(`L·∫ßn ${i}: Pity = ${pityInfo.legendaryPityCount}, Multiplier = ${multiplier.toFixed(2)}x`);
            }
        }
        console.log('');

        // Demo 3: M√¥ ph·ªèng c√¢u c√° 250 l·∫ßn
        console.log('üé£ Demo 3: M√¥ ph·ªèng c√¢u c√° 250 l·∫ßn kh√¥ng ra c√° huy·ªÅn tho·∫°i');
        for (let i = 101; i <= 250; i++) {
            await prisma.fishingData.update({
                where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
                data: {
                    legendaryPityCount: i,
                    totalFish: { increment: 1 }
                }
            });

            if (i % 50 === 0) {
                const pityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
                const multiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
                console.log(`L·∫ßn ${i}: Pity = ${pityInfo.legendaryPityCount}, Multiplier = ${multiplier.toFixed(2)}x`);
            }
        }
        console.log('');

        // Demo 4: M√¥ ph·ªèng c√¢u c√° 400 l·∫ßn
        console.log('üé£ Demo 4: M√¥ ph·ªèng c√¢u c√° 400 l·∫ßn kh√¥ng ra c√° huy·ªÅn tho·∫°i');
        for (let i = 251; i <= 400; i++) {
            await prisma.fishingData.update({
                where: { userId_guildId: { userId: testUserId, guildId: testGuildId } },
                data: {
                    legendaryPityCount: i,
                    totalFish: { increment: 1 }
                }
            });

            if (i % 50 === 0) {
                const pityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
                const multiplier = await PitySystemService.getPityMultiplier(testUserId, testGuildId);
                console.log(`L·∫ßn ${i}: Pity = ${pityInfo.legendaryPityCount}, Multiplier = ${multiplier.toFixed(2)}x`);
            }
        }
        console.log('');

        // Demo 5: Ki·ªÉm tra k√≠ch ho·∫°t pity
        console.log('üéØ Demo 5: Ki·ªÉm tra k√≠ch ho·∫°t pity system');
        const shouldActivate = await PitySystemService.shouldActivatePity(testUserId, testGuildId);
        console.log(`ƒê√£ ƒë·∫°t ng∆∞·ª°ng pity ch∆∞a? ${shouldActivate ? '‚úÖ C√ì' : '‚ùå CH∆ØA'}`);
        console.log('');

        // Demo 6: M√¥ ph·ªèng c√¢u c√° huy·ªÅn tho·∫°i v√† reset
        console.log('üêã Demo 6: M√¥ ph·ªèng c√¢u c√° huy·ªÅn tho·∫°i v√† reset pity');
        
        const legendaryFish = {
            name: 'C√° voi xanh',
            emoji: 'üê≥',
            rarity: 'legendary',
            minValue: 10000,
            maxValue: 20000,
            chance: 1,
            description: 'C√° voi xanh, sinh v·∫≠t l·ªõn nh·∫•t ƒë·∫°i d∆∞∆°ng'
        };

        console.log('üéâ PITY SYSTEM K√çCH HO·∫†T!');
        console.log(`üêã B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c: ${legendaryFish.emoji} ${legendaryFish.name}`);
        console.log(`üí∞ Gi√° tr·ªã: ${legendaryFish.minValue.toLocaleString()} - ${legendaryFish.maxValue.toLocaleString()} FishCoin`);
        console.log(`üìù M√¥ t·∫£: ${legendaryFish.description}`);
        
        await PitySystemService.updatePityCount(testUserId, testGuildId, legendaryFish);
        
        const afterLegendaryPityInfo = await PitySystemService.getPityInfo(testUserId, testGuildId);
        console.log(`\nüîÑ Pity count ƒë√£ reset v·ªÅ: ${afterLegendaryPityInfo.legendaryPityCount}`);
        console.log(`üìÖ Th·ªùi gian c√¢u ƒë∆∞·ª£c: ${afterLegendaryPityInfo.lastLegendaryCaught}`);
        console.log('');

        // Demo 7: Hi·ªÉn th·ªã t·∫•t c·∫£ c√° huy·ªÅn tho·∫°i c√≥ th·ªÉ nh·∫≠n
        console.log('üé≤ Demo 7: Danh s√°ch c√° huy·ªÅn tho·∫°i c√≥ th·ªÉ nh·∫≠n');
        const legendaryFishList = [
            { name: 'C√° voi xanh', emoji: 'üê≥', value: '10,000-20,000' },
            { name: 'C√° m·ª±c kh·ªïng l·ªì', emoji: 'ü¶ë', value: '8,000-20,000' },
            { name: 'C√° r·ªìng bi·ªÉn', emoji: 'üêâ', value: '15,000-50,000' },
            { name: 'C√° th·∫ßn bi·ªÉn', emoji: 'üßú', value: '20,000-60,000' },
            { name: 'Vua bi·ªÉn', emoji: 'üî±', value: '25,000-80,000' },
            { name: 'C√° r·ªìng n∆∞·ªõc ng·ªçt', emoji: 'üêâ', value: '12,000-40,000' },
            { name: 'C√° th·∫ßn n∆∞·ªõc ng·ªçt', emoji: 'üßú‚Äç‚ôÇÔ∏è', value: '18,000-55,000' },
            { name: 'Vua n∆∞·ªõc ng·ªçt', emoji: 'üëë', value: '22,000-70,000' }
        ];

        legendaryFishList.forEach((fish, index) => {
            console.log(`${index + 1}. ${fish.emoji} ${fish.name} - ${fish.value} FishCoin`);
        });
        console.log('');

        console.log('‚úÖ Demo Pity System ho√†n th√†nh!');
        console.log('\nüìã T√≥m t·∫Øt:');
        console.log('‚Ä¢ Pity system ƒë·∫£m b·∫£o ng∆∞·ªùi ch∆°i c√≥ c∆° h·ªôi nh·∫≠n c√° huy·ªÅn tho·∫°i');
        console.log('‚Ä¢ T·ª∑ l·ªá ra c√° huy·ªÅn tho·∫°i tƒÉng d·∫ßn khi g·∫ßn ng∆∞·ª°ng 500 l·∫ßn');
        console.log('‚Ä¢ Khi ƒë·∫°t 500 l·∫ßn c√¢u kh√¥ng ra c√° huy·ªÅn tho·∫°i ‚Üí ƒë·∫£m b·∫£o ra 1 con');
        console.log('‚Ä¢ Pity count reset v·ªÅ 0 khi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i');
        console.log('‚Ä¢ S·ª≠ d·ª•ng l·ªánh `n.pity` ƒë·ªÉ xem th√¥ng tin pity');

    } catch (error) {
        console.error('‚ùå L·ªói trong demo:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y demo
demoPitySystem(); 