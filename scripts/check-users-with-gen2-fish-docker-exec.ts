#!/bin/bash

echo "üîç Ki·ªÉm Tra User C√≥ C√° Gen 2 (Docker Container)"
echo ""

# 1. S·ª≠ d·ª•ng container ID c·ª• th·ªÉ
echo "1Ô∏è‚É£ S·ª≠ D·ª•ng Container ID C·ª• Th·ªÉ:"
CONTAINER_ID="c8203bcf3da3"

# Ki·ªÉm tra container c√≥ t·ªìn t·∫°i kh√¥ng
if ! docker ps -a --format "{{.ID}}" | grep -q "$CONTAINER_ID"; then
    echo "   ‚ùå Container ID $CONTAINER_ID kh√¥ng t·ªìn t·∫°i"
    echo "   üí° H√£y ki·ªÉm tra l·∫°i container ID"
    exit 1
fi

# Ki·ªÉm tra container c√≥ ƒëang ch·∫°y kh√¥ng
if ! docker ps --format "{{.ID}}" | grep -q "$CONTAINER_ID"; then
    echo "   ‚ö†Ô∏è Container $CONTAINER_ID kh√¥ng ƒëang ch·∫°y"
    echo "   üí° H√£y kh·ªüi ƒë·ªông container: docker start $CONTAINER_ID"
    exit 1
fi

echo "   ‚úÖ S·ª≠ d·ª•ng container ID: $CONTAINER_ID"

# 2. Ch·∫°y script trong container
echo ""
echo "2Ô∏è‚É£ Ch·∫°y Script Trong Container:"

# T·∫°o script t·∫°m th·ªùi trong container
docker exec $CONTAINER_ID bash -c '
cat > /tmp/check-gen2-fish.js << "EOF"
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function checkUsersWithGen2Fish() {
  console.log("üîç Ki·ªÉm Tra User C√≥ C√° Gen 2 (Docker Database)");
  console.log("");

  try {
    // 1. Ki·ªÉm tra k·∫øt n·ªëi database
    console.log("1Ô∏è‚É£ Ki·ªÉm Tra K·∫øt N·ªëi Database Docker:");
    
    await prisma.$connect();
    console.log("   ‚úÖ K·∫øt n·ªëi database Docker th√†nh c√¥ng");

    // 2. Th·ªëng k√™ t·ªïng quan
    console.log("");
    console.log("2Ô∏è‚É£ Th·ªëng K√™ T·ªïng Quan:");
    
    const totalUsers = await prisma.user.count();
    const totalFish = await prisma.fish.count();
    
    console.log(`   üë• T·ªïng s·ªë user: ${totalUsers}`);
    console.log(`   üêü T·ªïng s·ªë c√°: ${totalFish}`);

    // 3. Th·ªëng k√™ theo generation
    console.log("");
    console.log("3Ô∏è‚É£ Th·ªëng K√™ Theo Generation:");
    
    const fishByGeneration = await prisma.fish.groupBy({
      by: ["generation"],
      _count: {
        id: true
      },
      orderBy: {
        generation: "asc"
      }
    });

    fishByGeneration.forEach(group => {
      console.log(`   Gen ${group.generation}: ${group._count.id} con c√°`);
    });

    // 4. T√¨m user c√≥ c√° gen 2
    console.log("");
    console.log("4Ô∏è‚É£ T√¨m User C√≥ C√° Gen 2:");
    
    const gen2Fish = await prisma.fish.findMany({
      where: {
        generation: 2
      },
      select: {
        id: true,
        userId: true,
        guildId: true,
        species: true,
        level: true,
        rarity: true,
        value: true,
        status: true,
        createdAt: true
      },
      orderBy: [
        { userId: "asc" },
        { createdAt: "desc" }
      ]
    });

    if (gen2Fish.length === 0) {
      console.log("   ‚úÖ Kh√¥ng c√≥ c√° gen 2 n√†o");
    } else {
      console.log(`   üìä T√¨m th·∫•y ${gen2Fish.length} con c√° gen 2:`);
      
      gen2Fish.forEach((fish, index) => {
        console.log(`");
        console.log(`   üêü C√° ${index + 1}:`);
        console.log(`      ID: ${fish.id}`);
        console.log(`      User: ${fish.userId}`);
        console.log(`      Guild: ${fish.guildId}`);
        console.log(`      Species: ${fish.species}`);
        console.log(`      Level: ${fish.level}`);
        console.log(`      Rarity: ${fish.rarity}`);
        console.log(`      Value: ${fish.value.toString()} coins`);
        console.log(`      Status: ${fish.status}`);
        console.log(`      Created: ${fish.createdAt.toLocaleString()}`);
      });
    }

    // 5. T√¨m user c√≥ c√° gen 3+
    console.log("");
    console.log("5Ô∏è‚É£ T√¨m User C√≥ C√° Gen 3+:");
    
    const gen3PlusFish = await prisma.fish.findMany({
      where: {
        generation: {
          gte: 3
        }
      },
      select: {
        id: true,
        userId: true,
        guildId: true,
        species: true,
        generation: true,
        level: true,
        rarity: true,
        value: true,
        status: true
      },
      orderBy: [
        { userId: "asc" },
        { generation: "desc" }
      ]
    });

    if (gen3PlusFish.length === 0) {
      console.log("   ‚úÖ Kh√¥ng c√≥ c√° gen 3+ n√†o");
    } else {
      console.log(`   üìä T√¨m th·∫•y ${gen3PlusFish.length} con c√° gen 3+:`);
      
      gen3PlusFish.forEach((fish, index) => {
        console.log(`");
        console.log(`   üêü C√° ${index + 1} (Gen ${fish.generation}):`);
        console.log(`      ID: ${fish.id}`);
        console.log(`      User: ${fish.userId}`);
        console.log(`      Guild: ${fish.guildId}`);
        console.log(`      Species: ${fish.species}`);
        console.log(`      Level: ${fish.level}`);
        console.log(`      Rarity: ${fish.rarity}`);
        console.log(`      Value: ${fish.value.toString()} coins`);
        console.log(`      Status: ${fish.status}`);
      });
    }

    // 6. Ki·ªÉm tra breeding history
    console.log("");
    console.log("6Ô∏è‚É£ Ki·ªÉm Tra Breeding History:");
    
    const breedingHistory = await prisma.breedingHistory.findMany({
      select: {
        id: true,
        userId: true,
        guildId: true,
        parent1Id: true,
        parent2Id: true,
        offspringId: true,
        bredAt: true,
        success: true
      },
      orderBy: {
        bredAt: "desc"
      }
    });

    if (breedingHistory.length === 0) {
      console.log("   ‚úÖ Kh√¥ng c√≥ l·ªãch s·ª≠ lai t·∫°o n√†o");
    } else {
      console.log(`   üìä C√≥ ${breedingHistory.length} l·∫ßn lai t·∫°o:`);
      
      breedingHistory.slice(0, 5).forEach((record, index) => {
        console.log(`");
        console.log(`   ${index + 1}. User: ${record.userId} (Guild: ${record.guildId})`);
        console.log(`      üêü Parent 1: ${record.parent1Id}`);
        console.log(`      üêü Parent 2: ${record.parent2Id}`);
        console.log(`      üêü Offspring: ${record.offspringId}`);
        console.log(`      ‚úÖ Success: ${record.success}`);
        console.log(`      üìÖ Bred At: ${record.bredAt.toLocaleString()}`);
      });
      
      if (breedingHistory.length > 5) {
        console.log(`      ... v√† ${breedingHistory.length - 5} l·∫ßn kh√°c`);
      }
    }

  } catch (error) {
    console.error("‚ùå L·ªói:", error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUsersWithGen2Fish();
EOF

# Ch·∫°y script
cd /app && node /tmp/check-gen2-fish.js
'

# 3. D·ªçn d·∫πp
echo ""
echo "3Ô∏è‚É£ D·ªçn D·∫πp:"
docker exec $CONTAINER_ID rm -f /tmp/check-gen2-fish.js
echo "   ‚úÖ ƒê√£ x√≥a file t·∫°m th·ªùi"

echo ""
echo "‚úÖ Ho√†n th√†nh ki·ªÉm tra!" 