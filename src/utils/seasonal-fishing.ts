import { EmbedBuilder } from 'discord.js';

export interface SeasonConfig {
  name: string;
  emoji: string;
  cooldownMultiplier: number; // H·ªá s·ªë nh√¢n cooldown (1.0 = b√¨nh th∆∞·ªùng)
  fishValueMultiplier: number; // H·ªá s·ªë nh√¢n gi√° tr·ªã c√° (1.0 = b√¨nh th∆∞·ªùng)
  luckMultiplier: number; // H·ªá s·ªë nh√¢n t·ª∑ l·ªá may m·∫Øn (1.0 = b√¨nh th∆∞·ªùng)
  description: string;
}

export class SeasonalFishingService {
  private static readonly BASE_COOLDOWN = 30; // 30 gi√¢y cooldown c∆° b·∫£n
  private static readonly BASE_FISH_VALUE_MULTIPLIER = 1.0;
  private static readonly BASE_LUCK_MULTIPLIER = 1.0;
  private static readonly SEASON_DURATION = 30 * 60 * 1000; // 30 ph√∫t = 30 * 60 * 1000 ms

  // C·∫•u h√¨nh c√°c m√πa
  private static readonly SEASONS: Record<string, SeasonConfig> = {
    'summer': {
      name: 'M√πa H√®',
      emoji: '‚òÄÔ∏è',
      cooldownMultiplier: 0.67, // 20s thay v√¨ 30s
      fishValueMultiplier: 0.8, // Gi·∫£m 20% gi√° tr·ªã c√°
      luckMultiplier: 1.0,
      description: 'Th·ªùi gian c√¢u c√° nhanh h∆°n nh∆∞ng gi√° tr·ªã c√° th·∫•p h∆°n'
    },
    'autumn': {
      name: 'M√πa Thu',
      emoji: 'üçÇ',
      cooldownMultiplier: 1.0, // 30s nh∆∞ b√¨nh th∆∞·ªùng
      fishValueMultiplier: 1.1, // TƒÉng 10% gi√° tr·ªã c√°
      luckMultiplier: 1.0,
      description: 'Th·ªùi gian c√¢u c√° b√¨nh th∆∞·ªùng v√† gi√° tr·ªã c√° cao h∆°n'
    },
    'winter': {
      name: 'M√πa ƒê√¥ng',
      emoji: '‚ùÑÔ∏è',
      cooldownMultiplier: 1.33, // 40s thay v√¨ 30s
      fishValueMultiplier: 1.15, // TƒÉng 15% gi√° tr·ªã c√°
      luckMultiplier: 1.0,
      description: 'Th·ªùi gian c√¢u c√° ch·∫≠m h∆°n nh∆∞ng gi√° tr·ªã c√° cao h∆°n'
    },
    'spring': {
      name: 'M√πa Xu√¢n',
      emoji: 'üå∏',
      cooldownMultiplier: 1.17, // 35s thay v√¨ 30s
      fishValueMultiplier: 1.1, // TƒÉng 10% gi√° tr·ªã c√°
      luckMultiplier: 1.2, // TƒÉng 20% t·ª∑ l·ªá may m·∫Øn
      description: 'Th·ªùi gian c√¢u c√° ch·∫≠m h∆°n m·ªôt ch√∫t, gi√° tr·ªã c√° cao h∆°n v√† t·ª∑ l·ªá may m·∫Øn tƒÉng'
    }
  };

  // Th·ª© t·ª± c√°c m√πa
  private static readonly SEASON_ORDER = ['spring', 'summer', 'autumn', 'winter'];

  /**
   * L·∫•y m√πa hi·ªán t·∫°i d·ª±a tr√™n th·ªùi gian (thay ƒë·ªïi sau m·ªói 30 ph√∫t)
   */
  static getCurrentSeason(): string {
    const now = Date.now();
    const seasonIndex = Math.floor((now / this.SEASON_DURATION) % this.SEASON_ORDER.length);
    return this.SEASON_ORDER[seasonIndex];
  }

  /**
   * L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa m√πa hi·ªán t·∫°i (t√≠nh b·∫±ng gi√¢y)
   */
  static getRemainingSeasonTime(): number {
    const now = Date.now();
    const timeInCurrentCycle = now % this.SEASON_DURATION;
    const remainingTime = this.SEASON_DURATION - timeInCurrentCycle;
    return Math.ceil(remainingTime / 1000); // Chuy·ªÉn v·ªÅ gi√¢y
  }

  /**
   * L·∫•y th·ªùi gian ƒë√£ tr√¥i qua c·ªßa m√πa hi·ªán t·∫°i (t√≠nh b·∫±ng gi√¢y)
   */
  static getElapsedSeasonTime(): number {
    const now = Date.now();
    const timeInCurrentCycle = now % this.SEASON_DURATION;
    return Math.ceil(timeInCurrentCycle / 1000); // Chuy·ªÉn v·ªÅ gi√¢y
  }

  /**
   * L·∫•y m√πa ti·∫øp theo
   */
  static getNextSeason(): string {
    const currentSeason = this.getCurrentSeason();
    const currentIndex = this.SEASON_ORDER.indexOf(currentSeason);
    const nextIndex = (currentIndex + 1) % this.SEASON_ORDER.length;
    return this.SEASON_ORDER[nextIndex];
  }

  /**
   * L·∫•y c·∫•u h√¨nh m√πa hi·ªán t·∫°i
   */
  static getCurrentSeasonConfig(): SeasonConfig {
    const currentSeason = this.getCurrentSeason();
    return this.SEASONS[currentSeason];
  }

  /**
   * T√≠nh cooldown theo m√πa
   */
  static getSeasonalCooldown(): number {
    const seasonConfig = this.getCurrentSeasonConfig();
    return Math.round(this.BASE_COOLDOWN * seasonConfig.cooldownMultiplier);
  }

  /**
   * T√≠nh gi√° tr·ªã c√° theo m√πa
   */
  static getSeasonalFishValue(baseValue: number): number {
    const seasonConfig = this.getCurrentSeasonConfig();
    return Math.round(baseValue * seasonConfig.fishValueMultiplier);
  }

  /**
   * T√≠nh t·ª∑ l·ªá may m·∫Øn theo m√πa
   */
  static getSeasonalLuckMultiplier(): number {
    const seasonConfig = this.getCurrentSeasonConfig();
    return seasonConfig.luckMultiplier;
  }

  /**
   * T·∫°o embed th√¥ng tin m√πa hi·ªán t·∫°i
   */
  static createSeasonInfoEmbed(): EmbedBuilder {
    const seasonConfig = this.getCurrentSeasonConfig();
    const currentSeason = this.getCurrentSeason();
    const nextSeason = this.getNextSeason();
    const nextSeasonConfig = this.SEASONS[nextSeason];
    
    const cooldownSeconds = this.getSeasonalCooldown();
    const fishValuePercent = Math.round((seasonConfig.fishValueMultiplier - 1) * 100);
    const luckPercent = Math.round((seasonConfig.luckMultiplier - 1) * 100);
    const remainingTime = this.getRemainingSeasonTime();
    const elapsedTime = this.getElapsedSeasonTime();

    const embed = new EmbedBuilder()
      .setTitle(`${seasonConfig.emoji} ${seasonConfig.name} - H·ªá Th·ªëng C√¢u C√° Theo M√πa`)
      .setDescription(seasonConfig.description)
      .addFields(
        {
          name: '‚è∞ Cooldown C√¢u C√°',
          value: `${cooldownSeconds} gi√¢y`,
          inline: true
        },
        {
          name: 'üí∞ Gi√° Tr·ªã C√°',
          value: fishValuePercent >= 0 ? `+${fishValuePercent}%` : `${fishValuePercent}%`,
          inline: true
        },
        {
          name: 'üçÄ T·ª∑ L·ªá May M·∫Øn',
          value: luckPercent >= 0 ? `+${luckPercent}%` : `${luckPercent}%`,
          inline: true
        },
        {
          name: '‚è±Ô∏è Th·ªùi Gian M√πa',
          value: `ƒê√£ tr√¥i qua: ${Math.floor(elapsedTime / 60)}:${(elapsedTime % 60).toString().padStart(2, '0')}\nC√≤n l·∫°i: ${Math.floor(remainingTime / 60)}:${(remainingTime % 60).toString().padStart(2, '0')}`,
          inline: false
        },
        {
          name: 'üîÑ M√πa Ti·∫øp Theo',
          value: `${nextSeasonConfig.emoji} ${nextSeasonConfig.name} - ${nextSeasonConfig.description}`,
          inline: false
        }
      )
      .setColor(this.getSeasonColor(currentSeason))
      .setTimestamp();

    return embed;
  }

  /**
   * L·∫•y m√†u s·∫Øc theo m√πa
   */
  private static getSeasonColor(season: string): string {
    switch (season) {
      case 'spring': return '#ff69b4'; // H·ªìng
      case 'summer': return '#ffa500'; // Cam
      case 'autumn': return '#8b4513'; // N√¢u
      case 'winter': return '#87ceeb'; // Xanh nh·∫°t
      default: return '#ffffff';
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ th√¥ng tin m√πa
   */
  static getAllSeasonsInfo(): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setTitle('üåç Th√¥ng Tin T·∫•t C·∫£ C√°c M√πa')
      .setDescription('H·ªá th·ªëng c√¢u c√° thay ƒë·ªïi theo m√πa m·ªói 30 ph√∫t ƒë·ªÉ t·∫°o s·ª± ƒëa d·∫°ng v√† th√∫ v·ªã!')
      .setColor('#00ff00');

    for (const [seasonKey, seasonConfig] of Object.entries(this.SEASONS)) {
      const cooldownSeconds = Math.round(this.BASE_COOLDOWN * seasonConfig.cooldownMultiplier);
      const fishValuePercent = Math.round((seasonConfig.fishValueMultiplier - 1) * 100);
      const luckPercent = Math.round((seasonConfig.luckMultiplier - 1) * 100);

      embed.addFields({
        name: `${seasonConfig.emoji} ${seasonConfig.name}`,
        value: 
          `**Cooldown:** ${cooldownSeconds}s\n` +
          `**Gi√° tr·ªã c√°:** ${fishValuePercent >= 0 ? '+' : ''}${fishValuePercent}%\n` +
          `**May m·∫Øn:** ${luckPercent >= 0 ? '+' : ''}${luckPercent}%\n` +
          `**M√¥ t·∫£:** ${seasonConfig.description}`,
        inline: true
      });
    }

    embed.setTimestamp();
    return embed;
  }

  /**
   * Ki·ªÉm tra xem c√≥ ph·∫£i m√πa xu√¢n kh√¥ng (ƒë·ªÉ tƒÉng t·ª∑ l·ªá may m·∫Øn)
   */
  static isSpringSeason(): boolean {
    return this.getCurrentSeason() === 'spring';
  }

  /**
   * L·∫•y th√¥ng tin m√πa d∆∞·ªõi d·∫°ng text
   */
  static getSeasonInfoText(): string {
    const seasonConfig = this.getCurrentSeasonConfig();
    const cooldownSeconds = this.getSeasonalCooldown();
    const fishValuePercent = Math.round((seasonConfig.fishValueMultiplier - 1) * 100);
    const luckPercent = Math.round((seasonConfig.luckMultiplier - 1) * 100);
    const remainingTime = this.getRemainingSeasonTime();

    return `${seasonConfig.emoji} **${seasonConfig.name}** - Cooldown: ${cooldownSeconds}s, Gi√° c√°: ${fishValuePercent >= 0 ? '+' : ''}${fishValuePercent}%, May m·∫Øn: ${luckPercent >= 0 ? '+' : ''}${luckPercent}% (C√≤n ${Math.floor(remainingTime / 60)}:${(remainingTime % 60).toString().padStart(2, '0')})`;
  }

  /**
   * L·∫•y th√¥ng tin m√πa ti·∫øp theo
   */
  static getNextSeasonInfo(): string {
    const nextSeason = this.getNextSeason();
    const nextSeasonConfig = this.SEASONS[nextSeason];
    const remainingTime = this.getRemainingSeasonTime();
    
    return `${nextSeasonConfig.emoji} **${nextSeasonConfig.name}** s·∫Ω b·∫Øt ƒë·∫ßu sau ${Math.floor(remainingTime / 60)}:${(remainingTime % 60).toString().padStart(2, '0')}`;
  }
}