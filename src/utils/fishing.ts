import { PrismaClient } from "@prisma/client";
import { fishCoinDB } from "./fish-coin";

const prisma = new PrismaClient();

export interface Fish {
    name: string;
    emoji: string;
    rarity: "common" | "rare" | "epic" | "legendary";
    minValue: number;
    maxValue: number;
    chance: number;
}

export interface FishingRod {
    name: string;
    emoji: string;
    price: number;
    rarityBonus: number;
    durability: number;
    description: string;
}

export interface Bait {
    name: string;
    emoji: string;
    price: number;
    rarityBonus: number;
    description: string;
}

export interface CaughtFish {
    name: string;
    emoji: string;
    rarity: string;
    value: number;
    quantity: number;
}

// Danh s√°ch c√°
export const FISH_LIST: Fish[] = [
    // C√° th∆∞·ªùng (60-70%)
    { name: "C√° r√¥ phi", emoji: "üêü", rarity: "common", minValue: 10, maxValue: 50, chance: 25 },
    { name: "C√° ch√©p", emoji: "üêü", rarity: "common", minValue: 20, maxValue: 80, chance: 20 },
    { name: "C√° tr·∫Øm", emoji: "üêü", rarity: "common", minValue: 30, maxValue: 100, chance: 15 },
    { name: "C√° m√®", emoji: "üêü", rarity: "common", minValue: 15, maxValue: 60, chance: 10 },

    // C√° hi·∫øm (20-25%)
    { name: "C√° l√≥c", emoji: "üê°", rarity: "rare", minValue: 100, maxValue: 300, chance: 8 },
    { name: "C√° tr√™", emoji: "üê†", rarity: "rare", minValue: 150, maxValue: 400, chance: 7 },
    { name: "C√° qu·∫£", emoji: "üê†", rarity: "rare", minValue: 200, maxValue: 500, chance: 6 },
    { name: "C√° ch√¨nh", emoji: "üê†", rarity: "rare", minValue: 300, maxValue: 800, chance: 4 },

    // C√° qu√Ω hi·∫øm (8-12%)
    { name: "C√° t·∫ßm", emoji: "ü¶à", rarity: "epic", minValue: 500, maxValue: 1500, chance: 3 },
    { name: "C√° h·ªìi", emoji: "ü¶à", rarity: "epic", minValue: 800, maxValue: 2000, chance: 2.5 },
    { name: "C√° ng·ª´", emoji: "üêã", rarity: "epic", minValue: 1000, maxValue: 3000, chance: 2 },
    { name: "C√° m·∫≠p", emoji: "ü¶à", rarity: "epic", minValue: 2000, maxValue: 5000, chance: 1.5 },

    // C√° huy·ªÅn tho·∫°i (1-3%)
    { name: "C√° voi", emoji: "üê≥", rarity: "legendary", minValue: 5000, maxValue: 15000, chance: 0.8 },
    { name: "C√° m·ª±c kh·ªïng l·ªì", emoji: "ü¶ë", rarity: "legendary", minValue: 8000, maxValue: 20000, chance: 0.6 },
    { name: "C√° r·ªìng bi·ªÉn", emoji: "üêâ", rarity: "legendary", minValue: 15000, maxValue: 50000, chance: 0.4 },
    { name: "C√° th·∫ßn", emoji: "üßú", rarity: "legendary", minValue: 50000, maxValue: 100000, chance: 0.2 },
    { name: "Vua bi·ªÉn", emoji: "üî±", rarity: "legendary", minValue: 100000, maxValue: 150000, chance: 0.1 },
];

// Danh s√°ch c·∫ßn c√¢u
export const FISHING_RODS: Record<string, FishingRod> = {
    "basic": { name: "C·∫ßn c√¢u c∆° b·∫£n", emoji: "üé£", price: 100, rarityBonus: 0, durability: 10, description: "C·∫ßn c√¢u c∆° b·∫£n, ƒë·ªô b·ªÅn th·∫•p" },
    "copper": { name: "C·∫ßn c√¢u ƒë·ªìng", emoji: "üé£", price: 1000, rarityBonus: 1, durability: 25, description: "TƒÉng 1% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn trung b√¨nh" },
    "silver": { name: "C·∫ßn c√¢u b·∫°c", emoji: "üé£", price: 5000, rarityBonus: 2, durability: 50, description: "TƒÉng 2% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn cao" },
    "gold": { name: "C·∫ßn c√¢u v√†ng", emoji: "üé£", price: 15000, rarityBonus: 3.5, durability: 100, description: "TƒÉng 3.5% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn r·∫•t cao" },
    "diamond": { name: "C·∫ßn c√¢u kim c∆∞∆°ng", emoji: "üíé", price: 50000, rarityBonus: 5, durability: 200, description: "TƒÉng 5% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn t·ªëi ƒëa" },
};

// Danh s√°ch m·ªìi
export const BAITS: Record<string, Bait> = {
    "basic": { name: "M·ªìi c∆° b·∫£n", emoji: "ü™±", price: 10, rarityBonus: 0, description: "M·ªìi c∆° b·∫£n, t·ª∑ l·ªá th∆∞·ªùng" },
    "good": { name: "M·ªìi ngon", emoji: "ü¶ê", price: 50, rarityBonus: 1.5, description: "TƒÉng 1.5% t·ª∑ l·ªá hi·∫øm" },
    "premium": { name: "M·ªìi th∆∞·ª£ng h·∫°ng", emoji: "ü¶Ä", price: 200, rarityBonus: 3, description: "TƒÉng 3% t·ª∑ l·ªá hi·∫øm" },
    "divine": { name: "M·ªìi th·∫ßn", emoji: "üßú‚Äç‚ôÄÔ∏è", price: 1000, rarityBonus: 5, description: "TƒÉng 5% t·ª∑ l·ªá hi·∫øm" },
};

// Cooldown cho c√¢u c√° (30 gi√¢y)
const FISHING_COOLDOWN = 30000;

// Chi ph√≠ m·ªói l·∫ßn c√¢u
const FISHING_COST = 10;

// Th·ªùi gian c·∫≠p nh·∫≠t gi√° c√° (10 ph√∫t)
const PRICE_UPDATE_INTERVAL = 10 * 60 * 1000;

export class FishPriceService {
    /**
     * Kh·ªüi t·∫°o gi√° c√° ban ƒë·∫ßu
     */
    static async initializeFishPrices() {
        try {
            for (const fish of FISH_LIST) {
                // B·ªè qua c√° huy·ªÅn tho·∫°i - ch·ªâ d√†nh cho fishbarn
                if (fish.rarity === 'legendary') {
                    continue;
                }
                
                const basePrice = Math.floor((fish.minValue + fish.maxValue) / 2);
                
                await prisma.fishPrice.upsert({
                    where: { fishName: fish.name },
                    update: {},
                    create: {
                        fishName: fish.name,
                        basePrice,
                        currentPrice: basePrice,
                        priceChange: 0,
                        changePercent: 0,
                        priceHistory: JSON.stringify([{
                            price: basePrice,
                            timestamp: new Date().toISOString()
                        }])
                    }
                });
            }
            console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o gi√° c√° ban ƒë·∫ßu (kh√¥ng bao g·ªìm c√° huy·ªÅn tho·∫°i)");
        } catch (error) {
            console.error("‚ùå L·ªói kh·ªüi t·∫°o gi√° c√°:", error);
        }
    }

    /**
     * C·∫≠p nh·∫≠t gi√° c√° v·ªõi bi·∫øn ƒë·ªông ¬±10%
     */
    static async updateFishPrices() {
        try {
            const fishPrices = await prisma.fishPrice.findMany();
            
            for (const fishPrice of fishPrices) {
                // Ki·ªÉm tra xem c√≥ ph·∫£i c√° huy·ªÅn tho·∫°i kh√¥ng (ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n)
                const fish = FISH_LIST.find(f => f.name === fishPrice.fishName);
                if (fish && fish.rarity === 'legendary') {
                    continue; // B·ªè qua c√° huy·ªÅn tho·∫°i
                }
                
                // T·∫°o bi·∫øn ƒë·ªông ng·∫´u nhi√™n ¬±10%
                const fluctuation = (Math.random() - 0.5) * 0.2; // -10% ƒë·∫øn +10%
                const basePrice = Number(fishPrice.basePrice);
                const newPrice = Math.max(1, Math.floor(basePrice * (1 + fluctuation)));
                const priceChange = newPrice - basePrice;
                const changePercent = (fluctuation * 100);

                // C·∫≠p nh·∫≠t l·ªãch s·ª≠ gi√°
                const priceHistory = JSON.parse(fishPrice.priceHistory || '[]');
                priceHistory.push({
                    price: newPrice,
                    timestamp: new Date().toISOString()
                });

                // Gi·ªØ ch·ªâ 24 ƒëi·ªÉm d·ªØ li·ªáu g·∫ßn nh·∫•t (4 gi·ªù v·ªõi 10 ph√∫t/l·∫ßn)
                if (priceHistory.length > 24) {
                    priceHistory.splice(0, priceHistory.length - 24);
                }

                await prisma.fishPrice.update({
                    where: { id: fishPrice.id },
                    data: {
                        currentPrice: newPrice,
                        priceChange,
                        changePercent,
                        lastUpdated: new Date(),
                        priceHistory: JSON.stringify(priceHistory)
                    }
                });
            }
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° c√° l√∫c ${new Date().toLocaleString()} (kh√¥ng bao g·ªìm c√° huy·ªÅn tho·∫°i)`);
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t gi√° c√°:", error);
        }
    }

    /**
     * L·∫•y gi√° hi·ªán t·∫°i c·ªßa c√°
     */
    static async getCurrentPrice(fishName: string): Promise<number> {
        try {
            // Ki·ªÉm tra xem c√≥ ph·∫£i c√° huy·ªÅn tho·∫°i kh√¥ng
            const fish = FISH_LIST.find(f => f.name === fishName);
            if (fish && fish.rarity === 'legendary') {
                // C√° huy·ªÅn tho·∫°i kh√¥ng c√≥ trong h·ªá th·ªëng gi√° bi·∫øn ƒë·ªông
                return 0;
            }

            const fishPrice = await prisma.fishPrice.findUnique({
                where: { fishName }
            });

            if (!fishPrice) {
                // N·∫øu ch∆∞a c√≥ gi√°, t·∫°o gi√° m·∫∑c ƒë·ªãnh (ch·ªâ cho c√° kh√¥ng ph·∫£i huy·ªÅn tho·∫°i)
                if (fish && fish.rarity !== 'legendary') {
                    const basePrice = Math.floor((fish.minValue + fish.maxValue) / 2);
                    await this.initializeFishPrices();
                    return basePrice;
                }
                return 0;
            }

            return Number(fishPrice.currentPrice);
        } catch (error) {
            console.error("‚ùå L·ªói l·∫•y gi√° c√°:", error);
            return 0;
        }
    }

    /**
     * L·∫•y th√¥ng tin gi√° chi ti·∫øt c·ªßa c√°
     */
    static async getFishPriceInfo(fishName: string) {
        try {
            // Ki·ªÉm tra xem c√≥ ph·∫£i c√° huy·ªÅn tho·∫°i kh√¥ng
            const fish = FISH_LIST.find(f => f.name === fishName);
            if (fish && fish.rarity === 'legendary') {
                // C√° huy·ªÅn tho·∫°i kh√¥ng c√≥ trong h·ªá th·ªëng gi√° bi·∫øn ƒë·ªông
                return null;
            }

            const fishPrice = await prisma.fishPrice.findUnique({
                where: { fishName }
            });

            if (!fishPrice) {
                return null;
            }

            return {
                fishName: fishPrice.fishName,
                basePrice: fishPrice.basePrice,
                currentPrice: fishPrice.currentPrice,
                priceChange: fishPrice.priceChange,
                changePercent: fishPrice.changePercent,
                lastUpdated: fishPrice.lastUpdated,
                priceHistory: JSON.parse(fishPrice.priceHistory || '[]')
            };
        } catch (error) {
            console.error("‚ùå L·ªói l·∫•y th√¥ng tin gi√° c√°:", error);
            return null;
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ gi√° c√° hi·ªán t·∫°i
     */
    static async getAllFishPrices() {
        try {
            const fishPrices = await prisma.fishPrice.findMany({
                orderBy: { fishName: 'asc' }
            });

            // L·ªçc b·ªè c√° huy·ªÅn tho·∫°i (ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n)
            const filteredPrices = fishPrices.filter(fp => {
                const fish = FISH_LIST.find(f => f.name === fp.fishName);
                return !fish || fish.rarity !== 'legendary';
            });

            return filteredPrices.map(fp => ({
                fishName: fp.fishName,
                basePrice: fp.basePrice,
                currentPrice: fp.currentPrice,
                priceChange: fp.priceChange,
                changePercent: fp.changePercent,
                lastUpdated: fp.lastUpdated
            }));
        } catch (error) {
            console.error("‚ùå L·ªói l·∫•y t·∫•t c·∫£ gi√° c√°:", error);
            return [];
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu h·ªá th·ªëng c·∫≠p nh·∫≠t gi√° t·ª± ƒë·ªông
     */
    static startPriceUpdateScheduler() {
        // C·∫≠p nh·∫≠t gi√° ngay l·∫≠p t·ª©c
        this.updateFishPrices();
        
        // C·∫≠p nh·∫≠t gi√° m·ªói 10 ph√∫t
        setInterval(() => {
            this.updateFishPrices();
        }, PRICE_UPDATE_INTERVAL);

        console.log("üîÑ ƒê√£ kh·ªüi ƒë·ªông h·ªá th·ªëng c·∫≠p nh·∫≠t gi√° c√° t·ª± ƒë·ªông (10 ph√∫t/l·∫ßn)");
    }
}

export class FishingService {
    /**
     * L·∫•y ho·∫∑c t·∫°o fishing data cho ng∆∞·ªùi d√πng
     */
    static async getFishingData(userId: string, guildId: string) {
        try {
            // ƒê·∫£m b·∫£o User t·ªìn t·∫°i tr∆∞·ªõc khi t·∫°o FishingData
            const fishingData = await prisma.$transaction(async (tx: any) => {
                // T·∫°o ho·∫∑c l·∫•y User tr∆∞·ªõc
                await tx.user.upsert({
                    where: {
                        userId_guildId: {
                            userId,
                            guildId
                        }
                    },
                    update: {},
                    create: {
                        userId,
                        guildId,
                        balance: 0,
                        dailyStreak: 0
                    }
                });

                // Sau ƒë√≥ t·∫°o ho·∫∑c l·∫•y FishingData
                return await tx.fishingData.upsert({
                    where: {
                        userId_guildId: {
                            userId,
                            guildId
                        }
                    },
                    update: {},
                    create: {
                        userId,
                        guildId,
                        totalFish: 0,
                        totalEarnings: 0,
                        biggestFish: "",
                        biggestValue: 0,
                        rarestFish: "",
                        rarestRarity: "",
                        fishingTime: 0,
                        currentRod: "", // Kh√¥ng c√≥ c·∫ßn c√¢u m·∫∑c ƒë·ªãnh
                        currentBait: "", // Kh√¥ng c√≥ m·ªìi m·∫∑c ƒë·ªãnh
                        lastFished: new Date(0) // Cho ph√©p c√¢u ngay l·∫≠p t·ª©c
                    },
                    include: {
                        rods: true,
                        baits: true,
                        fish: true
                    }
                });
            });

            return fishingData;
        } catch (error) {
            console.error("Error getting fishing data:", error);
            throw error;
        }
    }

    /**
     * Ki·ªÉm tra c√≥ th·ªÉ c√¢u c√° kh√¥ng
     * Admin bypass t·∫•t c·∫£ y√™u c·∫ßu v·ªÅ c·∫ßn c√¢u, m·ªìi v√† cooldown
     */
    static async canFish(userId: string, guildId: string, isAdmin: boolean = false): Promise<{ canFish: boolean; remainingTime: number; message?: string }> {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const now = new Date();
            const timeSinceLastFish = now.getTime() - fishingData.lastFished.getTime();

            // Ki·ªÉm tra cooldown (Admin bypass cooldown)
            if (!isAdmin && timeSinceLastFish < FISHING_COOLDOWN) {
                return {
                    canFish: false,
                    remainingTime: FISHING_COOLDOWN - timeSinceLastFish,
                    message: `B·∫°n c·∫ßn ƒë·ª£i ${Math.ceil((FISHING_COOLDOWN - timeSinceLastFish) / 1000)} gi√¢y n·ªØa ƒë·ªÉ c√¢u c√°!`
                };
            }

            // Admin bypass t·∫•t c·∫£ y√™u c·∫ßu v·ªÅ c·∫ßn c√¢u v√† m·ªìi
            if (!isAdmin) {
                // Ki·ªÉm tra c√≥ c·∫ßn c√¢u kh√¥ng - t·ª± ƒë·ªông trang b·ªã c·∫ßn t·ªët nh·∫•t n·∫øu ch∆∞a c√≥
                if (!fishingData.currentRod || fishingData.currentRod === "") {
                    // T·ª± ƒë·ªông trang b·ªã c·∫ßn t·ªët nh·∫•t c√≤n ƒë·ªô b·ªÅn
                    const availableRods = fishingData.rods.filter((r: { rodType: string; durability: number; id: string }) => r.durability > 0);
                    if (availableRods.length > 0) {
                        // ∆Øu ti√™n theo th·ª© t·ª±: diamond > gold > silver > copper > basic
                        const rodPriority = ['diamond', 'gold', 'silver', 'copper', 'basic'];
                        let bestRod = availableRods[0];
                        for (const priorityRod of rodPriority) {
                            const foundRod = availableRods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === priorityRod);
                            if (foundRod) {
                                bestRod = foundRod;
                                break;
                            }
                        }
                        // T·ª± ƒë·ªông trang b·ªã c·∫ßn t·ªët nh·∫•t
                        await prisma.fishingData.update({
                            where: { id: fishingData.id },
                            data: { currentRod: bestRod.rodType }
                        });
                        fishingData.currentRod = bestRod.rodType;
                    } else {
                        return {
                            canFish: false,
                            remainingTime: 0,
                            message: "B·∫°n c·∫ßn mua c·∫ßn c√¢u tr∆∞·ªõc khi c√¢u c√°! D√πng `n.fishing shop` ƒë·ªÉ xem c·ª≠a h√†ng."
                        };
                    }
                }

                // Ki·ªÉm tra c√≥ m·ªìi kh√¥ng - t·ª± ƒë·ªông trang b·ªã m·ªìi t·ªët nh·∫•t n·∫øu ch∆∞a c√≥
                if (!fishingData.currentBait || fishingData.currentBait === "") {
                    // T·ª± ƒë·ªông trang b·ªã m·ªìi t·ªët nh·∫•t c√≥ s·∫µn
                    const availableBaits = fishingData.baits.filter((b: { baitType: string; quantity: number; id: string }) => b.quantity > 0);
                    
                    if (availableBaits.length > 0) {
                        // ∆Øu ti√™n theo th·ª© t·ª±: divine > premium > good > basic
                        const baitPriority = ['divine', 'premium', 'good', 'basic'];
                        let bestBait = availableBaits[0];

                        for (const priorityBait of baitPriority) {
                            const foundBait = availableBaits.find((b: { baitType: string; quantity: number; id: string }) => b.baitType === priorityBait);
                            if (foundBait) {
                                bestBait = foundBait;
                                break;
                            }
                        }

                        // T·ª± ƒë·ªông trang b·ªã m·ªìi t·ªët nh·∫•t
                        await prisma.fishingData.update({
                            where: { id: fishingData.id },
                            data: { currentBait: bestBait.baitType }
                        });

                        // C·∫≠p nh·∫≠t fishingData ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c b∆∞·ªõc ti·∫øp theo
                        fishingData.currentBait = bestBait.baitType;
                    } else {
                        return {
                            canFish: false,
                            remainingTime: 0,
                            message: "B·∫°n c·∫ßn mua m·ªìi tr∆∞·ªõc khi c√¢u c√°! D√πng `n.fishing shop` ƒë·ªÉ xem c·ª≠a h√†ng."
                        };
                    }
                }

                // Ki·ªÉm tra c·∫ßn c√¢u c√≥ ƒë·ªô b·ªÅn kh√¥ng - t·ª± ƒë·ªông chuy·ªÉn sang c·∫ßn kh√°c n·∫øu h·∫øt ƒë·ªô b·ªÅn
                const currentRod = fishingData.rods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === fishingData.currentRod);
                if (!currentRod || currentRod.durability <= 0) {
                    // T·ª± ƒë·ªông chuy·ªÉn sang c·∫ßn kh√°c c√≤n ƒë·ªô b·ªÅn
                    const availableRods = fishingData.rods.filter((r: { rodType: string; durability: number; id: string }) => r.rodType !== fishingData.currentRod && r.durability > 0);
                    if (availableRods.length > 0) {
                        // ∆Øu ti√™n theo th·ª© t·ª±: diamond > gold > silver > copper > basic
                        const rodPriority = ['diamond', 'gold', 'silver', 'copper', 'basic'];
                        let nextRod = availableRods[0];
                        for (const priorityRod of rodPriority) {
                            const foundRod = availableRods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === priorityRod);
                            if (foundRod) {
                                nextRod = foundRod;
                                break;
                            }
                        }
                        // T·ª± ƒë·ªông chuy·ªÉn sang c·∫ßn kh√°c
                        await prisma.fishingData.update({
                            where: { id: fishingData.id },
                            data: { currentRod: nextRod.rodType }
                        });
                        fishingData.currentRod = nextRod.rodType;
                        // Bypass cooldown khi auto-switch rod
                        return { canFish: true, remainingTime: 0 };
                    } else {
                        return {
                            canFish: false,
                            remainingTime: 0,
                            message: "C·∫ßn c√¢u c·ªßa b·∫°n ƒë√£ h·∫øt ƒë·ªô b·ªÅn! H√£y mua c·∫ßn c√¢u m·ªõi."
                        };
                    }
                }

                // Ki·ªÉm tra c√≥ m·ªìi kh√¥ng - t·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c n·∫øu m·ªìi hi·ªán t·∫°i h·∫øt
                const currentBait = fishingData.baits.find((b: { baitType: string; quantity: number; id: string }) => b.baitType === fishingData.currentBait);
                if (!currentBait || currentBait.quantity <= 0) {
                    // T·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c c√≥ s·∫µn
                    const availableBaits = fishingData.baits.filter((b: { baitType: string; quantity: number; id: string }) => 
                        b.baitType !== fishingData.currentBait && b.quantity > 0
                    );
                    
                    if (availableBaits.length > 0) {
                        // ∆Øu ti√™n theo th·ª© t·ª±: divine > premium > good > basic
                        const baitPriority = ['divine', 'premium', 'good', 'basic'];
                        let nextBait = availableBaits[0];

                        for (const priorityBait of baitPriority) {
                            const foundBait = availableBaits.find((b: { baitType: string; quantity: number; id: string }) => b.baitType === priorityBait);
                            if (foundBait) {
                                nextBait = foundBait;
                                break;
                            }
                        }

                        // T·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c
                        await prisma.fishingData.update({
                            where: { id: fishingData.id },
                            data: { currentBait: nextBait.baitType }
                        });

                        // C·∫≠p nh·∫≠t fishingData ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c b∆∞·ªõc ti·∫øp theo
                        fishingData.currentBait = nextBait.baitType;
                        
                        // Bypass cooldown khi auto-switch bait ƒë·ªÉ ng∆∞·ªùi ch∆°i c√≥ th·ªÉ c√¢u ngay
                        return { canFish: true, remainingTime: 0 };
                    } else {
                        return {
                            canFish: false,
                            remainingTime: 0,
                            message: "B·∫°n ƒë√£ h·∫øt m·ªìi! H√£y mua th√™m m·ªìi."
                        };
                    }
                }
            }

            return { canFish: true, remainingTime: 0 };
        } catch (error) {
            console.error("Error checking fishing cooldown:", error);
            return { 
                canFish: false, 
                remainingTime: FISHING_COOLDOWN,
                message: "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán c√¢u c√°!"
            };
        }
    }

    /**
     * C√¢u c√°
     */
    static async fish(userId: string, guildId: string, isAdmin: boolean = false) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            
            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√¢u c√° (Admin bypass t·∫•t c·∫£ y√™u c·∫ßu)
            const cooldownCheck = await this.canFish(userId, guildId, isAdmin);
            if (!cooldownCheck.canFish) {
                throw new Error(cooldownCheck.message || `B·∫°n c·∫ßn ƒë·ª£i ${Math.ceil(cooldownCheck.remainingTime / 1000)} gi√¢y n·ªØa ƒë·ªÉ c√¢u c√°!`);
            }

            // Ki·ªÉm tra s·ªë d∆∞ FishCoin
            const hasEnoughFishCoin = await fishCoinDB.hasEnoughFishCoin(userId, guildId, FISHING_COST);
            if (!hasEnoughFishCoin) {
                throw new Error(`B·∫°n c·∫ßn √≠t nh·∫•t ${FISHING_COST} FishCoin ƒë·ªÉ c√¢u c√°!`);
            }

            // Tr·ª´ FishCoin c√¢u c√°
            await fishCoinDB.subtractFishCoin(userId, guildId, FISHING_COST, 'Fishing cost');

            // Ch·ªçn c√° ng·∫´u nhi√™n (Admin lu√¥n c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i)
            const fish = isAdmin ? this.getAdminFish() : this.getRandomFish(fishingData);
            const fishValue = Math.floor(Math.random() * (fish.maxValue - fish.minValue + 1)) + fish.minValue;

            // C·∫≠p nh·∫≠t fishing data
            const updatedFishingData = await prisma.fishingData.update({
                where: { id: fishingData.id },
                data: {
                    totalFish: { increment: 1 },
                    totalEarnings: { increment: fishValue },
                    fishingTime: { increment: 1 },
                    lastFished: new Date()
                },
                include: {
                    rods: true,
                    baits: true,
                    fish: true
                }
            });

            // C·∫≠p nh·∫≠t biggest fish n·∫øu c·∫ßn
            if (fishValue > fishingData.biggestValue) {
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: {
                        biggestFish: fish.name,
                        biggestValue: fishValue
                    }
                });
            }

            // C·∫≠p nh·∫≠t rarest fish n·∫øu c·∫ßn
            if (this.getRarityValue(fish.rarity) > this.getRarityValue(fishingData.rarestRarity)) {
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: {
                        rarestFish: fish.name,
                        rarestRarity: fish.rarity
                    }
                });
            }

            // Th√™m c√° v√†o inventory
            await prisma.caughtFish.upsert({
                where: {
                    fishingDataId_fishName: {
                        fishingDataId: fishingData.id,
                        fishName: fish.name
                    }
                },
                update: {
                    quantity: { increment: 1 },
                    fishValue: fishValue // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi nh·∫•t
                },
                create: {
                    fishingDataId: fishingData.id,
                    fishName: fish.name,
                    fishRarity: fish.rarity,
                    fishValue: fishValue,
                    quantity: 1
                }
            });

            // Gi·∫£m ƒë·ªô b·ªÅn c·∫ßn c√¢u (Admin kh√¥ng b·ªã gi·∫£m)
            if (!isAdmin) {
                const currentRod = fishingData.rods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === fishingData.currentRod);
                if (currentRod && currentRod.durability > 0) {
                    await prisma.fishingRod.update({
                        where: { id: currentRod.id },
                        data: { durability: { decrement: 1 } }
                    });

                    // N·∫øu c·∫ßn c√¢u h·∫øt ƒë·ªô b·ªÅn, x√≥a c·∫ßn c√¢u hi·ªán t·∫°i
                    if (currentRod.durability <= 1) {
                        await prisma.fishingData.update({
                            where: { id: fishingData.id },
                            data: { currentRod: "" }
                        });
                    }
                }

                // Gi·∫£m s·ªë l∆∞·ª£ng m·ªìi (Admin kh√¥ng b·ªã gi·∫£m)
                const currentBait = fishingData.baits.find((b: { baitType: string; quantity: number; id: string }) => b.baitType === fishingData.currentBait);
                if (currentBait && currentBait.quantity > 0) {
                    await prisma.fishingBait.update({
                        where: { id: currentBait.id },
                        data: { quantity: { decrement: 1 } }
                    });

                    // N·∫øu h·∫øt m·ªìi, t·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c
                    if (currentBait.quantity <= 0) {
                        await this.autoSwitchBait(userId, guildId, fishingData.currentBait);
                    }
                }
            }

            return {
                fish,
                value: fishValue
            };
        } catch (error) {
            console.error("Error fishing:", error);
            throw error;
        }
    }

    /**
     * Mua c·∫ßn c√¢u
     */
    static async buyRod(userId: string, guildId: string, rodType: string) {
        try {
            const rod = FISHING_RODS[rodType];
            if (!rod) {
                throw new Error("Lo·∫°i c·∫ßn c√¢u kh√¥ng h·ª£p l·ªá!");
            }

            // Ki·ªÉm tra ƒë·ªß FishCoin
            const hasEnoughFishCoin = await fishCoinDB.hasEnoughFishCoin(userId, guildId, rod.price);
            if (!hasEnoughFishCoin) {
                throw new Error(`Kh√¥ng ƒë·ªß FishCoin! C·∫ßn ${rod.price} FishCoin`);
            }

            const fishingData = await this.getFishingData(userId, guildId);

            // Ki·ªÉm tra ƒë√£ c√≥ c·∫ßn c√¢u n√†y ch∆∞a
            const existingRod = fishingData.rods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === rodType);
            
            // Tr·ª´ FishCoin tr∆∞·ªõc
            await fishCoinDB.subtractFishCoin(userId, guildId, rod.price, `Buy fishing rod: ${rod.name}`);

            // Th√™m/c·ªông d·ªìn c·∫ßn c√¢u
            if (existingRod) {
                // N·∫øu ƒë√£ c√≥ c·∫ßn c√¢u n√†y, c·ªông d·ªìn ƒë·ªô b·ªÅn
                await prisma.fishingRod.update({
                    where: { id: existingRod.id },
                    data: { durability: { increment: rod.durability } }
                });
            } else {
                // N·∫øu ch∆∞a c√≥, t·∫°o c·∫ßn c√¢u m·ªõi
                await prisma.fishingRod.create({
                    data: {
                        fishingDataId: fishingData.id,
                        rodType,
                        durability: rod.durability
                    }
                });

                // T·ª± ƒë·ªông set l√†m c·∫ßn c√¢u hi·ªán t·∫°i n·∫øu ch∆∞a c√≥ c·∫ßn c√¢u n√†o
                if (!fishingData.currentRod || fishingData.currentRod === "") {
                    await prisma.fishingData.update({
                        where: { id: fishingData.id },
                        data: { currentRod: rodType }
                    });
                }
            }

            return rod;
        } catch (error) {
            console.error("Error buying rod:", error);
            throw error;
        }
    }

    /**
     * Mua m·ªìi
     */
    static async buyBait(userId: string, guildId: string, baitType: string, quantity: number = 1) {
        try {
            const bait = BAITS[baitType];
            if (!bait) {
                throw new Error("Lo·∫°i m·ªìi kh√¥ng h·ª£p l·ªá!");
            }

            const totalCost = bait.price * quantity;
            
            // Ki·ªÉm tra ƒë·ªß FishCoin
            const hasEnoughFishCoin = await fishCoinDB.hasEnoughFishCoin(userId, guildId, totalCost);
            if (!hasEnoughFishCoin) {
                throw new Error(`Kh√¥ng ƒë·ªß FishCoin! C·∫ßn ${totalCost} FishCoin`);
            }

            const fishingData = await this.getFishingData(userId, guildId);

            // Tr·ª´ FishCoin tr∆∞·ªõc
            await fishCoinDB.subtractFishCoin(userId, guildId, totalCost, `Buy fishing bait: ${bait.name} x${quantity}`);

            // Th√™m m·ªìi
            await prisma.fishingBait.upsert({
                where: {
                    fishingDataId_baitType: {
                        fishingDataId: fishingData.id,
                        baitType
                    }
                },
                update: {
                    quantity: { increment: quantity }
                },
                create: {
                    fishingDataId: fishingData.id,
                    baitType,
                    quantity
                }
            });

            // T·ª± ƒë·ªông set l√†m m·ªìi hi·ªán t·∫°i n·∫øu ch∆∞a c√≥ m·ªìi n√†o
            if (!fishingData.currentBait || fishingData.currentBait === "") {
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: { currentBait: baitType }
                });
            }

            return { bait, quantity, totalCost };
        } catch (error) {
            console.error("Error buying bait:", error);
            throw error;
        }
    }

    /**
     * Set c·∫ßn c√¢u hi·ªán t·∫°i
     */
    static async setCurrentRod(userId: string, guildId: string, rodType: string) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const rod = fishingData.rods.find((r: { rodType: string; durability: number; id: string }) => r.rodType === rodType);

            if (!rod) {
                throw new Error("B·∫°n kh√¥ng c√≥ c·∫ßn c√¢u n√†y! H√£y mua tr∆∞·ªõc.");
            }

            if (rod.durability <= 0) {
                throw new Error("C·∫ßn c√¢u n√†y ƒë√£ h·∫øt ƒë·ªô b·ªÅn!");
            }

            await prisma.fishingData.update({
                where: { id: fishingData.id },
                data: { currentRod: rodType }
            });

            return rod;
        } catch (error) {
            console.error("Error setting current rod:", error);
            throw error;
        }
    }

    /**
     * T·ª± ƒë·ªông chuy·ªÉn sang m·ªìi kh√°c khi m·ªìi hi·ªán t·∫°i h·∫øt
     */
    static async autoSwitchBait(userId: string, guildId: string, currentBaitType: string) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            
            // T√¨m m·ªìi kh√°c c√≥ s·∫µn (kh√¥ng ph·∫£i m·ªìi hi·ªán t·∫°i v√† c√≥ s·ªë l∆∞·ª£ng > 0)
            const availableBaits = fishingData.baits.filter((b: { baitType: string; quantity: number; id: string }) => 
                b.baitType !== currentBaitType && b.quantity > 0
            );

            if (availableBaits.length > 0) {
                // ∆Øu ti√™n m·ªìi theo th·ª© t·ª±: divine > premium > good > basic
                const baitPriority = ['divine', 'premium', 'good', 'basic'];
                let nextBait = availableBaits[0]; // M·∫∑c ƒë·ªãnh l√† m·ªìi ƒë·∫ßu ti√™n

                // T√¨m m·ªìi c√≥ ƒë·ªô ∆∞u ti√™n cao nh·∫•t
                for (const priorityBait of baitPriority) {
                    const foundBait = availableBaits.find((b: { baitType: string; quantity: number; id: string }) => 
                        b.baitType === priorityBait
                    );
                    if (foundBait) {
                        nextBait = foundBait;
                        break;
                    }
                }

                // C·∫≠p nh·∫≠t m·ªìi hi·ªán t·∫°i
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: { currentBait: nextBait.baitType }
                });

                return {
                    success: true,
                    switchedTo: nextBait.baitType,
                    baitName: BAITS[nextBait.baitType]?.name || nextBait.baitType,
                    remainingQuantity: nextBait.quantity
                };
            } else {
                // Kh√¥ng c√≥ m·ªìi n√†o kh√°c, x√≥a m·ªìi hi·ªán t·∫°i
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: { currentBait: "" }
                });

                return {
                    success: false,
                    message: "Kh√¥ng c√≥ m·ªìi n√†o kh√°c ƒë·ªÉ chuy·ªÉn sang!"
                };
            }
        } catch (error) {
            console.error("Error auto switching bait:", error);
            throw error;
        }
    }

    /**
     * Set m·ªìi hi·ªán t·∫°i
     */
    static async setCurrentBait(userId: string, guildId: string, baitType: string) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const bait = fishingData.baits.find((b: { baitType: string; quantity: number; id: string }) => b.baitType === baitType);

            if (!bait) {
                throw new Error("B·∫°n kh√¥ng c√≥ m·ªìi n√†y! H√£y mua tr∆∞·ªõc.");
            }

            if (bait.quantity <= 0) {
                throw new Error("B·∫°n ƒë√£ h·∫øt m·ªìi n√†y!");
            }

            await prisma.fishingData.update({
                where: { id: fishingData.id },
                data: { currentBait: baitType }
            });

            return bait;
        } catch (error) {
            console.error("Error setting current bait:", error);
            throw error;
        }
    }

    /**
     * B√°n c√°
     */
    static async sellFish(userId: string, guildId: string, fishName: string, quantity: number = 1) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const caughtFish = fishingData.fish.find((f: { fishName: string; quantity: number; id: string }) => f.fishName === fishName);

            if (!caughtFish) {
                throw new Error("B·∫°n kh√¥ng c√≥ c√° n√†y!");
            }

            if (caughtFish.quantity < quantity) {
                throw new Error(`B·∫°n ch·ªâ c√≥ ${caughtFish.quantity} con ${fishName}!`);
            }

            // L·∫•y gi√° hi·ªán t·∫°i c·ªßa c√°
            const currentPrice = await FishPriceService.getCurrentPrice(fishName);
            const totalValue = currentPrice * quantity;

            // C·ªông FishCoin v√† tr·ª´ c√°
            await fishCoinDB.addFishCoin(userId, guildId, totalValue, `Sold fish: ${fishName} x${quantity}`);

            if (caughtFish.quantity === quantity) {
                await prisma.caughtFish.delete({
                    where: { id: caughtFish.id }
                });
            } else {
                await prisma.caughtFish.update({
                    where: { id: caughtFish.id },
                    data: { quantity: { decrement: quantity } }
                });
            }

            return { fishName, quantity, totalValue, currentPrice };
        } catch (error) {
            console.error("Error selling fish:", error);
            throw error;
        }
    }

    /**
     * Ch·ªçn c√° huy·ªÅn tho·∫°i cho Admin
     */
    private static getAdminFish(): Fish {
        const legendaryFish = FISH_LIST.filter(fish => fish.rarity === "legendary");
        const randomIndex = Math.floor(Math.random() * legendaryFish.length);
        return legendaryFish[randomIndex];
    }

    /**
     * Ch·ªçn c√° ng·∫´u nhi√™n d·ª±a tr√™n c·∫ßn c√¢u v√† m·ªìi
     */
    private static getRandomFish(fishingData: any): Fish {
        const rod = FISHING_RODS[fishingData.currentRod];
        const bait = BAITS[fishingData.currentBait];
        const totalBonus = rod.rarityBonus + bait.rarityBonus;

        // Ki·ªÉm tra xem c√≥ ph·∫£i kim c∆∞∆°ng + m·ªìi th·∫ßn kh√¥ng
        const isDiamondDivine = fishingData.currentRod === "diamond" && fishingData.currentBait === "divine";

        // T·∫°o danh s√°ch c√° v·ªõi t·ª∑ l·ªá ƒë√£ ƒëi·ªÅu ch·ªânh
        const adjustedFish = FISH_LIST.map(fish => {
            let adjustedChance = fish.chance;
            if (fish.rarity === "legendary") {
                if (isDiamondDivine) {
                    // Gi·ªØ nguy√™n logic c≈© cho kim c∆∞∆°ng + m·ªìi th·∫ßn
                    adjustedChance += totalBonus * 0.1;
                } else {
                    // Gi·∫£m m·∫°nh h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o < 1%
                    adjustedChance = fish.chance * 0.01 + totalBonus * 0.02; // gi·∫£m r·∫•t m·∫°nh
                }
            } else if (fish.rarity === "rare") {
                adjustedChance += totalBonus * 0.5;
            } else if (fish.rarity === "epic") {
                adjustedChance += totalBonus * 0.3;
            }
            return { ...fish, adjustedChance };
        });

        // Ch·ªçn c√° ng·∫´u nhi√™n d·ª±a tr√™n t·ª∑ l·ªá
        const totalChance = adjustedFish.reduce((sum, fish) => sum + fish.adjustedChance, 0);
        let random = Math.random() * totalChance;

        for (const fish of adjustedFish) {
            random -= fish.adjustedChance;
            if (random <= 0) {
                return fish;
            }
        }

        // Fallback v·ªÅ c√° th∆∞·ªùng
        return FISH_LIST[0];
    }

    /**
     * L·∫•y gi√° tr·ªã rarity ƒë·ªÉ so s√°nh
     */
    private static getRarityValue(rarity: string): number {
        switch (rarity) {
            case "common": return 1;
            case "rare": return 2;
            case "epic": return 3;
            case "legendary": return 4;
            default: return 0;
        }
    }

    /**
     * L·∫•y b·∫£ng x·∫øp h·∫°ng c√¢u c√°
     */
    static async getFishingLeaderboard(guildId: string, limit: number = 10) {
        try {
            const leaderboard = await prisma.fishingData.findMany({
                where: { guildId },
                orderBy: [
                    { totalFish: 'desc' },        // S·∫Øp x·∫øp theo s·ªë l·∫ßn c√¢u (nhi·ªÅu nh·∫•t tr∆∞·ªõc)
                    { totalEarnings: 'desc' }     // N·∫øu s·ªë l·∫ßn c√¢u b·∫±ng nhau th√¨ s·∫Øp x·∫øp theo thu nh·∫≠p
                ],
                take: limit,
                include: {
                    user: true
                }
            });

            return leaderboard.map((data: any) => ({
                userId: data.userId,
                totalFish: data.totalFish,
                totalEarnings: data.totalEarnings,
                biggestFish: data.biggestFish,
                biggestValue: data.biggestValue,
                rarestFish: data.rarestFish,
                rarestRarity: data.rarestRarity,
                fishingTime: data.fishingTime
            }));
        } catch (error) {
            console.error("Error getting fishing leaderboard:", error);
            return [];
        }
    }

    /**
     * L·∫•y th√¥ng tin ng∆∞·ªùi c√≥ s·ªë l·∫ßn c√¢u c√° nhi·ªÅu nh·∫•t (top 1)
     */
    static async getTopFisher(guildId: string) {
        try {
            const topFisher = await prisma.fishingData.findFirst({
                where: { guildId },
                orderBy: [
                    { totalFish: 'desc' },        // S·∫Øp x·∫øp theo s·ªë l·∫ßn c√¢u (nhi·ªÅu nh·∫•t tr∆∞·ªõc)
                    { totalEarnings: 'desc' }     // N·∫øu s·ªë l·∫ßn c√¢u b·∫±ng nhau th√¨ s·∫Øp x·∫øp theo thu nh·∫≠p
                ],
                include: {
                    user: true
                }
            });

            if (!topFisher) {
                return null;
            }

            return {
                userId: topFisher.userId,
                totalFish: topFisher.totalFish,
                totalEarnings: topFisher.totalEarnings,
                biggestFish: topFisher.biggestFish,
                biggestValue: topFisher.biggestValue,
                rarestFish: topFisher.rarestFish,
                rarestRarity: topFisher.rarestRarity,
                fishingTime: topFisher.fishingTime
            };
        } catch (error) {
            console.error("Error getting top fisher:", error);
            return null;
        }
    }
} 