import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export interface Fish {
    name: string;
    emoji: string;
    rarity: "common" | "rare" | "epic" | "legendary";
    minValue: number;
    maxValue: number;
    chance: number;
}

export interface FishingRod {
    name: string;
    emoji: string;
    price: number;
    rarityBonus: number;
    durability: number;
    description: string;
}

export interface Bait {
    name: string;
    emoji: string;
    price: number;
    rarityBonus: number;
    description: string;
}

export interface CaughtFish {
    name: string;
    emoji: string;
    rarity: string;
    value: number;
    quantity: number;
}

// Danh s√°ch c√°
export const FISH_LIST: Fish[] = [
    // C√° th∆∞·ªùng (60-70%)
    { name: "C√° r√¥ phi", emoji: "üêü", rarity: "common", minValue: 10, maxValue: 50, chance: 25 },
    { name: "C√° ch√©p", emoji: "üêü", rarity: "common", minValue: 20, maxValue: 80, chance: 20 },
    { name: "C√° tr·∫Øm", emoji: "üêü", rarity: "common", minValue: 30, maxValue: 100, chance: 15 },
    { name: "C√° m√®", emoji: "üêü", rarity: "common", minValue: 15, maxValue: 60, chance: 10 },

    // C√° hi·∫øm (20-25%)
    { name: "C√° l√≥c", emoji: "üê†", rarity: "rare", minValue: 100, maxValue: 300, chance: 8 },
    { name: "C√° tr√™", emoji: "üê†", rarity: "rare", minValue: 150, maxValue: 400, chance: 7 },
    { name: "C√° qu·∫£", emoji: "üê†", rarity: "rare", minValue: 200, maxValue: 500, chance: 6 },
    { name: "C√° ch√¨nh", emoji: "üê†", rarity: "rare", minValue: 300, maxValue: 800, chance: 4 },

    // C√° qu√Ω hi·∫øm (8-12%)
    { name: "C√° t·∫ßm", emoji: "ü¶à", rarity: "epic", minValue: 500, maxValue: 1500, chance: 3 },
    { name: "C√° h·ªìi", emoji: "ü¶à", rarity: "epic", minValue: 800, maxValue: 2000, chance: 2.5 },
    { name: "C√° ng·ª´", emoji: "ü¶à", rarity: "epic", minValue: 1000, maxValue: 3000, chance: 2 },
    { name: "C√° m·∫≠p", emoji: "ü¶à", rarity: "epic", minValue: 2000, maxValue: 5000, chance: 1.5 },

    // C√° huy·ªÅn tho·∫°i (1-3%)
    { name: "C√° voi", emoji: "üêã", rarity: "legendary", minValue: 5000, maxValue: 15000, chance: 0.8 },
    { name: "C√° m·ª±c kh·ªïng l·ªì", emoji: "ü¶ë", rarity: "legendary", minValue: 8000, maxValue: 20000, chance: 0.6 },
    { name: "C√° r·ªìng bi·ªÉn", emoji: "üêâ", rarity: "legendary", minValue: 15000, maxValue: 50000, chance: 0.4 },
    { name: "C√° th·∫ßn", emoji: "‚ú®", rarity: "legendary", minValue: 50000, maxValue: 100000, chance: 0.2 },
];

// Danh s√°ch c·∫ßn c√¢u
export const FISHING_RODS: Record<string, FishingRod> = {
    "basic": { name: "C·∫ßn c√¢u c∆° b·∫£n", emoji: "üé£", price: 100, rarityBonus: 0, durability: 10, description: "C·∫ßn c√¢u c∆° b·∫£n, ƒë·ªô b·ªÅn th·∫•p" },
    "copper": { name: "C·∫ßn c√¢u ƒë·ªìng", emoji: "üé£", price: 1000, rarityBonus: 10, durability: 25, description: "TƒÉng 10% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn trung b√¨nh" },
    "silver": { name: "C·∫ßn c√¢u b·∫°c", emoji: "üé£", price: 5000, rarityBonus: 20, durability: 50, description: "TƒÉng 20% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn cao" },
    "gold": { name: "C·∫ßn c√¢u v√†ng", emoji: "üé£", price: 15000, rarityBonus: 35, durability: 100, description: "TƒÉng 35% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn r·∫•t cao" },
    "diamond": { name: "C·∫ßn c√¢u kim c∆∞∆°ng", emoji: "üíé", price: 50000, rarityBonus: 50, durability: 200, description: "TƒÉng 50% t·ª∑ l·ªá hi·∫øm, ƒë·ªô b·ªÅn t·ªëi ƒëa" },
};

// Danh s√°ch m·ªìi
export const BAITS: Record<string, Bait> = {
    "basic": { name: "M·ªìi c∆° b·∫£n", emoji: "ü™±", price: 10, rarityBonus: 0, description: "M·ªìi c∆° b·∫£n, t·ª∑ l·ªá th∆∞·ªùng" },
    "good": { name: "M·ªìi ngon", emoji: "ü¶ê", price: 50, rarityBonus: 15, description: "TƒÉng 15% t·ª∑ l·ªá hi·∫øm" },
    "premium": { name: "M·ªìi th∆∞·ª£ng h·∫°ng", emoji: "ü¶Ä", price: 200, rarityBonus: 30, description: "TƒÉng 30% t·ª∑ l·ªá hi·∫øm" },
    "divine": { name: "M·ªìi th·∫ßn", emoji: "üåü", price: 1000, rarityBonus: 50, description: "TƒÉng 50% t·ª∑ l·ªá hi·∫øm" },
};

// Cooldown cho c√¢u c√° (30 gi√¢y)
const FISHING_COOLDOWN = 30000;

// Chi ph√≠ m·ªói l·∫ßn c√¢u
const FISHING_COST = 10;

export class FishingService {
    /**
     * L·∫•y ho·∫∑c t·∫°o fishing data cho ng∆∞·ªùi d√πng
     */
    static async getFishingData(userId: string, guildId: string) {
        try {
            const fishingData = await prisma.fishingData.upsert({
                where: {
                    userId_guildId: {
                        userId,
                        guildId
                    }
                },
                update: {},
                create: {
                    userId,
                    guildId,
                    totalFish: 0,
                    totalEarnings: 0,
                    biggestFish: "",
                    biggestValue: 0,
                    rarestFish: "",
                    rarestRarity: "",
                    fishingTime: 0,
                    currentRod: "basic",
                    currentBait: "basic",
                    lastFished: new Date(0) // Cho ph√©p c√¢u ngay l·∫≠p t·ª©c
                },
                include: {
                    rods: true,
                    baits: true,
                    fish: true
                }
            });

            return fishingData;
        } catch (error) {
            console.error("Error getting fishing data:", error);
            throw error;
        }
    }

    /**
     * Ki·ªÉm tra c√≥ th·ªÉ c√¢u c√° kh√¥ng
     */
    static async canFish(userId: string, guildId: string): Promise<{ canFish: boolean; remainingTime: number }> {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const now = new Date();
            const timeSinceLastFish = now.getTime() - fishingData.lastFished.getTime();

            if (timeSinceLastFish < FISHING_COOLDOWN) {
                return {
                    canFish: false,
                    remainingTime: FISHING_COOLDOWN - timeSinceLastFish
                };
            }

            return { canFish: true, remainingTime: 0 };
        } catch (error) {
            console.error("Error checking fishing cooldown:", error);
            return { canFish: false, remainingTime: FISHING_COOLDOWN };
        }
    }

    /**
     * C√¢u c√°
     */
    static async fish(userId: string, guildId: string) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            
            // Ki·ªÉm tra cooldown
            const cooldownCheck = await this.canFish(userId, guildId);
            if (!cooldownCheck.canFish) {
                throw new Error(`B·∫°n c·∫ßn ƒë·ª£i ${Math.ceil(cooldownCheck.remainingTime / 1000)} gi√¢y n·ªØa ƒë·ªÉ c√¢u c√°!`);
            }

            // Ki·ªÉm tra s·ªë d∆∞
            const balance = await prisma.user.findUnique({
                where: { userId_guildId: { userId, guildId } }
            });

            if (!balance || balance.balance < FISHING_COST) {
                throw new Error(`B·∫°n c·∫ßn √≠t nh·∫•t ${FISHING_COST} AniCoin ƒë·ªÉ c√¢u c√°!`);
            }

            // Tr·ª´ ti·ªÅn c√¢u c√°
            await prisma.user.update({
                where: { userId_guildId: { userId, guildId } },
                data: { balance: { decrement: FISHING_COST } }
            });

            // Ch·ªçn c√° ng·∫´u nhi√™n
            const fish = this.getRandomFish(fishingData);
            const fishValue = Math.floor(Math.random() * (fish.maxValue - fish.minValue + 1)) + fish.minValue;

            // C·∫≠p nh·∫≠t fishing data
            const updatedFishingData = await prisma.fishingData.update({
                where: { id: fishingData.id },
                data: {
                    totalFish: { increment: 1 },
                    totalEarnings: { increment: fishValue },
                    fishingTime: { increment: 1 },
                    lastFished: new Date()
                },
                include: {
                    rods: true,
                    baits: true,
                    fish: true
                }
            });

            // C·∫≠p nh·∫≠t biggest fish n·∫øu c·∫ßn
            if (fishValue > fishingData.biggestValue) {
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: {
                        biggestFish: fish.name,
                        biggestValue: fishValue
                    }
                });
            }

            // C·∫≠p nh·∫≠t rarest fish n·∫øu c·∫ßn
            if (this.getRarityValue(fish.rarity) > this.getRarityValue(fishingData.rarestRarity)) {
                await prisma.fishingData.update({
                    where: { id: fishingData.id },
                    data: {
                        rarestFish: fish.name,
                        rarestRarity: fish.rarity
                    }
                });
            }

            // Th√™m c√° v√†o inventory
            await prisma.caughtFish.upsert({
                where: {
                    fishingDataId_fishName: {
                        fishingDataId: fishingData.id,
                        fishName: fish.name
                    }
                },
                update: {
                    quantity: { increment: 1 },
                    fishValue: fishValue // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi nh·∫•t
                },
                create: {
                    fishingDataId: fishingData.id,
                    fishName: fish.name,
                    fishRarity: fish.rarity,
                    fishValue: fishValue,
                    quantity: 1
                }
            });

            // Gi·∫£m ƒë·ªô b·ªÅn c·∫ßn c√¢u
            const currentRod = fishingData.rods.find(r => r.rodType === fishingData.currentRod);
            if (currentRod && currentRod.durability > 0) {
                await prisma.fishingRod.update({
                    where: { id: currentRod.id },
                    data: { durability: { decrement: 1 } }
                });

                // N·∫øu c·∫ßn c√¢u h·∫øt ƒë·ªô b·ªÅn, chuy·ªÉn v·ªÅ c·∫ßn c∆° b·∫£n
                if (currentRod.durability <= 1) {
                    await prisma.fishingData.update({
                        where: { id: fishingData.id },
                        data: { currentRod: "basic" }
                    });
                }
            }

            // Gi·∫£m s·ªë l∆∞·ª£ng m·ªìi
            const currentBait = fishingData.baits.find(b => b.baitType === fishingData.currentBait);
            if (currentBait && currentBait.quantity > 0) {
                await prisma.fishingBait.update({
                    where: { id: currentBait.id },
                    data: { quantity: { decrement: 1 } }
                });

                // N·∫øu h·∫øt m·ªìi, chuy·ªÉn v·ªÅ m·ªìi c∆° b·∫£n
                if (currentBait.quantity <= 0) {
                    await prisma.fishingData.update({
                        where: { id: fishingData.id },
                        data: { currentBait: "basic" }
                    });
                }
            }

            return {
                fish,
                value: fishValue,
                newBalance: balance.balance - FISHING_COST + fishValue
            };
        } catch (error) {
            console.error("Error fishing:", error);
            throw error;
        }
    }

    /**
     * Mua c·∫ßn c√¢u
     */
    static async buyRod(userId: string, guildId: string, rodType: string) {
        try {
            const rod = FISHING_RODS[rodType];
            if (!rod) {
                throw new Error("Lo·∫°i c·∫ßn c√¢u kh√¥ng h·ª£p l·ªá!");
            }

            const user = await prisma.user.findUnique({
                where: { userId_guildId: { userId, guildId } }
            });

            if (!user || user.balance < rod.price) {
                throw new Error(`Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${rod.price} AniCoin`);
            }

            const fishingData = await this.getFishingData(userId, guildId);

            // Ki·ªÉm tra ƒë√£ c√≥ c·∫ßn c√¢u n√†y ch∆∞a
            const existingRod = fishingData.rods.find(r => r.rodType === rodType);
            if (existingRod) {
                throw new Error("B·∫°n ƒë√£ c√≥ c·∫ßn c√¢u n√†y r·ªìi!");
            }

            // Tr·ª´ ti·ªÅn v√† th√™m c·∫ßn c√¢u
            await prisma.$transaction(async (tx: any) => {
                await tx.user.update({
                    where: { userId_guildId: { userId, guildId } },
                    data: { balance: { decrement: rod.price } }
                });

                await tx.fishingRod.create({
                    data: {
                        fishingDataId: fishingData.id,
                        rodType,
                        durability: rod.durability
                    }
                });
            });

            return rod;
        } catch (error) {
            console.error("Error buying rod:", error);
            throw error;
        }
    }

    /**
     * Mua m·ªìi
     */
    static async buyBait(userId: string, guildId: string, baitType: string, quantity: number = 1) {
        try {
            const bait = BAITS[baitType];
            if (!bait) {
                throw new Error("Lo·∫°i m·ªìi kh√¥ng h·ª£p l·ªá!");
            }

            const totalCost = bait.price * quantity;
            const user = await prisma.user.findUnique({
                where: { userId_guildId: { userId, guildId } }
            });

            if (!user || user.balance < totalCost) {
                throw new Error(`Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalCost} AniCoin`);
            }

            const fishingData = await this.getFishingData(userId, guildId);

            // Tr·ª´ ti·ªÅn v√† th√™m m·ªìi
            await prisma.$transaction(async (tx: any) => {
                await tx.user.update({
                    where: { userId_guildId: { userId, guildId } },
                    data: { balance: { decrement: totalCost } }
                });

                await tx.fishingBait.upsert({
                    where: {
                        fishingDataId_baitType: {
                            fishingDataId: fishingData.id,
                            baitType
                        }
                    },
                    update: {
                        quantity: { increment: quantity }
                    },
                    create: {
                        fishingDataId: fishingData.id,
                        baitType,
                        quantity
                    }
                });
            });

            return { bait, quantity, totalCost };
        } catch (error) {
            console.error("Error buying bait:", error);
            throw error;
        }
    }

    /**
     * B√°n c√°
     */
    static async sellFish(userId: string, guildId: string, fishName: string, quantity: number = 1) {
        try {
            const fishingData = await this.getFishingData(userId, guildId);
            const caughtFish = fishingData.fish.find(f => f.fishName === fishName);

            if (!caughtFish) {
                throw new Error("B·∫°n kh√¥ng c√≥ c√° n√†y!");
            }

            if (caughtFish.quantity < quantity) {
                throw new Error(`B·∫°n ch·ªâ c√≥ ${caughtFish.quantity} con ${fishName}!`);
            }

            const totalValue = caughtFish.fishValue * quantity;

            // C·ªông ti·ªÅn v√† tr·ª´ c√°
            await prisma.$transaction(async (tx: any) => {
                await tx.user.update({
                    where: { userId_guildId: { userId, guildId } },
                    data: { balance: { increment: totalValue } }
                });

                if (caughtFish.quantity === quantity) {
                    await tx.caughtFish.delete({
                        where: { id: caughtFish.id }
                    });
                } else {
                    await tx.caughtFish.update({
                        where: { id: caughtFish.id },
                        data: { quantity: { decrement: quantity } }
                    });
                }
            });

            return { fishName, quantity, totalValue };
        } catch (error) {
            console.error("Error selling fish:", error);
            throw error;
        }
    }

    /**
     * Ch·ªçn c√° ng·∫´u nhi√™n d·ª±a tr√™n c·∫ßn c√¢u v√† m·ªìi
     */
    private static getRandomFish(fishingData: any): Fish {
        const rod = FISHING_RODS[fishingData.currentRod];
        const bait = BAITS[fishingData.currentBait];
        const totalBonus = rod.rarityBonus + bait.rarityBonus;

        // T·∫°o danh s√°ch c√° v·ªõi t·ª∑ l·ªá ƒë√£ ƒëi·ªÅu ch·ªânh
        const adjustedFish = FISH_LIST.map(fish => {
            let adjustedChance = fish.chance;
            
            // TƒÉng t·ª∑ l·ªá cho c√° hi·∫øm h∆°n d·ª±a tr√™n bonus
            if (fish.rarity === "rare") {
                adjustedChance += totalBonus * 0.5;
            } else if (fish.rarity === "epic") {
                adjustedChance += totalBonus * 0.3;
            } else if (fish.rarity === "legendary") {
                adjustedChance += totalBonus * 0.1;
            }

            return { ...fish, adjustedChance };
        });

        // Ch·ªçn c√° ng·∫´u nhi√™n d·ª±a tr√™n t·ª∑ l·ªá
        const totalChance = adjustedFish.reduce((sum, fish) => sum + fish.adjustedChance, 0);
        let random = Math.random() * totalChance;

        for (const fish of adjustedFish) {
            random -= fish.adjustedChance;
            if (random <= 0) {
                return fish;
            }
        }

        // Fallback v·ªÅ c√° th∆∞·ªùng
        return FISH_LIST[0];
    }

    /**
     * L·∫•y gi√° tr·ªã rarity ƒë·ªÉ so s√°nh
     */
    private static getRarityValue(rarity: string): number {
        switch (rarity) {
            case "common": return 1;
            case "rare": return 2;
            case "epic": return 3;
            case "legendary": return 4;
            default: return 0;
        }
    }
} 