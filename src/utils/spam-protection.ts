import { EmbedBuilder } from "discord.js";
import { spamProtectionConfig, spamCommands, spamMessages, SpamRecord } from "@/config/spam-protection";

export class SpamProtectionService {
  private static instance: SpamProtectionService;
  private spamRecords: Map<string, SpamRecord> = new Map();

  private constructor() {}

  public static getInstance(): SpamProtectionService {
    if (!SpamProtectionService.instance) {
      SpamProtectionService.instance = new SpamProtectionService();
    }
    return SpamProtectionService.instance;
  }

  /**
   * Ki·ªÉm tra spam cho m·ªôt l·ªánh
   */
  checkSpam(userId: string, guildId: string, command: string): {
    allowed: boolean;
    reason?: string;
    cooldown?: number;
    embed?: EmbedBuilder;
    toolSpamDetected?: boolean;
    pattern?: string;
    extendedSpamDetected?: boolean;
  } {
    if (!spamProtectionConfig.enabled) {
      return { allowed: true };
    }

    const commandConfig = this.getCommandConfig(command);
    if (!commandConfig) {
      return { allowed: true };
    }

    const recordKey = `${userId}-${guildId}-${command}`;
    const now = Date.now();
    const record = this.spamRecords.get(recordKey);

    // N·∫øu ch∆∞a c√≥ record, t·∫°o m·ªõi
    if (!record) {
      this.spamRecords.set(recordKey, {
        userId,
        guildId,
        command,
        timestamp: now,
        attempts: 1,
        warnings: 0,
        isBanned: false,
        timeIntervals: [],
        toolSpamWarnings: 0,
        isToolSpamBanned: false,
        extendedAttempts: 1,
        extendedWarnings: 0,
        isExtendedSpamBanned: false,
        extendedAttemptsHistory: [now],
        extendedTimeIntervals: [],
        frequencySpamWarnings: 0,
        isFrequencySpamBanned: false,
      });
      return { allowed: true };
    }

    // Ki·ªÉm tra extended spam ban
    if (record.isExtendedSpamBanned && record.extendedSpamBanExpiresAt && now < record.extendedSpamBanExpiresAt) {
      const remainingBan = Math.ceil((record.extendedSpamBanExpiresAt - now) / 60000);
      const embed = new EmbedBuilder()
        .setTitle("üìä B·ªã T·∫°m Kh√≥a Extended Spam")
        .setDescription(
          `B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a do spam l·ªánh \`${command}\` qu√° nhi·ªÅu l·∫ßn trong 5 ph√∫t!\n\n` +
          `‚è∞ **Th·ªùi gian c√≤n l·∫°i:** ${remainingBan} ph√∫t\n` +
          `üìä **S·ªë l·∫ßn vi ph·∫°m:** ${record.extendedAttempts}/20\n` +
          `‚ö†Ô∏è **Extended spam c·∫£nh c√°o:** ${record.extendedWarnings} l·∫ßn\n` +
          `üîç **L√Ω do:** V∆∞·ª£t qu√° 20 l·∫ßn trong 5 ph√∫t`
        )
        .setColor("#ff0000")
        .setTimestamp();

      return {
        allowed: false,
        reason: "extended_spam_banned",
        embed,
      };
    }

    // Ki·ªÉm tra frequency spam ban
    if (record.isFrequencySpamBanned && record.frequencySpamBanExpiresAt && now < record.frequencySpamBanExpiresAt) {
      const remainingBan = Math.ceil((record.frequencySpamBanExpiresAt - now) / 60000);
      const embed = new EmbedBuilder()
        .setTitle("‚è±Ô∏è B·ªã T·∫°m Kh√≥a Frequency Spam")
        .setDescription(
          `B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a do t·∫ßn su·∫•t spam l·ªánh \`${command}\` t·ª± ƒë·ªông trong 5 ph√∫t!\n\n` +
          `‚è∞ **Th·ªùi gian c√≤n l·∫°i:** ${remainingBan} ph√∫t\n` +
          `üìä **S·ªë l·∫ßn vi ph·∫°m:** ${record.extendedAttempts}/20\n` +
          `‚è±Ô∏è **Frequency spam c·∫£nh c√°o:** ${record.frequencySpamWarnings} l·∫ßn\n` +
          `üîç **L√Ω do:** T·∫ßn su·∫•t spam t·ª± ƒë·ªông trong 5 ph√∫t`
        )
        .setColor("#ff0000")
        .setTimestamp();

      return {
        allowed: false,
        reason: "frequency_spam_banned",
        embed,
      };
    }

    // Ki·ªÉm tra tool spam ban
    if (record.isToolSpamBanned && record.toolSpamBanExpiresAt && now < record.toolSpamBanExpiresAt) {
      const remainingBan = Math.ceil((record.toolSpamBanExpiresAt - now) / 60000);
      const embed = new EmbedBuilder()
        .setTitle("ü§ñ B·ªã T·∫°m Kh√≥a Tool Spam")
        .setDescription(
          `B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a do s·ª≠ d·ª•ng tool spam l·ªánh \`${command}\`!\n\n` +
          `‚è∞ **Th·ªùi gian c√≤n l·∫°i:** ${remainingBan} ph√∫t\n` +
          `üìä **S·ªë l·∫ßn vi ph·∫°m:** ${record.attempts}\n` +
          `ü§ñ **Tool spam c·∫£nh c√°o:** ${record.toolSpamWarnings} l·∫ßn\n` +
          `üîç **Pattern ph√°t hi·ªán:** Tool spam t·ª± ƒë·ªông`
        )
        .setColor("#ff0000")
        .setTimestamp();

      return {
        allowed: false,
        reason: "tool_spam_banned",
        embed,
      };
    }

    // Ki·ªÉm tra ban th∆∞·ªùng
    if (record.isBanned && record.banExpiresAt && now < record.banExpiresAt) {
      const remainingBan = Math.ceil((record.banExpiresAt - now) / 60000);
      const embed = new EmbedBuilder()
        .setTitle("üî® B·ªã T·∫°m Kh√≥a")
        .setDescription(
          `B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a do spam l·ªánh \`${command}\`!\n\n` +
          `‚è∞ **Th·ªùi gian c√≤n l·∫°i:** ${remainingBan} ph√∫t\n` +
          `üìä **S·ªë l·∫ßn vi ph·∫°m:** ${record.attempts}\n` +
          `‚ö†Ô∏è **C·∫£nh c√°o:** ${record.warnings} l·∫ßn`
        )
        .setColor("#ff0000")
        .setTimestamp();

      return {
        allowed: false,
        reason: "banned",
        embed,
      };
    }

    // C·∫≠p nh·∫≠t extended attempts history
    record.extendedAttemptsHistory.push(now);

    // T√≠nh th·ªùi gian gi·ªØa c√°c l·∫ßn th·ª≠ trong extended window
    if (record.extendedAttemptsHistory.length > 1) {
      const lastAttempt = record.extendedAttemptsHistory[record.extendedAttemptsHistory.length - 2];
      const timeSinceLastExtendedAttempt = (now - lastAttempt) / 1000;
      record.extendedTimeIntervals.push(timeSinceLastExtendedAttempt);
    }

    // Ki·ªÉm tra extended spam monitoring
    const extendedSpamResult = this.checkExtendedSpam(record, now);
    if (extendedSpamResult.detected) {
      record.extendedWarnings++;
      
      // Ki·ªÉm tra c√≥ n√™n ban extended spam kh√¥ng
      if (record.extendedWarnings >= spamProtectionConfig.extendedSpamMonitoring.banThreshold) {
        record.isExtendedSpamBanned = true;
        record.extendedSpamBanExpiresAt = now + (spamProtectionConfig.extendedSpamMonitoring.banDuration * 60 * 1000);

        const embed = new EmbedBuilder()
          .setTitle("üìä B·ªã T·∫°m Kh√≥a Extended Spam")
          .setDescription(
            spamMessages.extendedSpamBan
              .replace("{command}", command)
              .replace("{duration}", spamProtectionConfig.extendedSpamMonitoring.banDuration.toString())
          )
          .addFields({
            name: "üìä Th·ªëng K√™ Extended Spam",
            value: `${record.extendedAttempts} l·∫ßn trong 5 ph√∫t`,
            inline: false
          })
          .setColor("#ff0000")
          .setTimestamp();

        this.spamRecords.set(recordKey, record);
        return {
          allowed: false,
          reason: "extended_spam_banned",
          embed,
          extendedSpamDetected: true,
        };
      }

      // C·∫£nh c√°o extended spam
      const embed = new EmbedBuilder()
        .setTitle("üìä C·∫£nh C√°o Extended Spam")
        .setDescription(
          spamMessages.extendedSpamWarning
            .replace("{attempts}", record.extendedAttempts.toString())
            .replace("{command}", command)
        )
        .addFields({
          name: "üìä Th·ªëng K√™ Extended Spam",
          value: `${record.extendedAttempts} l·∫ßn trong 5 ph√∫t`,
          inline: false
        })
        .setColor("#ffa500")
        .setTimestamp();

      this.spamRecords.set(recordKey, record);
      return {
        allowed: false,
        reason: "extended_spam_warning",
        embed,
        extendedSpamDetected: true,
      };
    }

    // Ki·ªÉm tra frequency spam trong extended window
    const frequencySpamResult = this.detectFrequencySpam(record);
    if (frequencySpamResult.detected) {
      record.frequencySpamWarnings++;
      
      // Ki·ªÉm tra c√≥ n√™n ban frequency spam kh√¥ng
      if (record.frequencySpamWarnings >= spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.patternThreshold) {
        record.isFrequencySpamBanned = true;
        record.frequencySpamBanExpiresAt = now + (spamProtectionConfig.extendedSpamMonitoring.banDuration * 60 * 1000);

        const embed = new EmbedBuilder()
          .setTitle("‚è±Ô∏è B·ªã T·∫°m Kh√≥a Frequency Spam")
          .setDescription(
            spamMessages.frequencySpamBan
              .replace("{command}", command)
              .replace("{duration}", spamProtectionConfig.extendedSpamMonitoring.banDuration.toString())
          )
          .addFields({
            name: "‚è±Ô∏è Th·ªëng K√™ Frequency Spam",
            value: `Pattern: ${frequencySpamResult.pattern} gi√¢y ¬± ${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.timeTolerance} gi√¢y trong 5 ph√∫t`,
            inline: false
          })
          .setColor("#ff0000")
          .setTimestamp();

        this.spamRecords.set(recordKey, record);
        return {
          allowed: false,
          reason: "frequency_spam_banned",
          embed,
          frequencySpamDetected: true,
          pattern: frequencySpamResult.pattern.toString(),
        };
      }

      // C·∫£nh c√°o frequency spam
      const embed = new EmbedBuilder()
        .setTitle("‚è±Ô∏è C·∫£nh C√°o Frequency Spam")
        .setDescription(
          spamMessages.frequencySpamWarning
        )
        .addFields({
          name: "‚è±Ô∏è Th·ªëng K√™ Frequency Spam",
          value: `Pattern: ${frequencySpamResult.pattern} gi√¢y ¬± ${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.timeTolerance} gi√¢y trong 5 ph√∫t`,
          inline: false
        })
        .setColor("#ffa500")
        .setTimestamp();

      this.spamRecords.set(recordKey, record);
      return {
        allowed: false,
        reason: "frequency_spam_warning",
        embed,
        frequencySpamDetected: true,
        pattern: frequencySpamResult.pattern.toString(),
      };
    }

    // Ki·ªÉm tra tool spam pattern
    const toolSpamResult = this.detectToolSpam(record);
    if (toolSpamResult.detected) {
      record.toolSpamWarnings++;
      
      // Ki·ªÉm tra c√≥ n√™n ban tool spam kh√¥ng
      if (record.toolSpamWarnings >= spamProtectionConfig.toolSpamDetection.patternThreshold) {
        record.isToolSpamBanned = true;
        record.toolSpamBanExpiresAt = now + (spamProtectionConfig.toolSpamDetection.banDuration * 60 * 1000);

        const embed = new EmbedBuilder()
          .setTitle("ü§ñ B·ªã T·∫°m Kh√≥a Tool Spam")
          .setDescription(
            spamMessages.toolSpamBan
              .replace("{command}", command)
              .replace("{duration}", spamProtectionConfig.toolSpamDetection.banDuration.toString())
          )
          .addFields({
            name: "üîç Pattern Ph√°t Hi·ªán",
            value: `Pattern: ${toolSpamResult.pattern} gi√¢y ¬± ${spamProtectionConfig.toolSpamDetection.timeTolerance} gi√¢y`,
            inline: false
          })
          .setColor("#ff0000")
          .setTimestamp();

        this.spamRecords.set(recordKey, record);
        return {
          allowed: false,
          reason: "tool_spam_banned",
          embed,
          toolSpamDetected: true,
          pattern: toolSpamResult.pattern.toString(),
        };
      }

      // C·∫£nh c√°o tool spam
      const embed = new EmbedBuilder()
        .setTitle("ü§ñ C·∫£nh C√°o Tool Spam")
        .setDescription(
          spamMessages.toolSpamWarning
        )
        .addFields({
          name: "üîç Pattern Ph√°t Hi·ªán",
          value: `Pattern: ${toolSpamResult.pattern} gi√¢y ¬± ${spamProtectionConfig.toolSpamDetection.timeTolerance} gi√¢y`,
          inline: false
        })
        .setColor("#ffa500")
        .setTimestamp();

      this.spamRecords.set(recordKey, record);
      return {
        allowed: false,
        reason: "tool_spam_warning",
        embed,
        toolSpamDetected: true,
        pattern: toolSpamResult.pattern.toString(),
      };
    }

    // Ki·ªÉm tra cooldown
    const timeSinceLastAttempt = (now - record.timestamp) / 1000;
    if (timeSinceLastAttempt < commandConfig.cooldown) {
      const remainingCooldown = Math.ceil(commandConfig.cooldown - timeSinceLastAttempt);
      const embed = new EmbedBuilder()
        .setTitle("‚è∞ Cooldown")
        .setDescription(
          spamMessages.cooldown
            .replace("{time}", remainingCooldown.toString())
            .replace("{command}", command)
        )
        .setColor("#ffa500")
        .setTimestamp();

      return {
        allowed: false,
        reason: "cooldown",
        cooldown: remainingCooldown,
        embed,
      };
    }

    // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠ trong timeWindow
    const timeWindowStart = now - (commandConfig.timeWindow * 1000);
    if (record.timestamp < timeWindowStart) {
      // Reset record n·∫øu ƒë√£ qua timeWindow
      record.attempts = 1;
      record.timestamp = now;
      record.timeIntervals = [];
      this.spamRecords.set(recordKey, record);
      return { allowed: true };
    }

    // TƒÉng s·ªë l·∫ßn th·ª≠
    record.attempts++;
    record.timestamp = now;

    // Ki·ªÉm tra v∆∞·ª£t qu√° gi·ªõi h·∫°n
    if (record.attempts > commandConfig.maxAttempts) {
      record.warnings++;
      
      // Ki·ªÉm tra c√≥ n√™n ban kh√¥ng
      if (record.warnings >= spamProtectionConfig.banThreshold) {
        record.isBanned = true;
        record.banExpiresAt = now + (30 * 60 * 1000); // Ban 30 ph√∫t

        const embed = new EmbedBuilder()
          .setTitle("üî® B·ªã T·∫°m Kh√≥a")
          .setDescription(
            spamMessages.ban
              .replace("{command}", command)
              .replace("{duration}", "30")
          )
          .setColor("#ff0000")
          .setTimestamp();

        this.spamRecords.set(recordKey, record);
        return {
          allowed: false,
          reason: "banned",
          embed,
        };
      }

      // C·∫£nh c√°o
      const embed = new EmbedBuilder()
        .setTitle("‚ö†Ô∏è C·∫£nh C√°o Spam")
        .setDescription(
          spamMessages.warning
            .replace("{attempts}", record.attempts.toString())
            .replace("{command}", command)
        )
        .setColor("#ffa500")
        .setTimestamp();

      this.spamRecords.set(recordKey, record);
      return {
        allowed: false,
        reason: "warning",
        embed,
      };
    }

    this.spamRecords.set(recordKey, record);
    return { allowed: true };
  }

  /**
   * Ki·ªÉm tra extended spam monitoring
   */
  private checkExtendedSpam(record: SpamRecord, now: number): {
    detected: boolean;
  } {
    if (!spamProtectionConfig.extendedSpamMonitoring.enabled) {
      return { detected: false };
    }

    const { timeWindow, maxAttempts, warningThreshold } = spamProtectionConfig.extendedSpamMonitoring;

    // L·ªçc c√°c l·∫ßn th·ª≠ trong extended timeWindow
    const extendedWindowStart = now - (timeWindow * 1000);
    const recentAttempts = record.extendedAttemptsHistory.filter(timestamp => timestamp >= extendedWindowStart);
    
    // C·∫≠p nh·∫≠t extended attempts
    record.extendedAttempts = recentAttempts.length;

    // Ki·ªÉm tra c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n kh√¥ng
    if (record.extendedAttempts > maxAttempts) {
      return { detected: true };
    }

    // Ki·ªÉm tra c√≥ ƒë·ªß l·∫ßn ƒë·ªÉ c·∫£nh c√°o kh√¥ng
    if (record.extendedAttempts >= warningThreshold) {
      return { detected: true };
    }

    return { detected: false };
  }

  /**
   * Ph√°t hi·ªán frequency spam d·ª±a tr√™n pattern th·ªùi gian
   */
  private detectFrequencySpam(record: SpamRecord): {
    detected: boolean;
    pattern?: number;
  } {
    if (!spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.enabled) {
      return { detected: false };
    }

    const { minAttempts, timeTolerance, patternThreshold } = spamProtectionConfig.extendedSpamMonitoring.frequencyDetection;

    // C·∫ßn √≠t nh·∫•t minAttempts l·∫ßn ƒë·ªÉ ph√°t hi·ªán pattern
    if (record.extendedTimeIntervals.length < minAttempts) {
      return { detected: false };
    }

    // T√¨m pattern ph·ªï bi·∫øn nh·∫•t
    const patterns = this.findTimePatterns(record.extendedTimeIntervals, timeTolerance);
    
    if (patterns.length === 0) {
      return { detected: false };
    }

    // Ki·ªÉm tra xem c√≥ pattern n√†o xu·∫•t hi·ªán ƒë·ªß s·ªë l·∫ßn kh√¥ng
    for (const pattern of patterns) {
      if (pattern.count >= patternThreshold) {
        return {
          detected: true,
          pattern: pattern.interval,
        };
      }
    }

    return { detected: false };
  }

  /**
   * Ph√°t hi·ªán tool spam d·ª±a tr√™n pattern th·ªùi gian
   */
  private detectToolSpam(record: SpamRecord): {
    detected: boolean;
    pattern?: number;
  } {
    if (!spamProtectionConfig.toolSpamDetection.enabled) {
      return { detected: false };
    }

    const { minAttempts, timeTolerance, patternThreshold } = spamProtectionConfig.toolSpamDetection;

    // C·∫ßn √≠t nh·∫•t minAttempts l·∫ßn ƒë·ªÉ ph√°t hi·ªán pattern
    if (record.timeIntervals.length < minAttempts) {
      return { detected: false };
    }

    // T√¨m pattern ph·ªï bi·∫øn nh·∫•t
    const patterns = this.findTimePatterns(record.timeIntervals, timeTolerance);
    
    if (patterns.length === 0) {
      return { detected: false };
    }

    // Ki·ªÉm tra xem c√≥ pattern n√†o xu·∫•t hi·ªán ƒë·ªß s·ªë l·∫ßn kh√¥ng
    for (const pattern of patterns) {
      if (pattern.count >= patternThreshold) {
        return {
          detected: true,
          pattern: pattern.interval,
        };
      }
    }

    return { detected: false };
  }

  /**
   * T√¨m c√°c pattern th·ªùi gian trong danh s√°ch intervals
   */
  private findTimePatterns(intervals: number[], tolerance: number): Array<{
    interval: number;
    count: number;
  }> {
    const patterns: Map<number, number> = new Map();

    for (const interval of intervals) {
      // L√†m tr√≤n interval theo tolerance
      const roundedInterval = Math.round(interval / tolerance) * tolerance;
      
      if (patterns.has(roundedInterval)) {
        patterns.set(roundedInterval, patterns.get(roundedInterval)! + 1);
      } else {
        patterns.set(roundedInterval, 1);
      }
    }

    // Chuy·ªÉn th√†nh array v√† s·∫Øp x·∫øp theo count gi·∫£m d·∫ßn
    return Array.from(patterns.entries())
      .map(([interval, count]) => ({ interval, count }))
      .sort((a, b) => b.count - a.count);
  }

  /**
   * L·∫•y c·∫•u h√¨nh cho command
   */
  private getCommandConfig(command: string) {
    for (const [key, config] of Object.entries(spamCommands)) {
      if (config.name === command || config.aliases.includes(command)) {
        return config;
      }
    }
    return null;
  }

  /**
   * Reset spam record cho user
   */
  resetSpamRecord(userId: string, guildId: string, command: string): boolean {
    const recordKey = `${userId}-${guildId}-${command}`;
    return this.spamRecords.delete(recordKey);
  }

  /**
   * Unban user
   */
  unbanUser(userId: string, guildId: string, command: string): boolean {
    const recordKey = `${userId}-${guildId}-${command}`;
    const record = this.spamRecords.get(recordKey);
    
    if (record) {
      let changed = false;
      
      if (record.isBanned) {
        record.isBanned = false;
        record.banExpiresAt = undefined;
        record.warnings = Math.max(0, record.warnings - 1);
        changed = true;
      }
      
      if (record.isToolSpamBanned) {
        record.isToolSpamBanned = false;
        record.toolSpamBanExpiresAt = undefined;
        record.toolSpamWarnings = Math.max(0, record.toolSpamWarnings - 1);
        changed = true;
      }
      
      if (record.isExtendedSpamBanned) {
        record.isExtendedSpamBanned = false;
        record.extendedSpamBanExpiresAt = undefined;
        record.extendedWarnings = Math.max(0, record.extendedWarnings - 1);
        changed = true;
      }
      
      if (record.isFrequencySpamBanned) {
        record.isFrequencySpamBanned = false;
        record.frequencySpamBanExpiresAt = undefined;
        record.frequencySpamWarnings = Math.max(0, record.frequencySpamWarnings - 1);
        changed = true;
      }
      
      if (changed) {
        this.spamRecords.set(recordKey, record);
        return true;
      }
    }
    
    return false;
  }

  /**
   * L·∫•y th·ªëng k√™ spam cho user
   */
  getSpamStats(userId: string, guildId: string, command: string): SpamRecord | null {
    const recordKey = `${userId}-${guildId}-${command}`;
    return this.spamRecords.get(recordKey) || null;
  }

  /**
   * L·∫•y t·∫•t c·∫£ spam records
   */
  getAllSpamRecords(): SpamRecord[] {
    return Array.from(this.spamRecords.values());
  }

  /**
   * L·∫•y spam records theo guild
   */
  getSpamRecordsByGuild(guildId: string): SpamRecord[] {
    return Array.from(this.spamRecords.values()).filter(
      record => record.guildId === guildId
    );
  }

  /**
   * L·∫•y spam records theo user
   */
  getSpamRecordsByUser(userId: string): SpamRecord[] {
    return Array.from(this.spamRecords.values()).filter(
      record => record.userId === userId
    );
  }

  /**
   * X√≥a spam records c≈© (older than 24 hours)
   */
  cleanupOldRecords(): number {
    const now = Date.now();
    const oneDayAgo = now - (24 * 60 * 60 * 1000);
    let deletedCount = 0;

    for (const [key, record] of this.spamRecords.entries()) {
      if (record.timestamp < oneDayAgo) {
        this.spamRecords.delete(key);
        deletedCount++;
      }
    }

    return deletedCount;
  }

  /**
   * T·∫°o embed th·ªëng k√™ spam
   */
  createSpamStatsEmbed(userId: string, guildId: string, command: string): EmbedBuilder {
    const stats = this.getSpamStats(userId, guildId, command);
    const commandConfig = this.getCommandConfig(command);

    if (!stats) {
      return new EmbedBuilder()
        .setTitle("üìä Th·ªëng K√™ Spam")
        .setDescription(`Kh√¥ng c√≥ d·ªØ li·ªáu spam cho l·ªánh \`${command}\``)
        .setColor("#51cf66")
        .setTimestamp();
    }

    const embed = new EmbedBuilder()
      .setTitle("üìä Th·ªëng K√™ Spam")
      .setDescription(`Th·ªëng k√™ spam cho l·ªánh \`${command}\``)
      .addFields(
        {
          name: "üìà S·ªë L·∫ßn Th·ª≠",
          value: `${stats.attempts}/${commandConfig?.maxAttempts || 'N/A'}`,
          inline: true,
        },
        {
          name: "‚ö†Ô∏è C·∫£nh C√°o",
          value: `${stats.warnings}/${spamProtectionConfig.warningThreshold}`,
          inline: true,
        },
        {
          name: "üî® Tr·∫°ng Th√°i",
          value: stats.isBanned ? "B·ªã kh√≥a" : "B√¨nh th∆∞·ªùng",
          inline: true,
        },
        {
          name: "‚è∞ Cooldown",
          value: commandConfig ? `${commandConfig.cooldown}s` : "N/A",
          inline: true,
        },
        {
          name: "üïê Time Window",
          value: commandConfig ? `${commandConfig.timeWindow}s` : "N/A",
          inline: true,
        }
      )
      .setColor(stats.isBanned ? "#ff0000" : stats.warnings > 0 ? "#ffa500" : "#51cf66")
      .setTimestamp();

    // Th√™m th√¥ng tin tool spam
    if (spamProtectionConfig.toolSpamDetection.enabled) {
      embed.addFields(
        {
          name: "ü§ñ Tool Spam C·∫£nh C√°o",
          value: `${stats.toolSpamWarnings}/${spamProtectionConfig.toolSpamDetection.patternThreshold}`,
          inline: true,
        },
        {
          name: "ü§ñ Tool Spam Tr·∫°ng Th√°i",
          value: stats.isToolSpamBanned ? "B·ªã kh√≥a" : "B√¨nh th∆∞·ªùng",
          inline: true,
        }
      );

      if (stats.timeIntervals.length > 0) {
        const patterns = this.findTimePatterns(stats.timeIntervals, spamProtectionConfig.toolSpamDetection.timeTolerance);
        if (patterns.length > 0) {
          const topPattern = patterns[0];
          embed.addFields({
            name: "üîç Pattern Ph√°t Hi·ªán",
            value: `${topPattern.interval}s (${topPattern.count} l·∫ßn)`,
            inline: false,
          });
        }
      }
    }

    if (stats.isBanned && stats.banExpiresAt) {
      const remainingBan = Math.ceil((stats.banExpiresAt - Date.now()) / 60000);
      embed.addFields({
        name: "üî® Th·ªùi Gian Kh√≥a C√≤n L·∫°i",
        value: `${remainingBan} ph√∫t`,
        inline: false,
      });
    }

    if (stats.isToolSpamBanned && stats.toolSpamBanExpiresAt) {
      const remainingToolSpamBan = Math.ceil((stats.toolSpamBanExpiresAt - Date.now()) / 60000);
      embed.addFields({
        name: "ü§ñ Th·ªùi Gian Kh√≥a Tool Spam C√≤n L·∫°i",
        value: `${remainingToolSpamBan} ph√∫t`,
        inline: false,
      });
    }

    if (stats.isExtendedSpamBanned && stats.extendedSpamBanExpiresAt) {
      const remainingExtendedBan = Math.ceil((stats.extendedSpamBanExpiresAt - Date.now()) / 60000);
      embed.addFields({
        name: "üìä Th·ªùi Gian Kh√≥a Extended Spam C√≤n L·∫°i",
        value: `${remainingExtendedBan} ph√∫t`,
        inline: false,
      });
    }

    if (stats.isFrequencySpamBanned && stats.frequencySpamBanExpiresAt) {
      const remainingFrequencyBan = Math.ceil((stats.frequencySpamBanExpiresAt - Date.now()) / 60000);
      embed.addFields({
        name: "‚è±Ô∏è Th·ªùi Gian Kh√≥a Frequency Spam C√≤n L·∫°i",
        value: `${remainingFrequencyBan} ph√∫t`,
        inline: false,
      });
    }

    return embed;
  }
}