import { PrismaClient } from '@prisma/client';
import { FISH_LIST } from '../config/fish-data';

const prisma = new PrismaClient();

export interface PityConfig {
    legendaryThreshold: number;  // S·ªë l·∫ßn c√¢u t·ªëi ƒëa tr∆∞·ªõc khi ƒë·∫£m b·∫£o ra c√° huy·ªÅn tho·∫°i
    pityMultiplier: number;      // H·ªá s·ªë tƒÉng t·ª∑ l·ªá khi g·∫ßn ƒë·∫øn ng∆∞·ª°ng
    resetOnLegendary: boolean;   // C√≥ reset pity count khi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i kh√¥ng
}

export class PitySystemService {
    // C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho pity system
    private static readonly DEFAULT_CONFIG: PityConfig = {
        legendaryThreshold: 500,  // 500 l·∫ßn c√¢u kh√¥ng ra c√° huy·ªÅn tho·∫°i
        pityMultiplier: 2.0,     // TƒÉng g·∫•p ƒë√¥i t·ª∑ l·ªá khi g·∫ßn ng∆∞·ª°ng
        resetOnLegendary: true    // Reset pity count khi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i
    };

    /**
     * L·∫•y th√¥ng tin pity c·ªßa user
     */
    static async getPityInfo(userId: string, guildId: string) {
        try {
            const fishingData = await prisma.fishingData.findUnique({
                where: { userId_guildId: { userId, guildId } }
            });

            if (!fishingData) {
                return {
                    legendaryPityCount: 0,
                    legendaryThreshold: this.DEFAULT_CONFIG.legendaryThreshold,
                    remainingToGuaranteed: this.DEFAULT_CONFIG.legendaryThreshold,
                    pityPercentage: 0,
                    lastLegendaryCaught: null
                };
            }

            const remainingToGuaranteed = Math.max(0, this.DEFAULT_CONFIG.legendaryThreshold - fishingData.legendaryPityCount);
            const pityPercentage = Math.min(100, (fishingData.legendaryPityCount / this.DEFAULT_CONFIG.legendaryThreshold) * 100);

            return {
                legendaryPityCount: fishingData.legendaryPityCount,
                legendaryThreshold: this.DEFAULT_CONFIG.legendaryThreshold,
                remainingToGuaranteed,
                pityPercentage,
                lastLegendaryCaught: fishingData.lastLegendaryCaught
            };
        } catch (error) {
            console.error("Error getting pity info:", error);
            // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh thay v√¨ null
            return {
                legendaryPityCount: 0,
                legendaryThreshold: this.DEFAULT_CONFIG.legendaryThreshold,
                remainingToGuaranteed: this.DEFAULT_CONFIG.legendaryThreshold,
                pityPercentage: 0,
                lastLegendaryCaught: null
            };
        }
    }

    /**
     * Ki·ªÉm tra xem c√≥ n√™n k√≠ch ho·∫°t pity system kh√¥ng
     */
    static async shouldActivatePity(userId: string, guildId: string): Promise<boolean> {
        try {
            const pityInfo = await this.getPityInfo(userId, guildId);
            if (!pityInfo) return false;

            // K√≠ch ho·∫°t pity khi ƒë·∫°t ng∆∞·ª°ng
            return pityInfo.legendaryPityCount >= this.DEFAULT_CONFIG.legendaryThreshold;
        } catch (error) {
            console.error("Error checking pity activation:", error);
            return false;
        }
    }

    /**
     * L·∫•y t·ª∑ l·ªá pity cho c√° huy·ªÅn tho·∫°i
     */
    static async getPityMultiplier(userId: string, guildId: string): Promise<number> {
        try {
            const pityInfo = await this.getPityInfo(userId, guildId);
            if (!pityInfo) return 1.0;

            // T√≠nh to√°n pity multiplier d·ª±a tr√™n s·ªë l·∫ßn c√¢u
            const pityProgress = pityInfo.legendaryPityCount / this.DEFAULT_CONFIG.legendaryThreshold;
            
            if (pityProgress >= 0.8) {
                // TƒÉng m·∫°nh khi g·∫ßn ng∆∞·ª°ng (80% tr·ªü l√™n)
                return this.DEFAULT_CONFIG.pityMultiplier * (1 + pityProgress);
            } else if (pityProgress >= 0.5) {
                // TƒÉng v·ª´a ph·∫£i khi ƒë·∫°t 50%
                return 1.0 + (pityProgress * 0.5);
            }

            return 1.0;
        } catch (error) {
            console.error("Error getting pity multiplier:", error);
            return 1.0;
        }
    }

    /**
     * C·∫≠p nh·∫≠t pity count sau khi c√¢u c√°
     */
    static async updatePityCount(userId: string, guildId: string, caughtFish: any) {
        try {
            const isLegendary = caughtFish.rarity === 'legendary';
            
            if (isLegendary) {
                // Reset pity count khi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i
                await prisma.fishingData.update({
                    where: { userId_guildId: { userId, guildId } },
                    data: {
                        legendaryPityCount: 0,
                        lastLegendaryCaught: new Date()
                    }
                });
            } else {
                // TƒÉng pity count khi kh√¥ng c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i
                await prisma.fishingData.update({
                    where: { userId_guildId: { userId, guildId } },
                    data: {
                        legendaryPityCount: { increment: 1 }
                    }
                });
            }
        } catch (error) {
            console.error("Error updating pity count:", error);
        }
    }

    /**
     * L·∫•y c√° huy·ªÅn tho·∫°i ng·∫´u nhi√™n khi k√≠ch ho·∫°t pity
     */
    static getRandomLegendaryFish(): any {
        const legendaryFish = FISH_LIST.filter(fish => fish.rarity === 'legendary');
        const randomIndex = Math.floor(Math.random() * legendaryFish.length);
        return legendaryFish[randomIndex];
    }

    /**
     * T·∫°o embed hi·ªÉn th·ªã th√¥ng tin pity
     */
    static createPityEmbed(pityInfo: any) {
        const { EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setTitle("üé£ Th√¥ng tin Pity System")
            .setColor("#ff6b6b")
            .setDescription("H·ªá th·ªëng b·∫£o h·ªô c√° huy·ªÅn tho·∫°i")
            .addFields(
                {
                    name: "üìä S·ªë l·∫ßn c√¢u kh√¥ng ra c√° huy·ªÅn tho·∫°i",
                    value: `${pityInfo.legendaryPityCount}/${pityInfo.legendaryThreshold}`,
                    inline: true
                },
                {
                    name: "üéØ C√≤n l·∫°i ƒë·∫øn ƒë·∫£m b·∫£o",
                    value: `${pityInfo.remainingToGuaranteed} l·∫ßn`,
                    inline: true
                },
                {
                    name: "üìà T·ª∑ l·ªá pity",
                    value: `${pityInfo.pityPercentage.toFixed(1)}%`,
                    inline: true
                }
            );

        if (pityInfo.lastLegendaryCaught) {
            embed.addFields({
                name: "üêã L·∫ßn cu·ªëi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i",
                value: `<t:${Math.floor(pityInfo.lastLegendaryCaught.getTime() / 1000)}:R>`,
                inline: false
            });
        }

        // Th√™m th√¥ng tin v·ªÅ h·ªá th·ªëng
        embed.addFields({
            name: "‚ÑπÔ∏è Th√¥ng tin h·ªá th·ªëng",
            value: "‚Ä¢ C·ª© 500 l·∫ßn c√¢u kh√¥ng ra c√° huy·ªÅn tho·∫°i s·∫Ω ƒë∆∞·ª£c ƒë·∫£m b·∫£o ra 1 con\n‚Ä¢ T·ª∑ l·ªá ra c√° huy·ªÅn tho·∫°i tƒÉng d·∫ßn khi g·∫ßn ng∆∞·ª°ng\n‚Ä¢ Pity count s·∫Ω reset khi c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i",
            inline: false
        });

        return embed;
    }

    /**
     * T·∫°o embed th√¥ng b√°o k√≠ch ho·∫°t pity
     */
    static createPityActivationEmbed(caughtFish: any) {
        const { EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setTitle("üéâ PITY SYSTEM K√çCH HO·∫†T!")
            .setColor("#ffd700")
            .setDescription("üé£ B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i nh·ªù h·ªá th·ªëng b·∫£o h·ªô!")
            .addFields(
                {
                    name: "üêã C√° huy·ªÅn tho·∫°i",
                    value: `${caughtFish.emoji} **${caughtFish.name}**`,
                    inline: true
                },
                {
                    name: "üí∞ Gi√° tr·ªã",
                    value: `${caughtFish.minValue.toLocaleString()} - ${caughtFish.maxValue.toLocaleString()}`,
                    inline: true
                },
                {
                    name: "üìù M√¥ t·∫£",
                    value: caughtFish.description,
                    inline: false
                }
            )
            .setFooter({ text: "H·ªá th·ªëng pity ƒë√£ reset v·ªÅ 0" })
            .setTimestamp();

        return embed;
    }
} 