import { ButtonInteraction, StringSelectMenuInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } from "discord.js";
import { WeaponService } from "../../utils/weapon";
import { EcommerceService } from "../../utils/ecommerce-db";

export class WeaponShopHandler {
    static async handleButton(interaction: ButtonInteraction) {
        const { customId } = interaction;
        const guildId = interaction.guildId!;
        const userId = interaction.user.id;

        try {
            switch (customId) {
                case 'weapon_shop_buy':
                    await this.handleBuyButton(interaction, guildId, userId);
                    break;
                case 'weapon_shop_inventory':
                    await this.handleInventoryButton(interaction, guildId, userId);
                    break;
                case 'weapon_shop_equip':
                    await this.handleEquipButton(interaction, guildId, userId);
                    break;
                case 'weapon_shop_help':
                    await this.handleHelpButton(interaction);
                    break;
                default:
                    await interaction.reply({ content: "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!", ephemeral: true });
            }
        } catch (error) {
            console.error("Error in WeaponShopHandler:", error);
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: "‚ùå C√≥ l·ªói x·∫£y ra!", ephemeral: true });
            }
        }
    }

    static async handleSelectMenu(interaction: StringSelectMenuInteraction) {
        const { customId } = interaction;
        const guildId = interaction.guildId!;
        const userId = interaction.user.id;
        const selectedValue = interaction.values[0];

        try {
            switch (customId) {
                case 'weapon_buy_select':
                    await this.handleBuySelect(interaction, guildId, userId, selectedValue);
                    break;
                case 'weapon_equip_select':
                    await this.handleEquipSelect(interaction, guildId, userId, selectedValue);
                    break;
                default:
                    await interaction.reply({ content: "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!", ephemeral: true });
            }
        } catch (error) {
            console.error("Error in WeaponShopHandler select menu:", error);
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: "‚ùå C√≥ l·ªói x·∫£y ra!", ephemeral: true });
            }
        }
    }

    static async handleBuyButton(interaction: ButtonInteraction, guildId: string, userId: string) {
        const weapons = WeaponService.getAllWeapons();
        
        const embed = new EmbedBuilder()
            .setTitle("üõí Mua V≈© Kh√≠")
            .setColor("#ff6b6b")
            .setDescription("Ch·ªçn v≈© kh√≠ b·∫°n mu·ªën mua:")
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .setTimestamp();

        const balance = await EcommerceService.getBalance(userId, guildId);
        embed.addFields({ name: "üí∞ Balance", value: `${balance.toLocaleString()} AniCoin`, inline: false });

        const options = weapons.map(weapon => {
            const canAfford = balance >= weapon.price;
            const emoji = this.getWeaponEmoji(weapon.type);
            return new StringSelectMenuOptionBuilder()
                .setLabel(`${weapon.name} - ${weapon.price.toLocaleString()} AniCoin`)
                .setDescription(`${emoji} ${weapon.description} ${canAfford ? '‚úÖ' : '‚ùå'}`)
                .setValue(weapon.id)
                .setEmoji(emoji);
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('weapon_buy_select')
            .setPlaceholder('Ch·ªçn v≈© kh√≠ ƒë·ªÉ mua...')
            .addOptions(options);

        const row = new ActionRowBuilder<StringSelectMenuBuilder>()
            .addComponents(selectMenu);

        await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
    }

    static async handleInventoryButton(interaction: ButtonInteraction, guildId: string, userId: string) {
        const embed = new EmbedBuilder()
            .setTitle("üéí Kho V≈© Kh√≠")
            .setColor("#ff6b6b")
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .setTimestamp();

        const inventory = await WeaponService.getUserWeaponInventory(userId, guildId);
        const equippedWeapon = await WeaponService.getEquippedWeapon(userId, guildId);
        
        if (inventory.length === 0) {
            embed.setDescription("üéí **Kho v≈© kh√≠ c·ªßa b·∫°n:**\n\nüì≠ Kho v≈© kh√≠ tr·ªëng!\n\nüí° S·ª≠ d·ª•ng `n.weaponshop` ƒë·ªÉ mua v≈© kh√≠");
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        let inventoryText = "üéí **Kho v≈© kh√≠ c·ªßa b·∫°n:**\n\n";
        
        inventory.forEach((item, index) => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (!weapon) return;

            const emoji = this.getWeaponEmoji(weapon.type);
            const equippedStatus = item.isEquipped ? " ‚öîÔ∏è **ƒêANG TRANG B·ªä**" : "";
            
            inventoryText += `${index + 1}. ${emoji} **${weapon.name}**${equippedStatus}\n`;
            inventoryText += `   üì¶ S·ªë l∆∞·ª£ng: ${item.quantity}\n`;
            inventoryText += `   ‚öîÔ∏è S·ª©c m·∫°nh: +${weapon.power} ATK\n`;
            inventoryText += `   üõ°Ô∏è Ph√≤ng th·ªß: +${weapon.defense} DEF\n`;
            inventoryText += `   üéØ ƒê·ªô ch√≠nh x√°c: +${weapon.accuracy}%\n`;
            inventoryText += `   ‚≠ê Hi·∫øm: ${weapon.rarity}\n\n`;
        });

        if (equippedWeapon) {
            const equippedWeaponInfo = WeaponService.getWeaponById(equippedWeapon.weaponId);
            if (equippedWeaponInfo) {
                inventoryText += "‚öîÔ∏è **V≈© kh√≠ ƒëang trang b·ªã:**\n";
                inventoryText += `${this.getWeaponEmoji(equippedWeaponInfo.type)} **${equippedWeaponInfo.name}**\n`;
                inventoryText += `   ‚öîÔ∏è +${equippedWeaponInfo.power} ATK | üõ°Ô∏è +${equippedWeaponInfo.defense} DEF | üéØ +${equippedWeaponInfo.accuracy}%\n\n`;
            }
        }

        inventoryText += "üí° **L·ªánh h·ªØu √≠ch:**\n";
        inventoryText += "‚Ä¢ `n.weaponshop equip <weapon_id>` - Trang b·ªã v≈© kh√≠\n";
        inventoryText += "‚Ä¢ `n.weaponshop unequip` - G·ª° trang b·ªã\n";
        inventoryText += "‚Ä¢ `n.weaponshop info <weapon_id>` - Xem th√¥ng tin v≈© kh√≠";

        embed.setDescription(inventoryText);

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    static async handleEquipButton(interaction: ButtonInteraction, guildId: string, userId: string) {
        const inventory = await WeaponService.getUserWeaponInventory(userId, guildId);
        
        if (inventory.length === 0) {
            const embed = new EmbedBuilder()
                .setTitle("üéí Kho V≈© Kh√≠")
                .setColor("#ff6b6b")
                .setDescription("üì≠ Kho v≈© kh√≠ tr·ªëng!\n\nüí° S·ª≠ d·ª•ng `n.weaponshop` ƒë·ªÉ mua v≈© kh√≠")
                .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
                .setTimestamp();
            
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        const embed = new EmbedBuilder()
            .setTitle("‚öîÔ∏è Trang B·ªã V≈© Kh√≠")
            .setColor("#ff6b6b")
            .setDescription("Ch·ªçn v≈© kh√≠ ƒë·ªÉ trang b·ªã:")
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .setTimestamp();

        const options = inventory.map(item => {
            const weapon = WeaponService.getWeaponById(item.weaponId);
            if (!weapon) return null;

            const emoji = this.getWeaponEmoji(weapon.type);
            const equippedStatus = item.isEquipped ? " ‚öîÔ∏è ƒêANG TRANG B·ªä" : "";
            
            return new StringSelectMenuOptionBuilder()
                .setLabel(`${weapon.name}${equippedStatus}`)
                .setDescription(`${emoji} +${weapon.power} ATK | +${weapon.defense} DEF | +${weapon.accuracy}%`)
                .setValue(weapon.id)
                .setEmoji(emoji);
        }).filter(Boolean);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('weapon_equip_select')
            .setPlaceholder('Ch·ªçn v≈© kh√≠ ƒë·ªÉ trang b·ªã...')
            .addOptions(options as StringSelectMenuOptionBuilder[]);

        const row = new ActionRowBuilder<StringSelectMenuBuilder>()
            .addComponents(selectMenu);

        await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
    }

    static async handleHelpButton(interaction: ButtonInteraction) {
        const embed = new EmbedBuilder()
            .setTitle("‚öîÔ∏è H∆∞·ªõng D·∫´n Fish Weapon Shop")
            .setColor("#ff6b6b")
            .setDescription("C·ª≠a h√†ng v≈© kh√≠ cho c√° - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!")
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .addFields(
                { name: "üõí Mua v≈© kh√≠", value: "`n.weaponshop buy <weapon_id> [s·ªë l∆∞·ª£ng]`", inline: true },
                { name: "üéí Xem kho", value: "`n.weaponshop inventory`", inline: true },
                { name: "‚öîÔ∏è Trang b·ªã", value: "`n.weaponshop equip <weapon_id>`", inline: true },
                { name: "üõ°Ô∏è G·ª° trang b·ªã", value: "`n.weaponshop unequip`", inline: true },
                { name: "üìù Xem th√¥ng tin", value: "`n.weaponshop info <weapon_id>`", inline: true },
                { name: "‚ùì Tr·ª£ gi√∫p", value: "`n.weaponshop help`", inline: true }
            )
            .addFields(
                { name: "üí° V√≠ d·ª•", value: "`n.weaponshop buy sword 2` - Mua 2 thanh ki·∫øm\n`n.weaponshop equip sword` - Trang b·ªã ki·∫øm\n`n.weaponshop info sword` - Xem th√¥ng tin ki·∫øm", inline: false }
            )
            .setFooter({
                text: "Fish Weapon Shop - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!",
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    static async handleBuySelect(interaction: StringSelectMenuInteraction, guildId: string, userId: string, weaponId: string) {
        const weapon = WeaponService.getWeaponById(weaponId);
        if (!weapon) {
            return interaction.reply({ content: "‚ùå Kh√¥ng t√¨m th·∫•y v≈© kh√≠!", ephemeral: true });
        }

        const balance = await EcommerceService.getBalance(userId, guildId);
        if (balance < weapon.price) {
            const embed = new EmbedBuilder()
                .setTitle("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn")
                .setColor("#ff0000")
                .setDescription(`B·∫°n c·∫ßn ${weapon.price.toLocaleString()} AniCoin ƒë·ªÉ mua ${weapon.name}\nHi·ªán t·∫°i: ${balance.toLocaleString()} AniCoin`)
                .setTimestamp();
            
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        try {
            // Th·ª±c hi·ªán mua
            await EcommerceService.subtractMoney(userId, guildId, Number(weapon.price), `Mua ${weapon.name}`);
            await WeaponService.addWeaponToInventory(userId, guildId, weaponId, 1);

            const embed = new EmbedBuilder()
                .setTitle("‚úÖ Mua th√†nh c√¥ng!")
                .setColor("#00ff00")
                .setDescription(`üéâ ƒê√£ mua th√†nh c√¥ng **${weapon.name}**\nüí∞ Chi ph√≠: ${weapon.price.toLocaleString()} AniCoin\nüí≥ Balance c√≤n l·∫°i: ${(balance - weapon.price).toLocaleString()} AniCoin`)
                .addFields(
                    { name: "‚öîÔ∏è S·ª©c m·∫°nh", value: `+${weapon.power} ATK`, inline: true },
                    { name: "üõ°Ô∏è Ph√≤ng th·ªß", value: `+${weapon.defense} DEF`, inline: true },
                    { name: "üéØ ƒê·ªô ch√≠nh x√°c", value: `+${weapon.accuracy}%`, inline: true }
                )
                .setTimestamp();

            await interaction.reply({ embeds: [embed], ephemeral: true });

        } catch (error) {
            console.error("Error buying weapon:", error);
            await interaction.reply({ content: "‚ùå C√≥ l·ªói x·∫£y ra khi mua v≈© kh√≠!", ephemeral: true });
        }
    }

    static async handleEquipSelect(interaction: StringSelectMenuInteraction, guildId: string, userId: string, weaponId: string) {
        const weapon = WeaponService.getWeaponById(weaponId);
        if (!weapon) {
            return interaction.reply({ content: "‚ùå Kh√¥ng t√¨m th·∫•y v≈© kh√≠!", ephemeral: true });
        }

        const success = await WeaponService.equipWeapon(userId, guildId, weaponId);
        
        if (!success) {
            const embed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setColor("#ff0000")
                .setDescription(`B·∫°n kh√¥ng c√≥ v≈© kh√≠ **${weapon.name}**!\nS·ª≠ d·ª•ng \`n.weaponshop inventory\` ƒë·ªÉ xem kho v≈© kh√≠`)
                .setTimestamp();
            
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        const embed = new EmbedBuilder()
            .setTitle("‚öîÔ∏è Trang B·ªã Th√†nh C√¥ng!")
            .setColor("#00ff00")
            .setDescription(`üéØ ƒê√£ trang b·ªã th√†nh c√¥ng **${weapon.name}**!`)
            .addFields(
                { name: "‚öîÔ∏è S·ª©c m·∫°nh", value: `+${weapon.power} ATK`, inline: true },
                { name: "üõ°Ô∏è Ph√≤ng th·ªß", value: `+${weapon.defense} DEF`, inline: true },
                { name: "üéØ ƒê·ªô ch√≠nh x√°c", value: `+${weapon.accuracy}%`, inline: true }
            )
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    static getWeaponEmoji(type: string): string {
        const emojiMap: Record<string, string> = {
            sword: "‚öîÔ∏è",
            shield: "üõ°Ô∏è",
            spear: "üî±",
            bow: "üèπ",
            axe: "ü™ì",
            staff: "üîÆ",
            dagger: "üó°Ô∏è"
        };
        return emojiMap[type] || "‚öîÔ∏è";
    }
} 