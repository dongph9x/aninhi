import { ButtonBuilder, ButtonStyle, EmbedBuilder, ComponentType } from "discord.js";

import { Bot } from "@/classes";
import type { MessageComponentProps } from "@/typings";
import { FishingService } from "@/utils/fishing";

export default Bot.createMessageComponent<ComponentType.Button, { fishId: string; fishName: string }>({
    type: ComponentType.Button,
    run: async ({ interaction, data }) => {
        try {
            const fishId = data.fishId;
            const fishName = data.fishName;
            const userId = interaction.user.id;
            const guildId = interaction.guildId!;

            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ c√° n√†y kh√¥ng
            const fishingData = await FishingService.getFishingData(userId, guildId);
            const caughtFish = fishingData.fish.find((f: any) => f.id === fishId);

            if (!caughtFish) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("B·∫°n kh√¥ng c√≥ c√° n√†y ho·∫∑c ƒë√£ b√°n h·∫øt!")
                    .setColor("#ff0000")
                    .setTimestamp();

                return await interaction.reply({ 
                    embeds: [errorEmbed], 
                    ephemeral: true 
                });
            }

            // B√°n to√†n b·ªô s·ªë l∆∞·ª£ng c√°
            const result = await FishingService.sellFish(userId, guildId, fishName, caughtFish.quantity);

            const successEmbed = new EmbedBuilder()
                .setTitle("üí∞ B√°n Th√†nh C√¥ng!")
                .setDescription(
                    `**${interaction.user.username}** ƒë√£ b√°n:\n\n` +
                    `üêü **${result.fishName}** x${result.quantity}\n` +
                    `üí∞ **Gi√° hi·ªán t·∫°i:** ${result.currentPrice} AniCoin\n` +
                    `üíµ **T·ªïng gi√°:** ${result.totalValue} AniCoin`
                )
                .setColor("#00ff00")
                .setTimestamp();

            await interaction.reply({ 
                embeds: [successEmbed], 
                ephemeral: true 
            });

        } catch (error: any) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi b√°n c√°!")
                .setColor("#ff0000")
                .setTimestamp();

            await interaction.reply({ 
                embeds: [errorEmbed], 
                ephemeral: true 
            });
        }
    },
}); 