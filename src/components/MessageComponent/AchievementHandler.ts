import { ButtonInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";
import { AchievementService } from "@/utils/achievement";

export class AchievementHandler {
    static async handleInteraction(interaction: ButtonInteraction) {
        const customId = interaction.customId;
        const userId = interaction.user.id;

        try {
            // X·ª≠ l√Ω activate achievement
            if (customId.startsWith('activate_achievement_')) {
                const achievementId = customId.replace('activate_achievement_', '');
                
                const success = await AchievementService.activateAchievement(achievementId, userId);
                
                if (success) {
                    // L·∫•y achievement ƒë√£ active
                    const achievement = await AchievementService.getUserAchievements(userId);
                    const activeAchievement = achievement.find(a => a.id === achievementId);
                    
                    if (activeAchievement) {
                        const typeEmoji = AchievementService.getAchievementTypeEmoji(activeAchievement.type);
                        const typeName = AchievementService.getAchievementTypeName(activeAchievement.type);
                        
                        const successEmbed = new EmbedBuilder()
                            .setTitle('‚úÖ ƒê√£ Active Danh Hi·ªáu!')
                            .setDescription(
                                `**${interaction.user.username}** ƒë√£ active danh hi·ªáu:\n\n` +
                                `${typeEmoji} **${activeAchievement.name}**\n` +
                                `üèÖ **Lo·∫°i:** ${typeName}\n` +
                                `üí° **Danh hi·ªáu n√†y s·∫Ω hi·ªÉn th·ªã khi c√¢u c√°!**`
                            )
                            .setColor('#00ff00')
                            .setThumbnail(activeAchievement.link)
                            .setTimestamp();

                        await interaction.reply({ 
                            embeds: [successEmbed],
                            ephemeral: true 
                        });
                    }
                } else {
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå L·ªói Active Danh Hi·ªáu')
                        .setDescription('Kh√¥ng th·ªÉ active danh hi·ªáu n√†y. Vui l√≤ng th·ª≠ l·∫°i!')
                        .setColor('#ff0000')
                        .setTimestamp();

                    await interaction.reply({ 
                        embeds: [errorEmbed],
                        ephemeral: true 
                    });
                }
            }
            
            // X·ª≠ l√Ω deactivate t·∫•t c·∫£ achievements
            else if (customId === 'deactivate_all_achievements') {
                const success = await AchievementService.deactivateAllAchievements(userId);
                
                if (success) {
                    const successEmbed = new EmbedBuilder()
                        .setTitle('üö´ ƒê√£ Deactivate T·∫•t C·∫£ Danh Hi·ªáu!')
                        .setDescription(
                            `**${interaction.user.username}** ƒë√£ deactivate t·∫•t c·∫£ danh hi·ªáu.\n\n` +
                            `üí° **Khi c√¢u c√° s·∫Ω hi·ªÉn th·ªã theo th·ª© t·ª± ∆∞u ti√™n:**\n` +
                            `üëë Admin > üèÜ Top Fisher > üí∞ Top FishCoin > üí∏ Top Lose`
                        )
                        .setColor('#ff6b35')
                        .setTimestamp();

                    await interaction.reply({ 
                        embeds: [successEmbed],
                        ephemeral: true 
                    });
                } else {
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå L·ªói Deactivate Danh Hi·ªáu')
                        .setDescription('Kh√¥ng th·ªÉ deactivate danh hi·ªáu. Vui l√≤ng th·ª≠ l·∫°i!')
                        .setColor('#ff0000')
                        .setTimestamp();

                    await interaction.reply({ 
                        embeds: [errorEmbed],
                        ephemeral: true 
                    });
                }
            }

        } catch (error) {
            console.error('Error handling achievement interaction:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói X·ª≠ L√Ω')
                .setDescription('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i!')
                .setColor('#ff0000')
                .setTimestamp();

            await interaction.reply({ 
                embeds: [errorEmbed],
                ephemeral: true 
            });
        }
    }
} 