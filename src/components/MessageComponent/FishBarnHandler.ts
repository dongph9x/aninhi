import { ButtonInteraction, StringSelectMenuInteraction, EmbedBuilder } from 'discord.js';
import { FishBreedingService } from '../../utils/fish-breeding';
import { FishInventoryService } from '../../utils/fish-inventory';
import { FishBarnUI } from './FishBarnUI';

export class FishBarnHandler {
  // L∆∞u tr·ªØ c√° ƒë∆∞·ª£c ch·ªçn cho m·ªói user
  private static selectedFishMap = new Map<string, string>();

  static async handleInteraction(interaction: ButtonInteraction | StringSelectMenuInteraction) {
    const customId = interaction.customId;
    
    if (!interaction.guildId || !interaction.user) {
      return interaction.reply({ content: '‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin server ho·∫∑c user!', ephemeral: true });
    }

    const userId = interaction.user.id;
    const guildId = interaction.guildId;

    try {
      switch (customId) {
        case 'fishbarn_close':
          await this.handleClose(interaction);
          break;
          
        case 'fishbarn_feed':
          await this.handleFeed(interaction, userId, guildId);
          break;
          
        case 'fishbarn_sell':
          await this.handleSell(interaction, userId, guildId);
          break;
          
        case 'fishbarn_breed':
          await this.handleBreed(interaction, userId, guildId);
          break;
          
        case 'fishbarn_select_fish':
          if (interaction.isStringSelectMenu()) {
            await this.handleSelectFish(interaction, userId, guildId);
          }
          break;
          
        default:
          await interaction.reply({ content: '‚ùå L·ªói: Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c action!', ephemeral: true });
      }
    } catch (error) {
      console.error('Error in FishBarnHandler:', error);
      await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', ephemeral: true });
    }
  }

  private static async handleClose(interaction: ButtonInteraction | StringSelectMenuInteraction) {
    await interaction.update({
      content: '‚úÖ ƒê√£ ƒë√≥ng r∆∞∆°ng nu√¥i c√°!',
      embeds: [],
      components: [],
    });
  }

  private static async handleFeed(interaction: ButtonInteraction | StringSelectMenuInteraction, userId: string, guildId: string) {
    // Ki·ªÉm tra quy·ªÅn admin
    const member = await interaction.guild?.members.fetch(userId);
    const isAdmin = member?.permissions.has('Administrator') || false;

    console.log(`Admin status for ${userId}: ${isAdmin}`);

    // L·∫•y inventory hi·ªán t·∫°i
    const inventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    if (inventory.items.length === 0) {
      return interaction.reply({ content: '‚ùå B·∫°n kh√¥ng c√≥ c√° n√†o ƒë·ªÉ cho ƒÉn!', ephemeral: true });
    }

    // Ki·ªÉm tra xem c√≥ c√° ƒë∆∞·ª£c ch·ªçn kh√¥ng
    const selectedFishId = this.selectedFishMap.get(userId);
    let targetFish;

    if (selectedFishId) {
      // T√¨m c√° ƒë∆∞·ª£c ch·ªçn trong inventory
      targetFish = inventory.items.find((item: any) => item.fish.id === selectedFishId);
      
      if (!targetFish) {
        // C√° ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≤n trong inventory (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a)
        this.selectedFishMap.delete(userId);
        return interaction.reply({ content: '‚ùå C√° ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≤n trong r∆∞∆°ng! Vui l√≤ng ch·ªçn l·∫°i.', ephemeral: true });
      }

      // Ki·ªÉm tra xem c√° c√≥ ƒëang l·ªõn kh√¥ng
      if (targetFish.fish.status === 'adult') {
        return interaction.reply({ content: '‚ùå C√° n√†y ƒë√£ tr∆∞·ªüng th√†nh! Kh√¥ng th·ªÉ cho ƒÉn th√™m.', ephemeral: true });
      }
    } else {
      // N·∫øu ch∆∞a ch·ªçn c√°, t√¨m c√° ƒëang l·ªõn ƒë·∫ßu ti√™n
      targetFish = inventory.items.find((item: any) => item.fish.status === 'growing');
      
      if (!targetFish) {
        return interaction.reply({ content: '‚ùå T·∫•t c·∫£ c√° ƒë√£ tr∆∞·ªüng th√†nh!', ephemeral: true });
      }
    }

    // Cho c√° ƒÉn
    const result = await FishBreedingService.feedFish(userId, targetFish.fish.id, isAdmin);
    
    if (!result.success) {
      return interaction.reply({ content: `‚ùå ${result.error}`, ephemeral: true });
    }

    // C·∫≠p nh·∫≠t inventory
    const updatedInventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    // T·∫°o embed th√¥ng b√°o
    const embed = new EmbedBuilder()
      .setTitle('üçΩÔ∏è Cho C√° ƒÇn Th√†nh C√¥ng!')
      .setColor('#00FF00')
      .addFields(
        { name: 'üêü C√°', value: result.fish.name, inline: true },
        { name: 'üìà Kinh nghi·ªám', value: `+${result.experienceGained}`, inline: true },
        { name: 'üí∞ Gi√° tr·ªã m·ªõi', value: (result.newValue || result.fish.value).toLocaleString(), inline: true }
      );

    if (result.leveledUp) {
      embed.addFields({ name: 'üéâ L√™n c·∫•p!', value: `C·∫•p ${result.fish.level}`, inline: true });
    }

    if (result.becameAdult) {
      embed.addFields({ name: 'üêü Tr∆∞·ªüng th√†nh!', value: 'C√° ƒë√£ c√≥ th·ªÉ lai t·∫°o!', inline: true });
    }

    // C·∫≠p nh·∫≠t UI v·ªõi c√° ƒë∆∞·ª£c ch·ªçn
    const ui = new FishBarnUI(updatedInventory, userId, guildId, selectedFishId);
    const newEmbed = ui.createEmbed();
    const newComponents = ui.createComponents();

    await interaction.update({
      embeds: [newEmbed],
      components: newComponents,
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  private static async handleSell(interaction: ButtonInteraction | StringSelectMenuInteraction, userId: string, guildId: string) {
    const inventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    if (inventory.items.length === 0) {
      return interaction.reply({ content: '‚ùå B·∫°n kh√¥ng c√≥ c√° n√†o ƒë·ªÉ b√°n!', ephemeral: true });
    }

    // Ki·ªÉm tra xem c√≥ c√° ƒë∆∞·ª£c ch·ªçn kh√¥ng
    const selectedFishId = this.selectedFishMap.get(userId);
    let targetFish;

    if (selectedFishId) {
      // T√¨m c√° ƒë∆∞·ª£c ch·ªçn trong inventory
      targetFish = inventory.items.find((item: any) => item.fish.id === selectedFishId);
      
      if (!targetFish) {
        // C√° ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≤n trong inventory (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a)
        this.selectedFishMap.delete(userId);
        return interaction.reply({ content: '‚ùå C√° ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≤n trong r∆∞∆°ng! Vui l√≤ng ch·ªçn l·∫°i.', ephemeral: true });
      }
    } else {
      // N·∫øu ch∆∞a ch·ªçn c√°, b√°n c√° c√≥ gi√° tr·ªã cao nh·∫•t
      targetFish = inventory.items.reduce((prev: any, current: any) => 
        prev.fish.value > current.fish.value ? prev : current
      );
    }

    const result = await FishInventoryService.sellFishFromInventory(userId, guildId, targetFish.fish.id);
    
    if (!result.success) {
      return interaction.reply({ content: `‚ùå ${result.error}`, ephemeral: true });
    }

    // X√≥a c√° ƒë∆∞·ª£c ch·ªçn kh·ªèi map n·∫øu ƒë√£ b√°n
    if (selectedFishId) {
      this.selectedFishMap.delete(userId);
    }

    // C·∫≠p nh·∫≠t inventory
    const updatedInventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    // T·∫°o embed th√¥ng b√°o
    const embed = new EmbedBuilder()
      .setTitle('üí∞ B√°n C√° Th√†nh C√¥ng!')
      .setColor('#FFD700')
      .addFields(
        { name: 'üêü C√° ƒë√£ b√°n', value: result.fish.name, inline: true },
        { name: 'üí∞ S·ªë ti·ªÅn nh·∫≠n', value: result.coinsEarned.toLocaleString(), inline: true },
        { name: 'üí≥ S·ªë d∆∞ m·ªõi', value: result.newBalance.toLocaleString(), inline: true }
      );

    // C·∫≠p nh·∫≠t UI (kh√¥ng c√≥ c√° ƒë∆∞·ª£c ch·ªçn v√¨ ƒë√£ b√°n)
    const ui = new FishBarnUI(updatedInventory, userId, guildId);
    const newEmbed = ui.createEmbed();
    const newComponents = ui.createComponents();

    await interaction.update({
      embeds: [newEmbed],
      components: newComponents,
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  private static async handleBreed(interaction: ButtonInteraction | StringSelectMenuInteraction, userId: string, guildId: string) {
    const inventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    // T√¨m 2 c√° tr∆∞·ªüng th√†nh
    const adultFish = inventory.items.filter((item: any) => item.fish.status === 'adult');
    
    if (adultFish.length < 2) {
      return interaction.reply({ 
        content: '‚ùå C·∫ßn √≠t nh·∫•t 2 c√° tr∆∞·ªüng th√†nh ƒë·ªÉ lai t·∫°o!', 
        ephemeral: true 
      });
    }

    // Ch·ªçn 2 c√° ƒë·∫ßu ti√™n
    const fish1 = adultFish[0].fish;
    const fish2 = adultFish[1].fish;

    const result = await FishBreedingService.breedFish(userId, fish1.id, fish2.id);
    
    if (!result.success) {
      return interaction.reply({ content: `‚ùå ${result.error}`, ephemeral: true });
    }

    // Th√™m c√° con v√†o inventory
    await FishInventoryService.addFishToInventory(userId, guildId, result.offspring.id);

    // C·∫≠p nh·∫≠t inventory
    const updatedInventory = await FishInventoryService.getFishInventory(userId, guildId);
    
    // T·∫°o embed th√¥ng b√°o
    const embed = new EmbedBuilder()
      .setTitle('‚ù§Ô∏è Lai T·∫°o Th√†nh C√¥ng!')
      .setColor('#FF69B4')
      .addFields(
        { name: 'üêü C√° b·ªë', value: result.parent1.name, inline: true },
        { name: 'üêü C√° m·∫π', value: result.parent2.name, inline: true },
        { name: 'üê† C√° con', value: result.offspring.name, inline: true },
        { name: 'üí∞ Gi√° tr·ªã', value: result.offspring.value.toLocaleString(), inline: true },
        { name: 'üè∑Ô∏è Th·∫ø h·ªá', value: result.offspring.generation.toString(), inline: true }
      );

    // C·∫≠p nh·∫≠t UI (kh√¥ng c√≥ c√° ƒë∆∞·ª£c ch·ªçn v√¨ ƒë√£ lai t·∫°o)
    const ui = new FishBarnUI(updatedInventory, userId, guildId);
    const newEmbed = ui.createEmbed();
    const newComponents = ui.createComponents();

    await interaction.update({
      embeds: [newEmbed],
      components: newComponents,
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  private static async handleSelectFish(interaction: StringSelectMenuInteraction, userId: string, guildId: string) {
    const selectedFishId = interaction.values[0];
    
    console.log(`üîç handleSelectFish - selectedFishId: ${selectedFishId}`);
    
    if (!selectedFishId) {
      return interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y c√° ƒë∆∞·ª£c ch·ªçn!', ephemeral: true });
    }

    // L∆∞u c√° ƒë∆∞·ª£c ch·ªçn
    this.selectedFishMap.set(userId, selectedFishId);
    console.log(`üíæ Saved selectedFishId for user ${userId}: ${selectedFishId}`);

    // L·∫•y th√¥ng tin c√°
    const fish = await FishBreedingService.getFishById(userId, selectedFishId);
    
    if (!fish) {
      return interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y c√°!', ephemeral: true });
    }

    // C·∫≠p nh·∫≠t UI v·ªõi c√° ƒë∆∞·ª£c ch·ªçn
    const inventory = await FishInventoryService.getFishInventory(userId, guildId);
    const ui = new FishBarnUI(inventory, userId, guildId, selectedFishId);
    const newEmbed = ui.createEmbed();
    const newComponents = ui.createComponents();

    console.log(`üé® Creating UI with selectedFishId: ${selectedFishId}`);
    console.log(`üìä Embed fields count: ${newEmbed.data.fields?.length || 0}`);

    await interaction.update({
      embeds: [newEmbed],
      components: newComponents,
    });

    // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
    const confirmEmbed = new EmbedBuilder()
      .setTitle(`‚úÖ ${fish.name} ƒë√£ ƒë∆∞·ª£c ch·ªçn!`)
      .setColor('#00FF00')
      .setDescription('B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t b√™n tr√™n ƒë·ªÉ thao t√°c v·ªõi c√° n√†y.')
      .setTimestamp();

    await interaction.followUp({ embeds: [confirmEmbed], ephemeral: true });
  }
} 