import { 
    ButtonBuilder, 
    ButtonStyle, 
    EmbedBuilder, 
    ComponentType,
    ActionRowBuilder,
    StringSelectMenuBuilder,
    StringSelectMenuOptionBuilder
} from "discord.js";

import { Bot } from "@/classes";
import type { MessageComponentProps } from "@/typings";
import { FishingService } from "@/utils/fishing";
import { FISHING_RODS, BAITS } from "@/config/fish-data";

export default Bot.createMessageComponent<ComponentType.Button, { action: string }>({
    type: ComponentType.Button,
    run: async ({ interaction, data }) => {
        try {
            const action = data.action;
            const userId = interaction.user.id;
            const guildId = interaction.guildId!;

            switch (action) {
                case "shop":
                    await showShop(interaction);
                    break;
                case "buy_rod":
                    await showRodShop(interaction);
                    break;
                case "buy_bait":
                    await showBaitShop(interaction);
                    break;
                case "buy_food":
                    await showFoodShop(interaction);
                    break;
                case "manage":
                    await showManageEquipment(interaction, userId, guildId);
                    break;
                default:
                    await interaction.reply({ 
                        content: "‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!", 
                        ephemeral: true 
                    });
            }
        } catch (error: any) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói!")
                .setColor("#ff0000")
                .setTimestamp();

            await interaction.reply({ 
                embeds: [errorEmbed], 
                ephemeral: true 
            });
        }
    },
});

async function showShop(interaction: any) {
    const embed = new EmbedBuilder()
        .setTitle("üé£ C·ª≠a H√†ng C√¢u C√°")
        .setDescription("Ch√†o m·ª´ng ƒë·∫øn v·ªõi c·ª≠a h√†ng c√¢u c√°! Ch·ªçn h√†nh ƒë·ªông b·∫°n mu·ªën th·ª±c hi·ªán:")
        .setColor("#0099ff")
        .addFields(
            { name: "üõí Mua C·∫ßn C√¢u", value: "Mua c√°c lo·∫°i c·∫ßn c√¢u v·ªõi ƒë·ªô b·ªÅn v√† bonus kh√°c nhau", inline: true },
            { name: "ü™± Mua M·ªìi", value: "Mua c√°c lo·∫°i m·ªìi ƒë·ªÉ tƒÉng t·ª∑ l·ªá c√¢u ƒë∆∞·ª£c c√° hi·∫øm", inline: true },
            { name: "üçΩÔ∏è Mua Th·ª©c ƒÇn", value: "Mua th·ª©c ƒÉn ƒë·ªÉ cho c√° ƒÉn v√† tƒÉng level", inline: true },
            { name: "‚öôÔ∏è Qu·∫£n L√Ω", value: "Xem v√† thay ƒë·ªïi c·∫ßn c√¢u, m·ªìi hi·ªán t·∫°i", inline: true }
        )
        .setTimestamp();

    const row1 = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "buy_rod" } }))
                .setLabel("üõí Mua C·∫ßn C√¢u")
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "buy_bait" } }))
                .setLabel("ü™± Mua M·ªìi")
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "buy_food" } }))
                .setLabel("üçΩÔ∏è Mua Th·ª©c ƒÇn")
                .setStyle(ButtonStyle.Primary)
        );

    const row2 = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "manage" } }))
                .setLabel("‚öôÔ∏è Qu·∫£n L√Ω")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row1, row2],
        ephemeral: true 
    });
}

async function showRodShop(interaction: any) {
    const embed = new EmbedBuilder()
        .setTitle("üõí C·ª≠a H√†ng C·∫ßn C√¢u")
        .setDescription("Ch·ªçn lo·∫°i c·∫ßn c√¢u b·∫°n mu·ªën mua:")
        .setColor("#00ff00")
        .setTimestamp();

    // R√∫t g·ªçn th√¥ng tin t·ª´ng lo·∫°i c·∫ßn c√¢u
    Object.entries(FISHING_RODS).forEach(([key, rod]) => {
        embed.addFields({
            name: `${rod.emoji} ${rod.name}`,
            value: `Gi√°: ${rod.price}üêü | ƒê·ªô b·ªÅn: ${rod.durability} | Bonus: +${rod.rarityBonus}%`,
            inline: true
        });
    });

    const row = new ActionRowBuilder<StringSelectMenuBuilder>()
        .addComponents(
            new StringSelectMenuBuilder()
                .setCustomId(JSON.stringify({ n: "BuyRod", d: {} }))
                .setPlaceholder("Ch·ªçn lo·∫°i c·∫ßn c√¢u...")
                .addOptions(
                    Object.entries(FISHING_RODS).map(([key, rod]) => 
                        new StringSelectMenuOptionBuilder()
                            .setLabel(`${rod.name} - ${rod.price}üêü`)
                            .setDescription(`ƒê·ªô b·ªÅn: ${rod.durability} | Bonus: +${rod.rarityBonus}%`)
                            .setValue(key)
                            .setEmoji(rod.emoji)
                    )
                )
        );

    const backRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "shop" } }))
                .setLabel("‚¨ÖÔ∏è Quay L·∫°i")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row, backRow],
        ephemeral: true 
    });
}

async function showBaitShop(interaction: any) {
    const embed = new EmbedBuilder()
        .setTitle("ü™± C·ª≠a H√†ng M·ªìi")
        .setDescription("Ch·ªçn lo·∫°i m·ªìi b·∫°n mu·ªën mua:")
        .setColor("#ff9900")
        .setTimestamp();

    // R√∫t g·ªçn th√¥ng tin t·ª´ng lo·∫°i m·ªìi
    Object.entries(BAITS).forEach(([key, bait]) => {
                    embed.addFields({
                name: `${bait.emoji} ${bait.name}`,
                value: `Gi√°: ${bait.price}üêü | Bonus: +${bait.rarityBonus}%`,
                inline: true
            });
    });

    const row = new ActionRowBuilder<StringSelectMenuBuilder>()
        .addComponents(
            new StringSelectMenuBuilder()
                .setCustomId(JSON.stringify({ n: "BuyBait", d: {} }))
                .setPlaceholder("Ch·ªçn lo·∫°i m·ªìi...")
                .addOptions(
                    Object.entries(BAITS).map(([key, bait]) => 
                        new StringSelectMenuOptionBuilder()
                            .setLabel(`${bait.name} - ${bait.price}üêü`)
                            .setDescription(`Bonus: +${bait.rarityBonus}%`)
                            .setValue(key)
                            .setEmoji(bait.emoji)
                    )
                )
        );

    const backRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "shop" } }))
                .setLabel("‚¨ÖÔ∏è Quay L·∫°i")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row, backRow],
        ephemeral: true 
    });
}

async function showFoodShop(interaction: any) {
    const { FISH_FOOD_TYPES } = await import('@/utils/fish-food');
    
    const embed = new EmbedBuilder()
        .setTitle("üçΩÔ∏è C·ª≠a H√†ng Th·ª©c ƒÇn")
        .setDescription("Ch·ªçn lo·∫°i th·ª©c ƒÉn b·∫°n mu·ªën mua:")
        .setColor("#00ff99")
        .setTimestamp();

    // Hi·ªÉn th·ªã th√¥ng tin t·ª´ng lo·∫°i th·ª©c ƒÉn
    Object.entries(FISH_FOOD_TYPES).forEach(([key, food]) => {
        embed.addFields({
            name: `${food.emoji} ${food.name}`,
            value: `Gi√°: ${food.price.toLocaleString()}üêü | Exp: +${food.expBonus} | ${food.description}`,
            inline: false
        });
    });

    const row = new ActionRowBuilder<StringSelectMenuBuilder>()
        .addComponents(
            new StringSelectMenuBuilder()
                .setCustomId(JSON.stringify({ n: "BuyFishFood", d: {} }))
                .setPlaceholder("Ch·ªçn lo·∫°i th·ª©c ƒÉn...")
                .addOptions(
                    Object.entries(FISH_FOOD_TYPES).map(([key, food]) => 
                        new StringSelectMenuOptionBuilder()
                            .setLabel(`${food.name} - ${food.price.toLocaleString()}üêü`)
                            .setDescription(`Exp: +${food.expBonus} | ${food.description}`)
                            .setValue(key)
                            .setEmoji(food.emoji)
                    )
                )
        );

    const backRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "shop" } }))
                .setLabel("‚¨ÖÔ∏è Quay L·∫°i")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row, backRow],
        ephemeral: true 
    });
}

async function showManageEquipment(interaction: any, userId: string, guildId: string) {
    const fishingData = await FishingService.getFishingData(userId, guildId);
    
    const embed = new EmbedBuilder()
        .setTitle("‚öôÔ∏è Qu·∫£n L√Ω Trang B·ªã")
        .setDescription("Th√¥ng tin trang b·ªã hi·ªán t·∫°i c·ªßa b·∫°n:")
        .setColor("#9932cc")
        .setTimestamp();

    // Th√¥ng tin c·∫ßn c√¢u hi·ªán t·∫°i
    const currentRod = fishingData.rods.find((r: any) => r.rodType === fishingData.currentRod);
    if (currentRod) {
        const rodInfo = FISHING_RODS[currentRod.rodType as keyof typeof FISHING_RODS];
        embed.addFields({
            name: "üé£ C·∫ßn C√¢u Hi·ªán T·∫°i",
            value: `${currentRod.rodType} (ƒê·ªô b·ªÅn: ${currentRod.durability}/${rodInfo?.durability || 0})`,
            inline: false
        });
    } else {
        embed.addFields({
            name: "üé£ C·∫ßn C√¢u Hi·ªán T·∫°i",
            value: "‚ùå Kh√¥ng c√≥ c·∫ßn c√¢u n√†o ƒë∆∞·ª£c ch·ªçn",
            inline: false
        });
    }

    // Th√¥ng tin m·ªìi hi·ªán t·∫°i
    const currentBait = fishingData.baits.find((b: any) => b.baitType === fishingData.currentBait);
    if (currentBait) {
        embed.addFields({
            name: "ü™± M·ªìi Hi·ªán T·∫°i",
            value: `${currentBait.baitType} (S·ªë l∆∞·ª£ng: ${currentBait.quantity})`,
            inline: false
        });
    } else {
        embed.addFields({
            name: "ü™± M·ªìi Hi·ªán T·∫°i",
            value: "‚ùå Kh√¥ng c√≥ m·ªìi n√†o ƒë∆∞·ª£c ch·ªçn",
            inline: false
        });
    }

    // Danh s√°ch c·∫ßn c√¢u s·ªü h·ªØu
    if (fishingData.rods.length > 0) {
        const rodList = fishingData.rods.map((r: any) => {
            const rodInfo = FISHING_RODS[r.rodType as keyof typeof FISHING_RODS];
            return `${r.rodType} (${r.durability}/${rodInfo?.durability || 0})`;
        }).join("\n");
        embed.addFields({
            name: "üì¶ C·∫ßn C√¢u S·ªü H·ªØu",
            value: rodList,
            inline: true
        });
    }

    // Danh s√°ch m·ªìi s·ªü h·ªØu
    if (fishingData.baits.length > 0) {
        const baitList = fishingData.baits.map((b: any) => 
            `${b.baitType} (${b.quantity})`
        ).join("\n");
        embed.addFields({
            name: "üì¶ M·ªìi S·ªü H·ªØu",
            value: baitList,
            inline: true
        });
    }

    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "RodSelector", d: {} }))
                .setLabel("üé£ ƒê·ªïi C·∫ßn C√¢u")
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "BaitSelector", d: {} }))
                .setLabel("ü™± ƒê·ªïi M·ªìi")
                .setStyle(ButtonStyle.Primary)
        );

    const backRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(JSON.stringify({ n: "FishingShop", d: { action: "shop" } }))
                .setLabel("‚¨ÖÔ∏è Quay L·∫°i")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row, backRow],
        ephemeral: true 
    });
} 