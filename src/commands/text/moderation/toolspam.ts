import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { SpamProtectionService } from "@/utils/spam-protection";
import { spamProtectionConfig } from "@/config/spam-protection";

export default Bot.createCommand({
    structure: {
        name: "toolspam",
        aliases: ["toolspamstats", "spamdetection", "ph√°t hi·ªán spam"],
    },
    options: {
        permissions: ["ModerateMembers"],
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        try {
            const spamService = SpamProtectionService.getInstance();
            const guildId = message.guildId!;

            // Parse target user
            const targetUser =
                message.mentions.users.first() ||
                (args[0] && args[0].match(/^\d+$/) ? { id: args[0]! } : null) ||
                message.author; // M·∫∑c ƒë·ªãnh xem th·ªëng k√™ c·ªßa ch√≠nh m√¨nh

            if (!targetUser) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Ng∆∞·ªùi D√πng Kh√¥ng H·ª£p L·ªá")
                    .setDescription(
                        "Vui l√≤ng tag m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.\n" +
                        "Ho·∫∑c s·ª≠ d·ª•ng `n.toolspam` ƒë·ªÉ xem th·ªëng k√™ c·ªßa ch√≠nh m√¨nh.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Parse command (optional)
            const command = args[1]?.toLowerCase() || "fishing";

            // L·∫•y th·ªëng k√™ spam
            const stats = spamService.getSpamStats(targetUser.id, guildId, command);

            if (!stats) {
                const embed = new EmbedBuilder()
                    .setTitle("üìä Th·ªëng K√™ Tool Spam")
                    .setDescription(`Kh√¥ng c√≥ d·ªØ li·ªáu spam cho l·ªánh \`${command}\``)
                    .setColor("#51cf66")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            const embed = new EmbedBuilder()
                .setTitle("ü§ñ Th·ªëng K√™ Tool Spam")
                .setDescription(`Ph√¢n t√≠ch tool spam cho l·ªánh \`${command}\``)
                .setThumbnail(
                    "displayAvatarURL" in targetUser ? targetUser.displayAvatarURL() : null,
                )
                .setColor("#ffa500")
                .setTimestamp();

            // Th√¥ng tin c∆° b·∫£n
            embed.addFields(
                {
                    name: "üë§ Ng∆∞·ªùi D√πng",
                    value: `<@${targetUser.id}>`,
                    inline: true,
                },
                {
                    name: "üéØ L·ªánh",
                    value: `\`${command}\``,
                    inline: true,
                },
                {
                    name: "üìä T·ªïng L·∫ßn Th·ª≠",
                    value: `${stats.attempts}`,
                    inline: true,
                }
            );

            // Th√¥ng tin tool spam
            if (spamProtectionConfig.toolSpamDetection.enabled) {
              embed.addFields(
                {
                  name: "ü§ñ Tool Spam C·∫£nh C√°o",
                  value: `${stats.toolSpamWarnings}/${spamProtectionConfig.toolSpamDetection.patternThreshold}`,
                  inline: true,
                },
                {
                  name: "ü§ñ Tool Spam Tr·∫°ng Th√°i",
                  value: stats.isToolSpamBanned ? "üî¥ B·ªã kh√≥a" : "üü¢ B√¨nh th∆∞·ªùng",
                  inline: true,
                },
                {
                  name: "üîç Pattern Threshold",
                  value: `${spamProtectionConfig.toolSpamDetection.patternThreshold} l·∫ßn`,
                  inline: true,
                }
              );

              // Ph√¢n t√≠ch time intervals
              if (stats.timeIntervals.length > 0) {
                const intervals = stats.timeIntervals;
                const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
                const minInterval = Math.min(...intervals);
                const maxInterval = Math.max(...intervals);

                embed.addFields(
                  {
                    name: "‚è±Ô∏è Th·ªùi Gian Gi·ªØa C√°c L·∫ßn",
                    value: `${intervals.length} l·∫ßn ƒëo`,
                    inline: false,
                  },
                  {
                    name: "üìä Th·ªëng K√™ Th·ªùi Gian",
                    value: 
                      `**Trung b√¨nh:** ${avgInterval.toFixed(1)}s\n` +
                      `**Min:** ${minInterval.toFixed(1)}s\n` +
                      `**Max:** ${maxInterval.toFixed(1)}s`,
                    inline: true,
                  }
                );

                // T√¨m patterns
                const patterns = spamService['findTimePatterns'](intervals, spamProtectionConfig.toolSpamDetection.timeTolerance);
                
                if (patterns.length > 0) {
                  let patternText = "";
                  for (let i = 0; i < Math.min(3, patterns.length); i++) {
                    const pattern = patterns[i];
                    patternText += `**${pattern.interval}s:** ${pattern.count} l·∫ßn\n`;
                  }
                  
                  embed.addFields({
                    name: "üîç Patterns Ph√°t Hi·ªán",
                    value: patternText,
                    inline: true,
                  });

                  // ƒê√°nh gi√° m·ª©c ƒë·ªô tool spam
                  const topPattern = patterns[0];
                  const isToolSpam = topPattern.count >= spamProtectionConfig.toolSpamDetection.patternThreshold;
                  
                  embed.addFields({
                    name: "üéØ ƒê√°nh Gi√° Tool Spam",
                    value: isToolSpam ? "üî¥ **C√ì TH·ªÇ L√Ä TOOL SPAM**" : "üü° **C·∫¶N THEO D√ïI TH√äM**",
                    inline: false,
                  });
                }

                // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng interval
                if (intervals.length <= 10) {
                  let intervalText = "";
                  intervals.forEach((interval, index) => {
                    intervalText += `${index + 1}. ${interval.toFixed(1)}s\n`;
                  });
                  
                  embed.addFields({
                    name: "üìã Chi Ti·∫øt Th·ªùi Gian",
                    value: intervalText,
                    inline: false,
                  });
                }
              }

              // Th√¥ng tin ban tool spam
              if (stats.isToolSpamBanned && stats.toolSpamBanExpiresAt) {
                const remainingBan = Math.ceil((stats.toolSpamBanExpiresAt - Date.now()) / 60000);
                embed.addFields({
                  name: "üî® Th·ªùi Gian Kh√≥a Tool Spam C√≤n L·∫°i",
                  value: `${remainingBan} ph√∫t`,
                  inline: false,
                });
              }
            }

            // Th√¥ng tin extended spam monitoring
            if (spamProtectionConfig.extendedSpamMonitoring.enabled) {
              embed.addFields(
                {
                  name: "üìä Extended Spam C·∫£nh C√°o",
                  value: `${stats.extendedWarnings}/${spamProtectionConfig.extendedSpamMonitoring.banThreshold}`,
                  inline: true,
                },
                {
                  name: "üìä Extended Spam Tr·∫°ng Th√°i",
                  value: stats.isExtendedSpamBanned ? "üî¥ B·ªã kh√≥a" : "üü¢ B√¨nh th∆∞·ªùng",
                  inline: true,
                },
                {
                  name: "üìä S·ªë L·∫ßn Trong 5 Ph√∫t",
                  value: `${stats.extendedAttempts}/${spamProtectionConfig.extendedSpamMonitoring.maxAttempts}`,
                  inline: true,
                }
              );

              // Ph√¢n t√≠ch extended attempts history
              if (stats.extendedAttemptsHistory && stats.extendedAttemptsHistory.length > 0) {
                const recentAttempts = stats.extendedAttemptsHistory.slice(-10); // L·∫•y 10 l·∫ßn g·∫ßn nh·∫•t
                const now = Date.now();
                const fiveMinutesAgo = now - (5 * 60 * 1000);
                
                const attemptsInLast5Min = recentAttempts.filter(timestamp => timestamp >= fiveMinutesAgo);
                const avgTimeBetweenAttempts = attemptsInLast5Min.length > 1 
                  ? (attemptsInLast5Min[attemptsInLast5Min.length - 1] - attemptsInLast5Min[0]) / (attemptsInLast5Min.length - 1) / 1000
                  : 0;

                embed.addFields(
                  {
                    name: "üìä Th·ªëng K√™ Extended Spam",
                    value: 
                      `**L·∫ßn th·ª≠ trong 5 ph√∫t:** ${attemptsInLast5Min.length}\n` +
                      `**Th·ªùi gian trung b√¨nh gi·ªØa c√°c l·∫ßn:** ${avgTimeBetweenAttempts.toFixed(1)}s\n` +
                      `**T·ªïng l·∫ßn th·ª≠:** ${stats.extendedAttemptsHistory.length}`,
                    inline: true,
                  }
                );

                // Hi·ªÉn th·ªã timeline g·∫ßn ƒë√¢y
                if (attemptsInLast5Min.length > 0) {
                  let timelineText = "";
                  attemptsInLast5Min.slice(-5).forEach((timestamp, index) => {
                    const timeAgo = Math.floor((now - timestamp) / 1000);
                    timelineText += `${index + 1}. ${timeAgo}s tr∆∞·ªõc\n`;
                  });
                  
                  embed.addFields({
                    name: "‚è∞ Timeline G·∫ßn ƒê√¢y",
                    value: timelineText,
                    inline: false,
                  });
                }
              }

              // Th√¥ng tin ban extended spam
              if (stats.isExtendedSpamBanned && stats.extendedSpamBanExpiresAt) {
                const remainingBan = Math.ceil((stats.extendedSpamBanExpiresAt - Date.now()) / 60000);
                embed.addFields({
                  name: "üî® Th·ªùi Gian Kh√≥a Extended Spam C√≤n L·∫°i",
                  value: `${remainingBan} ph√∫t`,
                  inline: false,
                });
              }

              // Th√¥ng tin frequency spam detection
              if (spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.enabled) {
                embed.addFields(
                  {
                    name: "‚è±Ô∏è Frequency Spam C·∫£nh C√°o",
                    value: `${stats.frequencySpamWarnings}/${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.patternThreshold}`,
                    inline: true,
                  },
                  {
                    name: "‚è±Ô∏è Frequency Spam Tr·∫°ng Th√°i",
                    value: stats.isFrequencySpamBanned ? "üî¥ B·ªã kh√≥a" : "üü¢ B√¨nh th∆∞·ªùng",
                    inline: true,
                  },
                  {
                    name: "‚è±Ô∏è Time Tolerance",
                    value: `¬±${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.timeTolerance}s`,
                    inline: true,
                  }
                );

                // Ph√¢n t√≠ch frequency patterns
                if (stats.extendedTimeIntervals && stats.extendedTimeIntervals.length > 0) {
                  const intervals = stats.extendedTimeIntervals;
                  const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
                  const minInterval = Math.min(...intervals);
                  const maxInterval = Math.max(...intervals);

                  embed.addFields(
                    {
                      name: "‚è±Ô∏è Th·ªùi Gian Gi·ªØa C√°c L·∫ßn (5 Ph√∫t)",
                      value: `${intervals.length} l·∫ßn ƒëo`,
                      inline: false,
                    },
                    {
                      name: "üìä Th·ªëng K√™ Th·ªùi Gian (5 Ph√∫t)",
                      value: 
                        `**Trung b√¨nh:** ${avgInterval.toFixed(1)}s\n` +
                        `**Min:** ${minInterval.toFixed(1)}s\n` +
                        `**Max:** ${maxInterval.toFixed(1)}s`,
                      inline: true,
                    }
                  );

                  // T√¨m frequency patterns
                  const patterns = spamService['findTimePatterns'](intervals, spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.timeTolerance);
                  
                  if (patterns.length > 0) {
                    let patternText = "";
                    for (let i = 0; i < Math.min(3, patterns.length); i++) {
                      const pattern = patterns[i];
                      patternText += `**${pattern.interval}s:** ${pattern.count} l·∫ßn\n`;
                    }
                    
                    embed.addFields({
                      name: "üîç Frequency Patterns Ph√°t Hi·ªán",
                      value: patternText,
                      inline: true,
                    });

                    // ƒê√°nh gi√° m·ª©c ƒë·ªô frequency spam
                    const topPattern = patterns[0];
                    const isFrequencySpam = topPattern.count >= spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.patternThreshold;
                    
                    embed.addFields({
                      name: "üéØ ƒê√°nh Gi√° Frequency Spam",
                      value: isFrequencySpam ? "üî¥ **C√ì TH·ªÇ L√Ä FREQUENCY SPAM**" : "üü° **C·∫¶N THEO D√ïI TH√äM**",
                      inline: false,
                    });
                  }

                  // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng interval trong 5 ph√∫t
                  if (intervals.length <= 10) {
                    let intervalText = "";
                    intervals.forEach((interval, index) => {
                      intervalText += `${index + 1}. ${interval.toFixed(1)}s\n`;
                    });
                    
                    embed.addFields({
                      name: "üìã Chi Ti·∫øt Th·ªùi Gian (5 Ph√∫t)",
                      value: intervalText,
                      inline: false,
                    });
                  }
                }

                // Th√¥ng tin ban frequency spam
                if (stats.isFrequencySpamBanned && stats.frequencySpamBanExpiresAt) {
                  const remainingBan = Math.ceil((stats.frequencySpamBanExpiresAt - Date.now()) / 60000);
                  embed.addFields({
                    name: "üî® Th·ªùi Gian Kh√≥a Frequency Spam C√≤n L·∫°i",
                    value: `${remainingBan} ph√∫t`,
                    inline: false,
                  });
                }
              }
            }

            // Th√¥ng tin c·∫•u h√¨nh tool spam detection
            embed.addFields({
                name: "‚öôÔ∏è C·∫•u H√¨nh Tool Spam Detection",
                value: 
                    `**Min Attempts:** ${spamProtectionConfig.toolSpamDetection.minAttempts} l·∫ßn\n` +
                    `**Time Tolerance:** ¬±${spamProtectionConfig.toolSpamDetection.timeTolerance}s\n` +
                    `**Pattern Threshold:** ${spamProtectionConfig.toolSpamDetection.patternThreshold} l·∫ßn\n` +
                    `**Ban Duration:** ${spamProtectionConfig.toolSpamDetection.banDuration} ph√∫t`,
                inline: false,
            });

            // Th√¥ng tin c·∫•u h√¨nh extended spam monitoring
            if (spamProtectionConfig.extendedSpamMonitoring.enabled) {
              embed.addFields({
                name: "‚öôÔ∏è C·∫•u H√¨nh Extended Spam Monitoring",
                value: 
                  `**Time Window:** ${spamProtectionConfig.extendedSpamMonitoring.timeWindow}s (5 ph√∫t)\n` +
                  `**Max Attempts:** ${spamProtectionConfig.extendedSpamMonitoring.maxAttempts} l·∫ßn\n` +
                  `**Warning Threshold:** ${spamProtectionConfig.extendedSpamMonitoring.warningThreshold} l·∫ßn\n` +
                  `**Ban Threshold:** ${spamProtectionConfig.extendedSpamMonitoring.banThreshold} l·∫ßn\n` +
                  `**Ban Duration:** ${spamProtectionConfig.extendedSpamMonitoring.banDuration} ph√∫t`,
                inline: false,
              });

              // Th√¥ng tin c·∫•u h√¨nh frequency detection
              if (spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.enabled) {
                embed.addFields({
                  name: "‚öôÔ∏è C·∫•u H√¨nh Frequency Detection",
                  value: 
                    `**Min Attempts:** ${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.minAttempts} l·∫ßn\n` +
                    `**Time Tolerance:** ¬±${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.timeTolerance}s\n` +
                    `**Pattern Threshold:** ${spamProtectionConfig.extendedSpamMonitoring.frequencyDetection.patternThreshold} l·∫ßn\n` +
                    `**Ban Duration:** ${spamProtectionConfig.extendedSpamMonitoring.banDuration} ph√∫t`,
                  inline: false,
                });
              }
            }

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error("Error in toolspam command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói Th·ªëng K√™ Tool Spam")
                .setDescription(
                    error instanceof Error
                        ? error.message
                        : "ƒê√£ x·∫£y ra l·ªói khi l·∫•y th·ªëng k√™ tool spam. Vui l√≤ng th·ª≠ l·∫°i sau.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});