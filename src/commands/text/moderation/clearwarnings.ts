import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { WarningService } from "@/utils/warning";
import { ModerationService } from "@/utils/moderation";

export default Bot.createCommand({
    structure: {
        name: "clearwarnings",
        aliases: ["clearwarn", "x√≥a c·∫£nh c√°o", "removewarnings"],
    },
    options: {
        permissions: ["Administrator"],
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        // Ki·ªÉm tra arguments
        if (args.length < 1) {
            const embed = new EmbedBuilder()
                .setTitle("‚ùå C√°ch D√πng Kh√¥ng ƒê√∫ng")
                .setDescription(
                    "**C√°ch d√πng:** `n.clearwarnings <ng∆∞·ªùi d√πng>`\n\n" +
                        "**V√≠ d·ª•:**\n" +
                        "‚Ä¢ `n.clearwarnings @user`\n" +
                        "‚Ä¢ `n.clearwarnings 123456789`\n\n" +
                        "**L∆∞u √Ω:**\n" +
                        "‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ x√≥a c·∫£nh c√°o\n" +
                        "‚Ä¢ L·ªánh n√†y s·∫Ω x√≥a T·∫§T C·∫¢ c·∫£nh c√°o c·ªßa user\n" +
                        "‚Ä¢ Kh√¥ng th·ªÉ ho√†n t√°c sau khi x√≥a\n\n" +
                        "**L·ªánh li√™n quan:**\n" +
                        "‚Ä¢ `n.warnings <user>` - Xem c·∫£nh c√°o c·ªßa user\n" +
                        "‚Ä¢ `n.warnstats` - Th·ªëng k√™ c·∫£nh c√°o server\n\n" +
                        "**L∆∞u √Ω:** T·∫•t c·∫£ l·ªánh c·∫£nh c√°o y√™u c·∫ßu quy·ªÅn Administrator.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            return message.reply({ embeds: [embed] });
        }

        try {
            // Parse target user
            const targetUser =
                message.mentions.users.first() ||
                (args[0] && args[0].match(/^\d+$/) ? { id: args[0]! } : null);

            if (!targetUser) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Ng∆∞·ªùi D√πng Kh√¥ng H·ª£p L·ªá")
                    .setDescription(
                        "Vui l√≤ng tag m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Check if user is trying to clear their own warnings
            if (targetUser.id === message.author.id) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng Th·ªÉ X√≥a C·∫£nh C√°o C·ªßa Ch√≠nh M√¨nh")
                    .setDescription("B·∫°n kh√¥ng th·ªÉ x√≥a c·∫£nh c√°o c·ªßa ch√≠nh m√¨nh.")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            const guildId = message.guildId!;

            // L·∫•y th·ªëng k√™ c·∫£nh c√°o tr∆∞·ªõc khi x√≥a
            const statsBefore = await WarningService.getUserWarningStats(targetUser.id, guildId);
            const activeWarnings = await WarningService.getActiveWarnings(targetUser.id, guildId);

            if (statsBefore.activeWarnings === 0) {
                const embed = new EmbedBuilder()
                    .setTitle("‚úÖ Kh√¥ng C√≥ C·∫£nh C√°o ƒê·ªÉ X√≥a")
                    .setDescription(
                        `<@${targetUser.id}> kh√¥ng c√≥ c·∫£nh c√°o active n√†o ƒë·ªÉ x√≥a.`
                    )
                    .setColor("#51cf66")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // X√°c nh·∫≠n x√≥a c·∫£nh c√°o
            const confirmEmbed = new EmbedBuilder()
                .setTitle("‚ö†Ô∏è X√°c Nh·∫≠n X√≥a C·∫£nh C√°o")
                .setDescription(
                    `**B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ c·∫£nh c√°o c·ªßa <@${targetUser.id}>?**\n\n` +
                    `üìä **Th·ªëng k√™ hi·ªán t·∫°i:**\n` +
                    `‚Ä¢ T·ªïng c·∫£nh c√°o: **${statsBefore.totalWarnings}**\n` +
                    `‚Ä¢ C·∫£nh c√°o active: **${statsBefore.activeWarnings}**\n` +
                    `‚Ä¢ Level 1: **${statsBefore.warningLevels.level1}**\n` +
                    `‚Ä¢ Level 2: **${statsBefore.warningLevels.level2}**\n` +
                    `‚Ä¢ Level 3: **${statsBefore.warningLevels.level3}**\n\n` +
                    `‚ö†Ô∏è **L∆∞u √Ω:** H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`
                )
                .setColor("#ffa500")
                .setTimestamp();

            const confirmMsg = await message.reply({ embeds: [confirmEmbed] });

            // Th√™m reactions ƒë·ªÉ x√°c nh·∫≠n
            await confirmMsg.react('‚úÖ');
            await confirmMsg.react('‚ùå');

            // ƒê·ª£i reaction t·ª´ ng∆∞·ªùi d√πng
            const filter = (reaction: any, user: any) => 
                ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id;

            try {
                const collected = await confirmMsg.awaitReactions({ filter, max: 1, time: 30000 });

                if (collected.size === 0) {
                    const timeoutEmbed = new EmbedBuilder()
                        .setTitle("‚è∞ H·∫øt Th·ªùi Gian")
                        .setDescription("Kh√¥ng c√≥ ph·∫£n h·ªìi. H·ªßy b·ªè x√≥a c·∫£nh c√°o.")
                        .setColor("#ffa500")
                        .setTimestamp();

                    return confirmMsg.edit({ embeds: [timeoutEmbed] });
                }

                const reaction = collected.first();
                if (reaction?.emoji.name === '‚ùå') {
                    const cancelEmbed = new EmbedBuilder()
                        .setTitle("‚ùå ƒê√£ H·ªßy")
                        .setDescription("ƒê√£ h·ªßy b·ªè x√≥a c·∫£nh c√°o.")
                        .setColor("#ffa500")
                        .setTimestamp();

                    return confirmMsg.edit({ embeds: [cancelEmbed] });
                }

                // X√≥a t·∫•t c·∫£ c·∫£nh c√°o
                await WarningService.clearUserWarnings(targetUser.id, guildId, message.author.id);

                // L·∫•y th·ªëng k√™ sau khi x√≥a
                const statsAfter = await WarningService.getUserWarningStats(targetUser.id, guildId);

                // Ghi log moderation
                await ModerationService.logAction({
                    guildId: guildId,
                    targetUserId: targetUser.id,
                    moderatorId: message.author.id,
                    action: "clear_warnings",
                    reason: `Cleared ${statsBefore.activeWarnings} active warnings`,
                    channelId: message.channelId,
                    messageId: message.id
                });

                // T·∫°o embed th√†nh c√¥ng
                const successEmbed = new EmbedBuilder()
                    .setTitle("‚úÖ ƒê√£ X√≥a C·∫£nh C√°o")
                    .setDescription(
                        `**${message.author.username}** ƒë√£ x√≥a t·∫•t c·∫£ c·∫£nh c√°o c·ªßa **<@${targetUser.id}>**\n\n` +
                        `üë§ **Ng∆∞·ªùi d√πng:** <@${targetUser.id}>\n` +
                        `üìä **Tr∆∞·ªõc khi x√≥a:**\n` +
                        `‚Ä¢ C·∫£nh c√°o active: **${statsBefore.activeWarnings}**\n` +
                        `‚Ä¢ Level 1: **${statsBefore.warningLevels.level1}**\n` +
                        `‚Ä¢ Level 2: **${statsBefore.warningLevels.level2}**\n` +
                        `‚Ä¢ Level 3: **${statsBefore.warningLevels.level3}**\n\n` +
                        `üìä **Sau khi x√≥a:**\n` +
                        `‚Ä¢ C·∫£nh c√°o active: **${statsAfter.activeWarnings}**\n` +
                        `‚Ä¢ Tr·∫°ng th√°i: ‚úÖ **S·∫°ch s·∫Ω**\n\n` +
                        `üïê **Th·ªùi gian:** <t:${Math.floor(Date.now() / 1000)}:F>`
                    )
                    .setColor("#51cf66")
                    .setThumbnail(
                        "displayAvatarURL" in targetUser ? targetUser.displayAvatarURL() : null,
                    )
                    .setFooter({
                        text: `X√≥a b·ªüi ${message.author.username}`,
                        iconURL: message.author.displayAvatarURL(),
                    })
                    .setTimestamp();

                confirmMsg.edit({ embeds: [successEmbed] });

            } catch (error) {
                console.error("Error in confirmation:", error);
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói X√°c Nh·∫≠n")
                    .setDescription("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x√°c nh·∫≠n.")
                    .setColor("#ff0000")
                    .setTimestamp();

                confirmMsg.edit({ embeds: [errorEmbed] });
            }

        } catch (error) {
            console.error("Error in clearwarnings command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå X√≥a C·∫£nh C√°o Th·∫•t B·∫°i")
                .setDescription(
                    error instanceof Error
                        ? error.message
                        : "ƒê√£ x·∫£y ra l·ªói khi x√≥a c·∫£nh c√°o. Vui l√≤ng th·ª≠ l·∫°i sau.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});