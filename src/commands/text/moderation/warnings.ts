import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { WarningService } from "@/utils/warning";

export default Bot.createCommand({
    structure: {
        name: "warnings",
        aliases: ["warninglist", "warnlist", "c·∫£nh c√°o list"],
    },
    options: {
        permissions: ["Administrator"],
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        try {
            // Parse target user
            const targetUser =
                message.mentions.users.first() ||
                (args[0] && args[0].match(/^\d+$/) ? { id: args[0]! } : null) ||
                message.author; // M·∫∑c ƒë·ªãnh xem c·∫£nh c√°o c·ªßa ch√≠nh m√¨nh

            if (!targetUser) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Ng∆∞·ªùi D√πng Kh√¥ng H·ª£p L·ªá")
                    .setDescription(
                        "Vui l√≤ng tag m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.\n" +
                        "Ho·∫∑c s·ª≠ d·ª•ng `n.warnings` ƒë·ªÉ xem c·∫£nh c√°o c·ªßa ch√≠nh m√¨nh.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            const guildId = message.guildId!;

            // L·∫•y th·ªëng k√™ c·∫£nh c√°o
            const stats = await WarningService.getUserWarningStats(targetUser.id, guildId);
            const activeWarnings = await WarningService.getActiveWarnings(targetUser.id, guildId);

            // T·∫°o embed
            const embed = new EmbedBuilder()
                .setTitle(`üìã C·∫£nh C√°o - ${targetUser.username}`)
                .setDescription(
                    `**Th·ªëng k√™ c·∫£nh c√°o c·ªßa <@${targetUser.id}>**\n\n` +
                    `üìä **T·ªïng quan:**\n` +
                    `‚Ä¢ T·ªïng c·∫£nh c√°o: **${stats.totalWarnings}**\n` +
                    `‚Ä¢ C·∫£nh c√°o active: **${stats.activeWarnings}**\n` +
                    `‚Ä¢ Tr·∫°ng th√°i: ${stats.activeWarnings >= 3 ? "üî® **B·ªã ban**" : stats.activeWarnings > 0 ? "‚ö†Ô∏è **C√≥ c·∫£nh c√°o**" : "‚úÖ **S·∫°ch s·∫Ω"}\n\n` +
                    `üìà **Chi ti·∫øt theo level:**\n` +
                    `‚Ä¢ Level 1: **${stats.warningLevels.level1}**\n` +
                    `‚Ä¢ Level 2: **${stats.warningLevels.level2}**\n` +
                    `‚Ä¢ Level 3: **${stats.warningLevels.level3}**`
                )
                .setColor(stats.activeWarnings >= 3 ? "#ff0000" : stats.activeWarnings > 0 ? "#ffa500" : "#51cf66")
                .setThumbnail(
                    "displayAvatarURL" in targetUser ? targetUser.displayAvatarURL() : null,
                )
                .setTimestamp();

            // Th√™m danh s√°ch c·∫£nh c√°o active n·∫øu c√≥
            if (activeWarnings.length > 0) {
                const warningList = activeWarnings.map((warning, index) => {
                    const levelEmoji = warning.warningLevel === 1 ? "‚ö†Ô∏è" : warning.warningLevel === 2 ? "üö®" : "üî®";
                    const levelColor = warning.warningLevel === 1 ? "#ffa500" : warning.warningLevel === 2 ? "#ff6b6b" : "#ff0000";
                    
                    return `${levelEmoji} **Level ${warning.warningLevel}** - ${warning.reason}\n` +
                           `üìù **L√Ω do:** ${warning.reason}\n` +
                           `‚è∞ **Th·ªùi gian:** <t:${Math.floor(new Date(warning.createdAt).getTime() / 1000)}:R>\n` +
                           `üëÆ **Moderator:** <@${warning.moderatorId}>\n`;
                }).join("\n");

                embed.addFields({
                    name: "üìã Danh S√°ch C·∫£nh C√°o Active",
                    value: warningList,
                    inline: false
                });
            } else {
                embed.addFields({
                    name: "‚úÖ Kh√¥ng C√≥ C·∫£nh C√°o",
                    value: "User n√†y kh√¥ng c√≥ c·∫£nh c√°o active n√†o.",
                    inline: false
                });
            }

            // Th√™m th√¥ng tin v·ªÅ h·ªá th·ªëng c·∫£nh c√°o
            embed.addFields({
                name: "‚ÑπÔ∏è H·ªá Th·ªëng C·∫£nh C√°o",
                value: 
                    "**Level 1:** C·∫£nh c√°o nh·∫π - C·∫£nh b√°o user\n" +
                    "**Level 2:** C·∫£nh c√°o nghi√™m tr·ªçng - C·∫£nh b√°o m·∫°nh\n" +
                    "**Level 3:** T·ª± ƒë·ªông ban - Ban kh·ªèi server\n\n" +
                    "**L·ªánh li√™n quan:**\n" +
                    "‚Ä¢ `n.warn <user> <reason>` - C·∫£nh c√°o user\n" +
                    "‚Ä¢ `n.clearwarnings <user>` - X√≥a t·∫•t c·∫£ c·∫£nh c√°o\n\n" +
                    "**L∆∞u √Ω:** T·∫•t c·∫£ l·ªánh c·∫£nh c√°o y√™u c·∫ßu quy·ªÅn Administrator.",
                inline: false
            });

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error("Error in warnings command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói Xem C·∫£nh C√°o")
                .setDescription(
                    error instanceof Error
                        ? error.message
                        : "ƒê√£ x·∫£y ra l·ªói khi xem c·∫£nh c√°o. Vui l√≤ng th·ª≠ l·∫°i sau.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});