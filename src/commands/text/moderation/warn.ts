import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { WarningService } from "@/utils/warning";
import { ModerationService } from "@/utils/moderation";
import { banDB } from "@/utils/ban-db";
import { emojis } from "@/config";

export default Bot.createCommand({
    structure: {
        name: "warn",
        aliases: ["warning", "c·∫£nh c√°o", "caution"],
    },
    options: {
        permissions: ["Administrator"],
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        // Ki·ªÉm tra arguments
        if (args.length < 1) {
            const embed = new EmbedBuilder()
                .setTitle("‚ùå C√°ch D√πng Kh√¥ng ƒê√∫ng")
                .setDescription(
                    "**C√°ch d√πng:** `n.warn <ng∆∞·ªùi d√πng> [l√Ω do]`\n\n" +
                        "**V√≠ d·ª•:**\n" +
                        "‚Ä¢ `n.warn @user spam`\n" +
                        "‚Ä¢ `n.warn @user vi ph·∫°m n·ªôi quy`\n" +
                        "‚Ä¢ `n.warn 123456789 qu·∫•y r·ªëi`\n\n" +
                        "**H·ªá th·ªëng c·∫£nh c√°o:**\n" +
                        "‚Ä¢ **L·∫ßn 1:** C·∫£nh c√°o nh·∫π\n" +
                        "‚Ä¢ **L·∫ßn 2:** C·∫£nh c√°o nghi√™m tr·ªçng\n" +
                        "‚Ä¢ **L·∫ßn 3:** T·ª± ƒë·ªông ban kh·ªèi server\n\n" +
                        "**L·ªánh li√™n quan:**\n" +
                        "‚Ä¢ `n.warnings <user>` - Xem c·∫£nh c√°o c·ªßa user\n" +
                        "‚Ä¢ `n.warnlist` - Xem danh s√°ch c·∫£nh c√°o server\n" +
                        "‚Ä¢ `n.warnstats` - Th·ªëng k√™ c·∫£nh c√°o\n" +
                        "‚Ä¢ `n.clearwarnings <user>` - X√≥a t·∫•t c·∫£ c·∫£nh c√°o c·ªßa user\n\n" +
                        "**L∆∞u √Ω:** L·ªánh n√†y y√™u c·∫ßu quy·ªÅn Administrator.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            return message.reply({ embeds: [embed] });
        }

        try {
            // Parse target user
            const targetUser =
                message.mentions.users.first() ||
                (args[0] && args[0].match(/^\d+$/) ? { id: args[0]! } : null);

            if (!targetUser) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Ng∆∞·ªùi D√πng Kh√¥ng H·ª£p L·ªá")
                    .setDescription(
                        "Vui l√≤ng tag m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Check if user is trying to warn themselves
            if (targetUser.id === message.author.id) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng Th·ªÉ T·ª± C·∫£nh C√°o")
                    .setDescription("B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o ch√≠nh m√¨nh.")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Check if user is trying to warn the bot
            if (targetUser.id === message.client.user.id) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng Th·ªÉ C·∫£nh C√°o Bot")
                    .setDescription("B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o bot.")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Parse reason
            const reason = args.slice(1).join(" ") || "Kh√¥ng c√≥ l√Ω do";

            // L·∫•y th·ªëng k√™ c·∫£nh c√°o hi·ªán t·∫°i c·ªßa user
            const currentStats = await WarningService.getUserWarningStats(targetUser.id, message.guildId!);
            const currentLevel = currentStats.activeWarnings;

            // Ki·ªÉm tra xem user ƒë√£ c√≥ 3 c·∫£nh c√°o ch∆∞a
            if (currentLevel >= 3) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng Th·ªÉ C·∫£nh C√°o")
                    .setDescription(
                        `<@${targetUser.id}> ƒë√£ c√≥ ƒë·ªß 3 c·∫£nh c√°o!\n\n` +
                        `**Th·ªëng k√™ hi·ªán t·∫°i:**\n` +
                        `‚Ä¢ T·ªïng c·∫£nh c√°o: ${currentStats.totalWarnings}\n` +
                        `‚Ä¢ C·∫£nh c√°o active: ${currentStats.activeWarnings}\n` +
                        `‚Ä¢ Level 1: ${currentStats.warningLevels.level1}\n` +
                        `‚Ä¢ Level 2: ${currentStats.warningLevels.level2}\n` +
                        `‚Ä¢ Level 3: ${currentStats.warningLevels.level3}\n\n` +
                        `**H√†nh ƒë·ªông:** User s·∫Ω b·ªã ban t·ª± ƒë·ªông.`
                    )
                    .setColor("#ff6b6b")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // T·∫°o c·∫£nh c√°o m·ªõi
            const warningData = {
                userId: targetUser.id,
                guildId: message.guildId!,
                moderatorId: message.author.id,
                warningLevel: currentLevel + 1,
                reason: reason,
                message: ""
            };

            const warning = await WarningService.createWarning(warningData);

            // T·∫°o message c·∫£nh c√°o
            const warningMessage = WarningService.createWarningMessage(
                warning.warningLevel,
                reason
            );

            // T·∫°o embed c·∫£nh c√°o
            const embed = new EmbedBuilder()
                .setTitle(`üö® C·∫£nh C√°o L·∫ßn ${warning.warningLevel}`)
                .setDescription(
                    `**${message.author.username}** ƒë√£ c·∫£nh c√°o **<@${targetUser.id}>**\n\n` +
                    `üë§ **Ng∆∞·ªùi d√πng:** <@${targetUser.id}>\n` +
                    `üìù **L√Ω do:** ${reason}\n` +
                    `‚ö†Ô∏è **C·∫£nh c√°o:** ${currentLevel + 1}/3\n` +
                    `üïê **Th·ªùi gian:** <t:${Math.floor(Date.now() / 1000)}:F>\n\n` +
                    warningMessage
                )
                .setColor(warning.warningLevel === 1 ? "#ffa500" : warning.warningLevel === 2 ? "#ff6b6b" : "#ff0000")
                .setThumbnail(
                    "displayAvatarURL" in targetUser ? targetUser.displayAvatarURL() : null,
                )
                .setFooter({
                    text: `C·∫£nh c√°o b·ªüi ${message.author.username}`,
                    iconURL: message.author.displayAvatarURL(),
                })
                .setTimestamp();

            // Ghi l·∫°i moderation log
            await ModerationService.logAction({
                guildId: message.guildId!,
                targetUserId: targetUser.id,
                moderatorId: message.author.id,
                action: "warn",
                reason: `Warning level ${warning.warningLevel}: ${reason}`,
                channelId: message.channelId,
                messageId: message.id
            });

            // Ki·ªÉm tra xem c√≥ n√™n ban t·ª± ƒë·ªông kh√¥ng
            if (warning.warningLevel === 3) {
                try {
                    // Ban user
                    await message.guild!.members.ban(targetUser.id, {
                        reason: `Auto ban - 3 warnings: ${reason}`,
                        deleteMessageDays: 1
                    });

                    // L∆∞u v√†o database
                    await banDB.createBan(
                        targetUser.id,
                        message.guildId!,
                        message.author.id,
                        `Auto ban - 3 warnings: ${reason}`,
                        "permanent"
                    );

                    // Th√™m th√¥ng b√°o ban v√†o embed
                    embed.addFields({
                        name: "üî® T·ª± ƒê·ªông Ban",
                        value: `<@${targetUser.id}> ƒë√£ b·ªã ban t·ª± ƒë·ªông do ƒë·∫°t 3 c·∫£nh c√°o!`,
                        inline: false
                    });

                    // Ghi log ban
                    await ModerationService.logAction({
                        guildId: message.guildId!,
                        targetUserId: targetUser.id,
                        moderatorId: message.author.id,
                        action: "ban",
                        reason: `Auto ban - 3 warnings: ${reason}`,
                        channelId: message.channelId,
                        messageId: message.id
                    });

                } catch (banError) {
                    console.error("Error auto-banning user:", banError);
                    embed.addFields({
                        name: "‚ö†Ô∏è L·ªói Ban T·ª± ƒê·ªông",
                        value: "Kh√¥ng th·ªÉ ban user t·ª± ƒë·ªông. Vui l√≤ng ban th·ªß c√¥ng.",
                        inline: false
                    });
                }
            }

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error("Error in warn command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå C·∫£nh C√°o Th·∫•t B·∫°i")
                .setDescription(
                    error instanceof Error
                        ? error.message
                        : "ƒê√£ x·∫£y ra l·ªói khi c·∫£nh c√°o ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});