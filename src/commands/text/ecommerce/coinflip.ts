import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { addMoney, getBalance, subtractMoney } from "@/utils/ecommerce";

const maxBet = 100;
const spin = "ü™ô";
const heads = "ü™ô";
const tails = "ü™ô";

export default Bot.createCommand({
    structure: {
        name: "coinflip",
        aliases: ["cf", "coin", "flip"],
    },
    options: {
        cooldown: 15000,
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;
        const args = message.content.split(" ").slice(1);

        try {
            // Ki·ªÉm tra c√∫ ph√°p
            let bet: number | "all" = 1;
            let arg1 = args[0];

            // X·ª≠ l√Ω tham s·ªë bet
            if (arg1 && !isNaN(parseInt(arg1))) {
                bet = parseInt(arg1);
                arg1 = args[1];
            } else if (arg1 && arg1.toLowerCase() === "all") {
                bet = "all";
                arg1 = args[1];
            } else if (args[1] && !isNaN(parseInt(args[1]))) {
                bet = parseInt(args[1]);
            } else if (args[1] && args[1].toLowerCase() === "all") {
                bet = "all";
            } else if (args.length !== 1 && args.length !== 2) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói C√∫ Ph√°p")
                    .setDescription(
                        "C√∫ ph√°p: `coinflip [head|tail] [s·ªë ti·ªÅn]`\nV√≠ d·ª•: `coinflip head 100` ho·∫∑c `coinflip all`",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();
                return message.reply({ embeds: [errorEmbed] });
            }

            // X·ª≠ l√Ω l·ª±a ch·ªçn head/tail
            let choice = "h";
            if (arg1 !== undefined) {
                arg1 = arg1.toLowerCase();
                if (arg1 === "heads" || arg1 === "h" || arg1 === "head") {
                    choice = "h";
                } else if (arg1 === "tails" || arg1 === "t" || arg1 === "tail") {
                    choice = "t";
                }
            }

            // Ki·ªÉm tra bet h·ª£p l·ªá
            if (bet !== "all" && bet === 0) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("B·∫°n kh√¥ng th·ªÉ ƒë·∫∑t c∆∞·ª£c 0 AniCoin!")
                    .setColor("#ff0000")
                    .setTimestamp();
                return message.reply({ embeds: [errorEmbed] });
            }

            if (bet !== "all" && bet < 0) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng th·ªÉ √¢m!")
                    .setColor("#ff0000")
                    .setTimestamp();
                return message.reply({ embeds: [errorEmbed] });
            }

            // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i
            const currentBalance = await getBalance(userId, guildId);

            // X·ª≠ l√Ω bet "all"
            if (bet === "all") {
                bet = currentBalance;
            }

            // Chuy·ªÉn bet th√†nh number ƒë·ªÉ x·ª≠ l√Ω
            const betAmount = bet as number;

            // Ki·ªÉm tra s·ªë d∆∞
            if (currentBalance === 0 || currentBalance < betAmount) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("üö´ Kh√¥ng ƒê·ªß Ti·ªÅn")
                    .setDescription(
                        `**${message.author.username}**, b·∫°n kh√¥ng c√≥ ƒë·ªß AniCoin!\nS·ªë d∆∞ hi·ªán t·∫°i: **${currentBalance}** AniCoin`,
                    )
                    .setColor("#ff6b6b")
                    .setTimestamp();
                return message.reply({ embeds: [errorEmbed] });
            }

            // Gi·ªõi h·∫°n bet t·ªëi ƒëa
            if (maxBet && betAmount > maxBet) {
                bet = maxBet;
            }

            if (betAmount <= 0) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("B·∫°n kh√¥ng c√≥ AniCoin ƒë·ªÉ c∆∞·ª£c!")
                    .setColor("#ff0000")
                    .setTimestamp();
                return message.reply({ embeds: [errorEmbed] });
            }

            // Random k·∫øt qu·∫£
            const rand = Math.floor(Math.random() * 2); // 0 = tails, 1 = heads
            let win = false;

            // Ki·ªÉm tra th·∫Øng thua
            if (rand === 0 && choice === "t")
            { win = true; } // tails
            else if (rand === 1 && choice === "h") { win = true; } // heads

            // C·∫≠p nh·∫≠t s·ªë d∆∞
            if (win) {
                await addMoney(userId, guildId, bet, `Coinflip win - bet: ${bet}`);
            } else {
                await subtractMoney(userId, guildId, bet, `Coinflip lose - bet: ${bet}`);
            }

            // T·∫°o embed th√¥ng b√°o
            const choiceText = choice === "h" ? "**heads**" : "**tails**";
            const resultText = rand === 1 ? "heads" : "tails";
            const resultEmoji = rand === 1 ? heads : tails;

            const embed = new EmbedBuilder()
                .setTitle("ü™ô Coinflip")
                .setDescription(
                    `**${message.author.username}** ƒë√£ c∆∞·ª£c **${bet}** AniCoin v√† ch·ªçn ${choiceText}\n\n` +
                        `ƒê·ªìng xu quay... ${spin}`,
                )
                .setColor("#ffd93d")
                .setThumbnail(message.author.displayAvatarURL())
                .setTimestamp();

            const messageSent = await message.reply({ embeds: [embed] });

            // Sau 2 gi√¢y, c·∫≠p nh·∫≠t k·∫øt qu·∫£
            setTimeout(async () => {
                const resultEmbed = new EmbedBuilder()
                    .setTitle("ü™ô K·∫øt Qu·∫£ Coinflip")
                    .setDescription(
                        `**${message.author.username}** ƒë√£ c∆∞·ª£c **${bet}** AniCoin v√† ch·ªçn ${choiceText}\n\n` +
                            `ƒê·ªìng xu quay... ${resultEmoji} v√† k·∫øt qu·∫£ l√† **${resultText}**\n\n` +
                            (win
                                ? `üéâ **B·∫°n ƒë√£ th·∫Øng ${bet * 2} AniCoin!** üéâ`
                                : `üò¢ **B·∫°n ƒë√£ m·∫•t ${bet} AniCoin...** üò¢`),
                    )
                    .setColor(win ? "#51cf66" : "#ff6b6b")
                    .setThumbnail(message.author.displayAvatarURL())
                    .setFooter({
                        text: `S·ªë d∆∞ m·ªõi: ${await getBalance(userId, guildId)} AniCoin`,
                        iconURL: message.author.displayAvatarURL(),
                    })
                    .setTimestamp();

                messageSent.edit({ embeds: [resultEmbed] });
            }, 2000);
        } catch (error) {
            console.error("Error in coinflip command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω coinflip. Vui l√≤ng th·ª≠ l·∫°i sau.")
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});
