import { Message, EmbedBuilder } from 'discord.js';
import { Bot } from '@/classes';
import { BankService } from '../../../utils/bank-service';
import { fishCoinDB } from '../../../utils/fish-coin';
import prisma from '../../../utils/prisma';

export default Bot.createCommand({
    structure: {
        name: "bank",
        aliases: ["ng√¢n h√†ng", "exchange"],
    },
    options: {
        cooldown: 1000,
        permissions: ["SendMessages", "EmbedLinks"],
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;
        const args = message.content.split(" ").slice(1);

        if (args.length === 0) {
            return await showBankInfo(message);
        }

        const subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "ani":
            case "anicoin":
            case "anitofish":
                return await exchangeAniToFish(message, args.slice(1));
            case "fish":
            case "fishcoin":
            case "fishtoani":
                return await exchangeFishToAni(message, args.slice(1));
            case "rates":
            case "t·ª∑ l·ªá":
            case "tile":
                return await showExchangeRates(message);
            case "history":
            case "l·ªãch s·ª≠":
            case "lichsu":
                return await showBankHistory(message);
            case "calculate":
            case "t√≠nh":
            case "tinh":
                return await calculateExchange(message, args.slice(1));
            case "help":
            case "h∆∞·ªõng d·∫´n":
            case "huongdan":
                return await showHelp(message);
            default:
                return await showBankInfo(message);
        }
    },
});

async function showBankInfo(message: Message) {
    const { BankUI } = await import('../../../components/MessageComponent/BankUI');
    
    const embed = BankUI.createBankInfoEmbed(message.author.id, message.guildId!);
    const buttons = BankUI.createBankButtons();

    await message.reply({ embeds: [embed], components: buttons });
}

async function exchangeAniToFish(message: Message, args: string[]) {
    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.bank ani <s·ªë ti·ªÅn>`");
    }

    const amount = parseInt(args[0]);
    if (isNaN(amount) || amount <= 0) {
        return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
    }

    try {
        const result = await BankService.exchangeAniToFish(message.author.id, message.guildId!, amount);

        if (!result.success) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Chuy·ªÉn ƒê·ªïi Th·∫•t B·∫°i")
                .setDescription(result.error || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh")
                .setColor("#ff0000")
                .setTimestamp();

            return await message.reply({ embeds: [errorEmbed] });
        }

        // L·∫•y balance m·ªõi
        const user = await prisma.user.findUnique({
            where: { userId_guildId: { userId: message.author.id, guildId: message.guildId! } }
        });
        const fishBalance = await fishCoinDB.getFishBalance(message.author.id, message.guildId!);

        const successEmbed = new EmbedBuilder()
            .setTitle("‚úÖ Chuy·ªÉn ƒê·ªïi Th√†nh C√¥ng!")
            .setDescription(
                `**${message.author.displayName || message.author.username || 'Unknown User'}** ƒë√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!\n\n` +
                `üí∞ **ƒê√£ chuy·ªÉn:** ${result.amount.toLocaleString()} AniCoin\n` +
                `üêü **Nh·∫≠n ƒë∆∞·ª£c:** ${result.received.toLocaleString()} FishCoin\n` +
                `üìä **T·ª∑ l·ªá:** 1‚Ç≥ = ${result.exchangeRate}üêü\n\n` +
                `üí≥ **S·ªë d∆∞ m·ªõi:**\n` +
                `‚Ä¢ AniCoin: ${Number(user?.balance || 0).toLocaleString()}‚Ç≥\n` +
                `‚Ä¢ FishCoin: ${fishBalance.toString()}üêü`
            )
            .setColor("#00ff00")
            .setTimestamp();

        await message.reply({ embeds: [successEmbed] });

    } catch (error) {
        console.error('Error in exchangeAniToFish:', error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói H·ªá Th·ªëng")
            .setDescription("ƒê√£ x·∫£y ra l·ªói khi chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá. Vui l√≤ng th·ª≠ l·∫°i sau!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function exchangeFishToAni(message: Message, args: string[]) {
    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.bank fish <s·ªë ti·ªÅn>`");
    }

    const amount = parseInt(args[0]);
    if (isNaN(amount) || amount <= 0) {
        return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
    }

    try {
        const result = await BankService.exchangeFishToAni(message.author.id, message.guildId!, amount);

        if (!result.success) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Chuy·ªÉn ƒê·ªïi Th·∫•t B·∫°i")
                .setDescription(result.error || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh")
                .setColor("#ff0000")
                .setTimestamp();

            return await message.reply({ embeds: [errorEmbed] });
        }

        // L·∫•y balance m·ªõi
        const user = await prisma.user.findUnique({
            where: { userId_guildId: { userId: message.author.id, guildId: message.guildId! } }
        });
        const fishBalance = await fishCoinDB.getFishBalance(message.author.id, message.guildId!);

        const successEmbed = new EmbedBuilder()
            .setTitle("‚úÖ Chuy·ªÉn ƒê·ªïi Th√†nh C√¥ng!")
            .setDescription(
                `**${message.author.displayName || message.author.username || 'Unknown User'}** ƒë√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!\n\n` +
                `üêü **ƒê√£ chuy·ªÉn:** ${result.amount.toLocaleString()} FishCoin\n` +
                `üí∞ **Nh·∫≠n ƒë∆∞·ª£c:** ${result.received.toLocaleString()} AniCoin\n` +
                `üìä **T·ª∑ l·ªá:** 1üêü = ${result.exchangeRate}‚Ç≥\n\n` +
                `üí≥ **S·ªë d∆∞ m·ªõi:**\n` +
                `‚Ä¢ AniCoin: ${Number(user?.balance || 0).toLocaleString()}‚Ç≥\n` +
                `‚Ä¢ FishCoin: ${fishBalance.toString()}üêü`
            )
            .setColor("#00ff00")
            .setTimestamp();

        await message.reply({ embeds: [successEmbed] });

    } catch (error) {
        console.error('Error in exchangeFishToAni:', error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói H·ªá Th·ªëng")
            .setDescription("ƒê√£ x·∫£y ra l·ªói khi chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá. Vui l√≤ng th·ª≠ l·∫°i sau!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function showExchangeRates(message: Message) {
    const rates = BankService.getExchangeRates();

    const embed = new EmbedBuilder()
        .setTitle("üìä T·ª∑ L·ªá Chuy·ªÉn ƒê·ªïi Ti·ªÅn T·ªá")
        .setDescription(
            "**üè¶ Ng√¢n H√†ng Chuy·ªÉn ƒê·ªïi Ti·ªÅn T·ªá**\n\n" +
            "**üí∞ AniCoin ‚Üí FishCoin:**\n" +
            `‚Ä¢ T·ªëi thi·ªÉu: ${rates.aniToFish.minAmount.toLocaleString()} AniCoin\n` +
            `‚Ä¢ Nh·∫≠n ƒë∆∞·ª£c: ${rates.aniToFish.fishReceived} FishCoin\n` +
            `‚Ä¢ T·ª∑ l·ªá: 1‚Ç≥ = ${rates.aniToFish.rate}üêü\n\n` +
            "**üêü FishCoin ‚Üí AniCoin:**\n" +
            `‚Ä¢ T·ªëi thi·ªÉu: ${rates.fishToAni.minAmount.toLocaleString()} FishCoin\n` +
            `‚Ä¢ Nh·∫≠n ƒë∆∞·ª£c: ${rates.fishToAni.aniReceived} AniCoin\n` +
            `‚Ä¢ T·ª∑ l·ªá: 1üêü = ${rates.fishToAni.rate}‚Ç≥\n\n` +
            "**üí° V√≠ D·ª•:**\n" +
            `‚Ä¢ 2,000‚Ç≥ ‚Üí 1,000üêü\n` +
            `‚Ä¢ 2,000üêü ‚Üí 3,000‚Ç≥`
        )
        .setColor("#0099ff")
        .setTimestamp();

    await message.reply({ embeds: [embed] });
}

async function showBankHistory(message: Message) {
    try {
        const history = await BankService.getBankHistory(message.author.id, message.guildId!, 10);

        if (history.length === 0) {
            const embed = new EmbedBuilder()
                .setTitle("üìã L·ªãch S·ª≠ Giao D·ªãch Ng√¢n H√†ng")
                .setDescription("B·∫°n ch∆∞a c√≥ giao d·ªãch n√†o trong ng√¢n h√†ng.")
                .setColor("#ffa500")
                .setTimestamp();

            return await message.reply({ embeds: [embed] });
        }

        const historyText = history.map((tx, index) => {
            const amount = Number(tx.amount);
            const isPositive = tx.type === 'add';
            const sign = isPositive ? '+' : '-';
            const currency = tx.currency === 'AniCoin' ? '‚Ç≥' : 'üêü';
            
            return `${index + 1}. ${sign}${Math.abs(amount).toLocaleString()}${currency} - ${tx.description}`;
        }).join('\n');

        const embed = new EmbedBuilder()
            .setTitle("üìã L·ªãch S·ª≠ Giao D·ªãch Ng√¢n H√†ng")
            .setDescription(
                `**${message.author.displayName || message.author.username || 'Unknown User'}** - 10 giao d·ªãch g·∫ßn nh·∫•t:\n\n${historyText}`
            )
            .setColor("#0099ff")
            .setTimestamp();

        await message.reply({ embeds: [embed] });

    } catch (error) {
        console.error('Error showing bank history:', error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói H·ªá Th·ªëng")
            .setDescription("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function calculateExchange(message: Message, args: string[]) {
    if (args.length < 2) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.bank calculate <ani/fish> <s·ªë ti·ªÅn>`");
    }

    const currency = args[0].toLowerCase();
    const amount = parseInt(args[1]);

    if (isNaN(amount) || amount <= 0) {
        return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
    }

    if (currency !== 'ani' && currency !== 'fish') {
        return message.reply("‚ùå Lo·∫°i ti·ªÅn t·ªá kh√¥ng h·ª£p l·ªá! D√πng 'ani' ho·∫∑c 'fish'");
    }

    const fromCurrency = currency === 'ani' ? 'AniCoin' : 'FishCoin';
    const calculation = BankService.calculateExchange(fromCurrency, amount);

    const embed = new EmbedBuilder()
        .setTitle("üßÆ T√≠nh To√°n Chuy·ªÉn ƒê·ªïi")
        .setDescription(
            `**${message.author.displayName || message.author.username || 'Unknown User'}** - T√≠nh to√°n chuy·ªÉn ƒë·ªïi:\n\n` +
            `üí∞ **S·ªë ti·ªÅn chuy·ªÉn:** ${amount.toLocaleString()} ${fromCurrency === 'AniCoin' ? '‚Ç≥' : 'üêü'}\n` +
            `üìä **T·ª∑ l·ªá:** 1${fromCurrency === 'AniCoin' ? '‚Ç≥' : 'üêü'} = ${calculation.rate}${fromCurrency === 'AniCoin' ? 'üêü' : '‚Ç≥'}\n` +
            `üéØ **S·∫Ω nh·∫≠n ƒë∆∞·ª£c:** ${calculation.received.toLocaleString()} ${fromCurrency === 'AniCoin' ? 'üêü' : '‚Ç≥'}\n\n` +
            `${calculation.isValid ? '‚úÖ **H·ª£p l·ªá ƒë·ªÉ chuy·ªÉn ƒë·ªïi**' : '‚ùå **Kh√¥ng ƒë·ªß s·ªë ti·ªÅn t·ªëi thi·ªÉu**'}`
        )
        .setColor(calculation.isValid ? "#00ff00" : "#ff0000")
        .setTimestamp();

    await message.reply({ embeds: [embed] });
}

async function showHelp(message: Message) {
    const embed = new EmbedBuilder()
        .setTitle("üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Ng√¢n H√†ng")
        .setDescription(
            "**üè¶ Ng√¢n H√†ng Chuy·ªÉn ƒê·ªïi Ti·ªÅn T·ªá**\n\n" +
            "**üí° C√°c L·ªánh:**\n" +
            "‚Ä¢ `n.bank` - Xem th√¥ng tin ng√¢n h√†ng\n" +
            "‚Ä¢ `n.bank ani <s·ªë ti·ªÅn>` - Chuy·ªÉn AniCoin sang FishCoin\n" +
            "‚Ä¢ `n.bank fish <s·ªë ti·ªÅn>` - Chuy·ªÉn FishCoin sang AniCoin\n" +
            "‚Ä¢ `n.bank rates` - Xem t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi\n" +
            "‚Ä¢ `n.bank history` - Xem l·ªãch s·ª≠ giao d·ªãch\n" +
            "‚Ä¢ `n.bank calculate <ani/fish> <s·ªë ti·ªÅn>` - T√≠nh to√°n tr∆∞·ªõc khi chuy·ªÉn\n" +
            "‚Ä¢ `n.bank help` - Xem h∆∞·ªõng d·∫´n n√†y\n\n" +
            "**üìä T·ª∑ L·ªá Chuy·ªÉn ƒê·ªïi:**\n" +
            "‚Ä¢ AniCoin ‚Üí FishCoin: 1‚Ç≥ = 0.5üêü (T·ªëi thi·ªÉu 1,000‚Ç≥)\n" +
            "‚Ä¢ FishCoin ‚Üí AniCoin: 1üêü = 1.5‚Ç≥ (T·ªëi thi·ªÉu 1,000üêü)\n\n" +
            "**‚ö†Ô∏è L∆∞u √ù:**\n" +
            "‚Ä¢ Giao d·ªãch kh√¥ng th·ªÉ ho√†n t√°c\n" +
            "‚Ä¢ Ki·ªÉm tra k·ªπ s·ªë ti·ªÅn tr∆∞·ªõc khi chuy·ªÉn\n" +
            "‚Ä¢ S·ª≠ d·ª•ng `n.bank calculate` ƒë·ªÉ t√≠nh to√°n tr∆∞·ªõc"
        )
        .setColor("#0099ff")
        .setTimestamp();

    await message.reply({ embeds: [embed] });
} 