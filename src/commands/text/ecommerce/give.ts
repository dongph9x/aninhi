import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { ecommerceDB } from "@/utils/ecommerce-db";

// Interface cho target user
interface TargetUser {
    id: string;
}

export default Bot.createCommand({
    structure: {
        name: "give",
        aliases: ["pay", "send", "transfer"],
    },
    run: async ({ message, t, args }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;

        if (args.length < 2) {
            const embed = new EmbedBuilder()
                .setTitle("‚ùå C√°ch D√πng Kh√¥ng ƒê√∫ng")
                .setDescription(
                    "**C√°ch d√πng:** `n.give <ng∆∞·ªùi d√πng> <s·ªë ti·ªÅn>`\n\n" +
                        "**V√≠ d·ª•:**\n" +
                        "‚Ä¢ `n.give @user 1000`\n" +
                        "‚Ä¢ `n.give 123456789 500`",
                )
                .setColor("#ff0000")
                .setTimestamp();

            return message.reply({ embeds: [embed] });
        }

        try {
            // L·∫•y target user t·ª´ mention ho·∫∑c ID
            let targetUser: TargetUser | undefined = message.mentions.users.first() || undefined;
            
            // N·∫øu kh√¥ng c√≥ mention, th·ª≠ parse t·ª´ args[0] nh∆∞ ID
            if (!targetUser && args[0] && args[0].match(/^\d+$/)) {
                targetUser = { id: args[0] };
            }

            // N·∫øu c√≥ nhi·ªÅu mention, l·∫•y mention ƒë·∫ßu ti√™n
            if (message.mentions.users.size > 1) {
                console.log("Multiple mentions detected, using first one");
            }

            // Debug logging
            console.log("Give command debug:");
            console.log("- User ID:", userId);
            console.log("- Target user:", targetUser);
            console.log("- Mentions:", message.mentions.users.map(u => u.id));
            console.log("- Args:", args);

            if (!targetUser) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Ng∆∞·ªùi D√πng Kh√¥ng H·ª£p L·ªá")
                    .setDescription(
                        "Vui l√≤ng tag m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            const amount = parseInt(args[1]!);
            if (isNaN(amount) || amount <= 0) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå S·ªë Ti·ªÅn Kh√¥ng H·ª£p L·ªá")
                    .setDescription("Vui l√≤ng cung c·∫•p m·ªôt s·ªë d∆∞∆°ng h·ª£p l·ªá cho s·ªë ti·ªÅn.")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Debug logging for self-transfer check
            console.log("- Self-transfer check:", targetUser.id === userId);
            console.log("- Target ID:", targetUser.id);
            console.log("- User ID:", userId);

            // Ki·ªÉm tra xem c√≥ ph·∫£i chuy·ªÉn cho ch√≠nh m√¨nh kh√¥ng
            if (targetUser.id === userId) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng Th·ªÉ Chuy·ªÉn Cho Ch√≠nh M√¨nh")
                    .setDescription(
                        "B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!\n\n" +
                        "**C√°ch s·ª≠ d·ª•ng ƒë√∫ng:**\n" +
                        "‚Ä¢ `n.give @user_other 1000` - Chuy·ªÉn cho user kh√°c\n" +
                        "‚Ä¢ `n.give 123456789012345678 1000` - Chuy·ªÉn b·∫±ng ID\n\n" +
                        "**L∆∞u √Ω:** ƒê·∫£m b·∫£o b·∫°n mention ho·∫∑c nh·∫≠p ID c·ªßa user kh√°c, kh√¥ng ph·∫£i ch√≠nh m√¨nh.",
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Ki·ªÉm tra s·ªë d∆∞ hi·ªán t·∫°i
            const currentUser = await ecommerceDB.getUser(userId, guildId);
            if (currentUser.balance < amount) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå S·ªë D∆∞ Kh√¥ng ƒê·ªß")
                    .setDescription(
                        "B·∫°n kh√¥ng c√≥ ƒë·ªß AniCoin!\n\n" +
                            `**S·ªë d∆∞ hi·ªán t·∫°i:** ${currentUser.balance.toLocaleString()} AniCoin\n` +
                            `**S·ªë ti·ªÅn mu·ªën chuy·ªÉn:** ${amount.toLocaleString()} AniCoin\n` +
                            `**Thi·∫øu:** ${(amount - currentUser.balance).toLocaleString()} AniCoin`,
                    )
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // Th·ª±c hi·ªán transfer s·ª≠ d·ª•ng database
            const result = await ecommerceDB.transferMoney(userId, targetUser.id, guildId, amount);

            if (!result.success) {
                const embed = new EmbedBuilder()
                    .setTitle("‚ùå Chuy·ªÉn Ti·ªÅn Th·∫•t B·∫°i")
                    .setDescription(result.message)
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [embed] });
            }

            // L·∫•y th√¥ng tin user sau khi transfer
            const sender = await ecommerceDB.getUser(userId, guildId);
            const receiver = await ecommerceDB.getUser(targetUser.id, guildId);

            const embed = new EmbedBuilder()
                .setTitle("‚úÖ Chuy·ªÉn Ti·ªÅn Th√†nh C√¥ng")
                .setDescription(
                    `**${message.author.username}** ƒë√£ chuy·ªÉn **${amount.toLocaleString()}** AniCoin cho **<@${targetUser.id}>**\n\n` +
                        "üí∞ **S·ªë D∆∞ M·ªõi:**\n" +
                        `‚Ä¢ **${message.author.username}:** ${sender.balance.toLocaleString()} AniCoin\n` +
                        `‚Ä¢ **<@${targetUser.id}>:** ${receiver.balance.toLocaleString()} AniCoin`,
                )
                .setColor("#51cf66")
                .setThumbnail(message.author.displayAvatarURL())
                .setFooter({
                    text: "Chuy·ªÉn ti·ªÅn ho√†n t·∫•t | Database Version",
                    iconURL: message.author.displayAvatarURL(),
                })
                .setTimestamp();

            message.reply({ embeds: [embed] });
        } catch (error) {
            console.error("Error in give command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Chuy·ªÉn Ti·ªÅn Th·∫•t B·∫°i")
                .setDescription(
                    error instanceof Error
                        ? error.message
                        : "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh chuy·ªÉn ti·ªÅn. Vui l√≤ng th·ª≠ l·∫°i sau.",
                )
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});
