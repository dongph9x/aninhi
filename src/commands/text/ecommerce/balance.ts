import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { config } from "@/config";
import { ecommerceDB } from "@/utils/ecommerce-db";

export default Bot.createCommand({
    structure: {
        name: "balance",
        aliases: ["bal", "money", "coins", "cash"],
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;

        try {
            // L·∫•y th√¥ng tin user t·ª´ database
            const user = await ecommerceDB.getUser(userId, guildId);
            
            // L·∫•y l·ªãch s·ª≠ giao d·ªãch g·∫ßn nh·∫•t
            const recentTransactions = await ecommerceDB.getUserTransactions(userId, guildId, 5);

            const embed = new EmbedBuilder()
                .setTitle("üí∞ Th√¥ng Tin T√†i Kho·∫£n")
                .setDescription(
                    `**${message.author.username}**\n\n` +
                        `üíé **S·ªë d∆∞ hi·ªán t·∫°i:** ${user.balance.toLocaleString()} AniCoin\n` +
                        `üî• **Chu·ªói h√†ng ng√†y:** ${user.dailyStreak} ng√†y\n` +
                        `üìÖ **Tham gia t·ª´:** ${user.createdAt.toLocaleDateString('vi-VN')}\n` +
                        `üîÑ **C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:** ${user.updatedAt.toLocaleDateString('vi-VN')}`
                )
                .setColor(config.embedColor)
                .setThumbnail(message.author.displayAvatarURL())
                .setFooter({
                    text: `ID: ${userId} | Database Version`,
                    iconURL: message.author.displayAvatarURL(),
                })
                .setTimestamp();

            // Th√™m l·ªãch s·ª≠ giao d·ªãch g·∫ßn nh·∫•t
            if (recentTransactions.length > 0) {
                const transactionList = recentTransactions
                    .map(tx => {
                        const emoji = tx.amount > 0 ? "‚ûï" : "‚ûñ";
                        const date = tx.createdAt.toLocaleDateString('vi-VN');
                        const absAmount = tx.amount > 0 ? tx.amount : -tx.amount;
                        return `${emoji} **${absAmount.toLocaleString()}** AniCoin - ${tx.description || tx.type} (${date})`;
                    })
                    .join('\n');

                embed.addFields({
                    name: "üìä L·ªãch S·ª≠ Giao D·ªãch G·∫ßn Nh·∫•t",
                    value: transactionList,
                    inline: false,
                });
            }

            message.reply({ embeds: [embed] });
        } catch (error) {
            console.error("Error in balance command:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.")
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});
