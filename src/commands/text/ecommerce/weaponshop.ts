import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";

import { Bot } from "@/classes";
import { EcommerceService } from "@/utils/ecommerce-db";
import { WeaponService } from "@/utils/weapon";

export default Bot.createCommand({
    structure: {
        name: "weaponshop",
        aliases: ["weapon", "weapons", "fishweapon", "fishweapons"],
    },
    options: {
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        const guildId = message.guildId!;
        const userId = message.author.id;

        try {
            // X·ª≠ l√Ω subcommand
            const subcommand = args[0]?.toLowerCase();

            if (!subcommand || subcommand === "shop" || subcommand === "list") {
                await showWeaponShop(message, guildId, userId);
            } else if (subcommand === "buy" || subcommand === "purchase") {
                const weaponId = args[1];
                const quantity = parseInt(args[2]) || 1;
                await buyWeapon(message, guildId, userId, weaponId, quantity);
            } else if (subcommand === "inventory" || subcommand === "inv") {
                await showWeaponInventory(message, guildId, userId);
            } else if (subcommand === "equip") {
                const weaponId = args[1];
                await equipWeapon(message, guildId, userId, weaponId);
            } else if (subcommand === "unequip") {
                await unequipWeapon(message, guildId, userId);
            } else if (subcommand === "info") {
                const weaponId = args[1];
                await showWeaponInfo(message, guildId, userId, weaponId);
            } else if (subcommand === "help") {
                await showHelp(message);
            } else {
                await showHelp(message);
            }
        } catch (error) {
            console.error("Error in weaponshop command:", error);
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("C√≥ l·ªói x·∫£y ra khi truy c·∫≠p weapon shop!")
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});

async function showWeaponShop(message: any, guildId: string, userId: string) {
    const embed = new EmbedBuilder()
        .setTitle("‚öîÔ∏è Fish Weapon Shop")
        .setColor("#ff6b6b")
        .setDescription("C·ª≠a h√†ng v≈© kh√≠ cho c√° - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!")
        .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
        .setTimestamp();

    // L·∫•y balance c·ªßa user
    const balance = await EcommerceService.getBalance(userId, guildId);

    // Danh s√°ch v≈© kh√≠ c√≥ s·∫µn
    const weapons = WeaponService.getAllWeapons();
    
    let shopText = `üí∞ **Balance:** ${balance.toLocaleString()} AniCoin\n\n`;
    shopText += "‚öîÔ∏è **Danh s√°ch v≈© kh√≠:**\n\n";

    weapons.forEach((weapon, index) => {
        const emoji = getWeaponEmoji(weapon.type);
        shopText += `${index + 1}. ${emoji} **${weapon.name}**\n`;
        shopText += `   üí∞ Gi√°: ${weapon.price.toLocaleString()} AniCoin\n`;
        shopText += `   ‚öîÔ∏è S·ª©c m·∫°nh: +${weapon.power} ATK\n`;
        shopText += `   üõ°Ô∏è Ph√≤ng th·ªß: +${weapon.defense} DEF\n`;
        shopText += `   üéØ ƒê·ªô ch√≠nh x√°c: +${weapon.accuracy}%\n`;
        shopText += `   üìù ${weapon.description}\n\n`;
    });

    shopText += "üí° **C√°ch s·ª≠ d·ª•ng:**\n";
    shopText += "‚Ä¢ `n.weaponshop buy <weapon_id> [s·ªë l∆∞·ª£ng]` - Mua v≈© kh√≠\n";
    shopText += "‚Ä¢ `n.weaponshop inventory` - Xem kho v≈© kh√≠\n";
    shopText += "‚Ä¢ `n.weaponshop equip <weapon_id>` - Trang b·ªã v≈© kh√≠\n";
    shopText += "‚Ä¢ `n.weaponshop info <weapon_id>` - Xem th√¥ng tin v≈© kh√≠";

    embed.setDescription(shopText);

    // Th√™m footer
    embed.setFooter({
        text: "Fish Weapon Shop - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!",
        iconURL: message.client.user.displayAvatarURL()
    });

    // T·∫°o buttons
    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('weapon_shop_buy')
                .setLabel('üõí Mua V≈© Kh√≠')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('weapon_shop_inventory')
                .setLabel('üéí Kho V≈© Kh√≠')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('weapon_shop_equip')
                .setLabel('‚öîÔ∏è Trang B·ªã')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('weapon_shop_help')
                .setLabel('‚ùì Tr·ª£ Gi√∫p')
                .setStyle(ButtonStyle.Secondary)
        );

    message.reply({ embeds: [embed], components: [row] });
}

async function buyWeapon(message: any, guildId: string, userId: string, weaponId: string, quantity: number) {
    if (!weaponId) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("Vui l√≤ng nh·∫≠p ID v≈© kh√≠ mu·ªën mua!\nV√≠ d·ª•: `n.weaponshop buy sword 1`")
            .setColor("#ff0000");
        return message.reply({ embeds: [errorEmbed] });
    }

    if (quantity <= 0 || quantity > 10) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1-10!")
            .setColor("#ff0000");
        return message.reply({ embeds: [errorEmbed] });
    }

    try {
        const weapons = WeaponService.getAllWeapons();
        const weapon = weapons.find(w => w.id === weaponId.toLowerCase());

        if (!weapon) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription(`Kh√¥ng t√¨m th·∫•y v≈© kh√≠ v·ªõi ID: \`${weaponId}\`\nS·ª≠ d·ª•ng \`n.weaponshop\` ƒë·ªÉ xem danh s√°ch v≈© kh√≠`)
                .setColor("#ff0000");
            return message.reply({ embeds: [errorEmbed] });
        }

        const totalCost = weapon.price * BigInt(quantity);
        const balance = await EcommerceService.getBalance(userId, guildId);

        if (balance < totalCost) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn")
                .setDescription(`B·∫°n c·∫ßn ${totalCost.toLocaleString()} AniCoin ƒë·ªÉ mua ${quantity}x ${weapon.name}\nHi·ªán t·∫°i: ${balance.toLocaleString()} AniCoin`)
                .setColor("#ff0000");
            return message.reply({ embeds: [errorEmbed] });
        }

        // Th·ª±c hi·ªán mua
        await EcommerceService.subtractMoney(userId, guildId, Number(totalCost), `Mua ${quantity}x ${weapon.name}`);
        
        // Th√™m v≈© kh√≠ v√†o inventory c·ªßa user
        await WeaponService.addWeaponToInventory(userId, guildId, weaponId, quantity);

        const successEmbed = new EmbedBuilder()
            .setTitle("‚úÖ Mua th√†nh c√¥ng!")
            .setColor("#00ff00")
            .setDescription(`üéâ ƒê√£ mua th√†nh c√¥ng **${quantity}x ${weapon.name}**\nüí∞ Chi ph√≠: ${totalCost.toLocaleString()} AniCoin\nüí≥ Balance c√≤n l·∫°i: ${(balance - totalCost).toLocaleString()} AniCoin`)
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .addFields(
                { name: "‚öîÔ∏è S·ª©c m·∫°nh", value: `+${weapon.power} ATK`, inline: true },
                { name: "üõ°Ô∏è Ph√≤ng th·ªß", value: `+${weapon.defense} DEF`, inline: true },
                { name: "üéØ ƒê·ªô ch√≠nh x√°c", value: `+${weapon.accuracy}%`, inline: true }
            )
            .setTimestamp();

        message.reply({ embeds: [successEmbed] });

    } catch (error) {
        console.error("Error buying weapon:", error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("C√≥ l·ªói x·∫£y ra khi mua v≈© kh√≠!")
            .setColor("#ff0000");
        message.reply({ embeds: [errorEmbed] });
    }
}

async function showWeaponInventory(message: any, guildId: string, userId: string) {
    const embed = new EmbedBuilder()
        .setTitle("üéí Kho V≈© Kh√≠")
        .setColor("#ff6b6b")
        .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
        .setTimestamp();

    // L·∫•y inventory v≈© kh√≠ c·ªßa user
    const inventory = await WeaponService.getUserWeaponInventory(userId, guildId);
    const equippedWeapon = await WeaponService.getEquippedWeapon(userId, guildId);
    
    if (inventory.length === 0) {
        embed.setDescription("üéí **Kho v≈© kh√≠ c·ªßa b·∫°n:**\n\nüì≠ Kho v≈© kh√≠ tr·ªëng!\n\nüí° S·ª≠ d·ª•ng `n.weaponshop` ƒë·ªÉ mua v≈© kh√≠");
        return message.reply({ embeds: [embed] });
    }

    let inventoryText = "üéí **Kho v≈© kh√≠ c·ªßa b·∫°n:**\n\n";
    
    inventory.forEach((item, index) => {
        const weapon = WeaponService.getWeaponById(item.weaponId);
        if (!weapon) return;

        const emoji = getWeaponEmoji(weapon.type);
        const equippedStatus = item.isEquipped ? " ‚öîÔ∏è **ƒêANG TRANG B·ªä**" : "";
        
        inventoryText += `${index + 1}. ${emoji} **${weapon.name}**${equippedStatus}\n`;
        inventoryText += `   üì¶ S·ªë l∆∞·ª£ng: ${item.quantity}\n`;
        inventoryText += `   ‚öîÔ∏è S·ª©c m·∫°nh: +${weapon.power} ATK\n`;
        inventoryText += `   üõ°Ô∏è Ph√≤ng th·ªß: +${weapon.defense} DEF\n`;
        inventoryText += `   üéØ ƒê·ªô ch√≠nh x√°c: +${weapon.accuracy}%\n`;
        inventoryText += `   ‚≠ê Hi·∫øm: ${weapon.rarity}\n\n`;
    });

    if (equippedWeapon) {
        const equippedWeaponInfo = WeaponService.getWeaponById(equippedWeapon.weaponId);
        if (equippedWeaponInfo) {
            inventoryText += "‚öîÔ∏è **V≈© kh√≠ ƒëang trang b·ªã:**\n";
            inventoryText += `${getWeaponEmoji(equippedWeaponInfo.type)} **${equippedWeaponInfo.name}**\n`;
            inventoryText += `   ‚öîÔ∏è +${equippedWeaponInfo.power} ATK | üõ°Ô∏è +${equippedWeaponInfo.defense} DEF | üéØ +${equippedWeaponInfo.accuracy}%\n\n`;
        }
    }

    inventoryText += "üí° **L·ªánh h·ªØu √≠ch:**\n";
    inventoryText += "‚Ä¢ `n.weaponshop equip <weapon_id>` - Trang b·ªã v≈© kh√≠\n";
    inventoryText += "‚Ä¢ `n.weaponshop unequip` - G·ª° trang b·ªã\n";
    inventoryText += "‚Ä¢ `n.weaponshop info <weapon_id>` - Xem th√¥ng tin v≈© kh√≠";

    embed.setDescription(inventoryText);

    message.reply({ embeds: [embed] });
}

async function equipWeapon(message: any, guildId: string, userId: string, weaponId: string) {
    if (!weaponId) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("Vui l√≤ng nh·∫≠p ID v≈© kh√≠ mu·ªën trang b·ªã!\nV√≠ d·ª•: `n.weaponshop equip sword`")
            .setColor("#ff0000");
        return message.reply({ embeds: [errorEmbed] });
    }

    try {
        const success = await WeaponService.equipWeapon(userId, guildId, weaponId);
        
        if (!success) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription(`B·∫°n kh√¥ng c√≥ v≈© kh√≠ **${weaponId}**!\nS·ª≠ d·ª•ng \`n.weaponshop inventory\` ƒë·ªÉ xem kho v≈© kh√≠`)
                .setColor("#ff0000");
            return message.reply({ embeds: [errorEmbed] });
        }

        const weapon = WeaponService.getWeaponById(weaponId);
        if (!weapon) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription(`Kh√¥ng t√¨m th·∫•y th√¥ng tin v≈© kh√≠ **${weaponId}**!`)
                .setColor("#ff0000");
            return message.reply({ embeds: [errorEmbed] });
        }

        const embed = new EmbedBuilder()
            .setTitle("‚öîÔ∏è Trang B·ªã Th√†nh C√¥ng!")
            .setColor("#00ff00")
            .setDescription(`üéØ ƒê√£ trang b·ªã th√†nh c√¥ng **${weapon.name}**!`)
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .addFields(
                { name: "‚öîÔ∏è S·ª©c m·∫°nh", value: `+${weapon.power} ATK`, inline: true },
                { name: "üõ°Ô∏è Ph√≤ng th·ªß", value: `+${weapon.defense} DEF`, inline: true },
                { name: "üéØ ƒê·ªô ch√≠nh x√°c", value: `+${weapon.accuracy}%`, inline: true }
            )
            .setTimestamp();

        message.reply({ embeds: [embed] });

    } catch (error) {
        console.error("Error equipping weapon:", error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("C√≥ l·ªói x·∫£y ra khi trang b·ªã v≈© kh√≠!")
            .setColor("#ff0000");
        message.reply({ embeds: [errorEmbed] });
    }
}

async function unequipWeapon(message: any, guildId: string, userId: string) {
    try {
        const success = await WeaponService.unequipWeapon(userId, guildId);
        
        if (!success) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("B·∫°n ch∆∞a trang b·ªã v≈© kh√≠ n√†o!")
                .setColor("#ff0000");
            return message.reply({ embeds: [errorEmbed] });
        }

        const embed = new EmbedBuilder()
            .setTitle("üõ°Ô∏è G·ª° Trang B·ªã Th√†nh C√¥ng!")
            .setColor("#ff6b6b")
            .setDescription("‚úÖ ƒê√£ g·ª° trang b·ªã v≈© kh√≠ th√†nh c√¥ng!")
            .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
            .setTimestamp();

        message.reply({ embeds: [embed] });

    } catch (error) {
        console.error("Error unequipping weapon:", error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("C√≥ l·ªói x·∫£y ra khi g·ª° trang b·ªã v≈© kh√≠!")
            .setColor("#ff0000");
        message.reply({ embeds: [errorEmbed] });
    }
}

async function showWeaponInfo(message: any, guildId: string, userId: string, weaponId: string) {
    if (!weaponId) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("Vui l√≤ng nh·∫≠p ID v≈© kh√≠ mu·ªën xem th√¥ng tin!\nV√≠ d·ª•: `n.weaponshop info sword`")
            .setColor("#ff0000");
        return message.reply({ embeds: [errorEmbed] });
    }

    const weapons = WeaponService.getAllWeapons();
    const weapon = weapons.find(w => w.id === weaponId.toLowerCase());

    if (!weapon) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(`Kh√¥ng t√¨m th·∫•y v≈© kh√≠ v·ªõi ID: \`${weaponId}\``)
            .setColor("#ff0000");
        return message.reply({ embeds: [errorEmbed] });
    }

    const embed = new EmbedBuilder()
        .setTitle(`${getWeaponEmoji(weapon.type)} ${weapon.name}`)
        .setColor("#ff6b6b")
        .setDescription(weapon.description)
        .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
        .addFields(
            { name: "üí∞ Gi√°", value: `${weapon.price.toLocaleString()} AniCoin`, inline: true },
            { name: "‚öîÔ∏è S·ª©c m·∫°nh", value: `+${weapon.power} ATK`, inline: true },
            { name: "üõ°Ô∏è Ph√≤ng th·ªß", value: `+${weapon.defense} DEF`, inline: true },
            { name: "üéØ ƒê·ªô ch√≠nh x√°c", value: `+${weapon.accuracy}%`, inline: true },
            { name: "üè∑Ô∏è Lo·∫°i", value: weapon.type, inline: true },
            { name: "‚≠ê Hi·∫øm", value: weapon.rarity, inline: true }
        )
        .setFooter({
            text: `ID: ${weapon.id}`,
            iconURL: message.client.user.displayAvatarURL()
        })
        .setTimestamp();

    message.reply({ embeds: [embed] });
}

async function showHelp(message: any) {
    const embed = new EmbedBuilder()
        .setTitle("‚öîÔ∏è H∆∞·ªõng D·∫´n Fish Weapon Shop")
        .setColor("#ff6b6b")
        .setDescription("C·ª≠a h√†ng v≈© kh√≠ cho c√° - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!")
        .setThumbnail("https://media.discordapp.net/attachments/1396335030216822875/1398676895524192358/3516.png?ex=68863ade&is=6884e95e&hm=a6b593878a7a2af5807cf6c5b35a9d007a6939e9fdc72ea3f6889800331e5b15&=&format=webp&quality=lossless&width=664&height=592")
        .addFields(
            { name: "üõí Mua v≈© kh√≠", value: "`n.weaponshop buy <weapon_id> [s·ªë l∆∞·ª£ng]`", inline: true },
            { name: "üéí Xem kho", value: "`n.weaponshop inventory`", inline: true },
            { name: "‚öîÔ∏è Trang b·ªã", value: "`n.weaponshop equip <weapon_id>`", inline: true },
            { name: "üõ°Ô∏è G·ª° trang b·ªã", value: "`n.weaponshop unequip`", inline: true },
            { name: "üìù Xem th√¥ng tin", value: "`n.weaponshop info <weapon_id>`", inline: true },
            { name: "‚ùì Tr·ª£ gi√∫p", value: "`n.weaponshop help`", inline: true }
        )
        .addFields(
            { name: "üí° V√≠ d·ª•", value: "`n.weaponshop buy sword 2` - Mua 2 thanh ki·∫øm\n`n.weaponshop equip sword` - Trang b·ªã ki·∫øm\n`n.weaponshop info sword` - Xem th√¥ng tin ki·∫øm", inline: false }
        )
        .setFooter({
            text: "Fish Weapon Shop - TƒÉng s·ª©c m·∫°nh cho c√° c·ªßa b·∫°n!",
            iconURL: message.client.user.displayAvatarURL()
        })
        .setTimestamp();

    message.reply({ embeds: [embed] });
}



function getWeaponEmoji(type: string): string {
    const emojiMap: Record<string, string> = {
        sword: "‚öîÔ∏è",
        shield: "üõ°Ô∏è",
        spear: "üî±",
        bow: "üèπ",
        axe: "ü™ì",
        staff: "üîÆ",
        dagger: "üó°Ô∏è"
    };
    return emojiMap[type] || "‚öîÔ∏è";
} 