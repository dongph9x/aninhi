import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { GameStatsService } from "@/utils/gameStats";

export default Bot.createCommand({
    structure: {
        name: "delete",
        aliases: ["del", "remove", "clear"],
    },
    options: {
        inGuild: true,
    },
    run: async ({ message, t, args }) => {
        const guildId = message.guildId!;
        const userId = message.author.id;

        try {
            // X·ª≠ l√Ω subcommand
            const subcommand = args[0]?.toLowerCase();

            if (!subcommand) {
                await showHelp(message);
                return;
            }

            if (subcommand === "toplose" || subcommand === "gamestats") {
                const confirmArg = args[1]?.toLowerCase();
                if (confirmArg === "confirm") {
                    await deleteTopLoseDataConfirm(message, guildId, userId);
                } else {
                    await deleteTopLoseData(message, guildId, userId);
                }
            } else if (subcommand === "help") {
                await showHelp(message);
            } else {
                await showHelp(message);
            }
        } catch (error) {
            console.error("Error in delete command:", error);
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh x√≥a!")
                .setColor("#ff0000")
                .setTimestamp();

            message.reply({ embeds: [errorEmbed] });
        }
    },
});

async function deleteTopLoseData(message: any, guildId: string, userId: string) {
    try {
        // 1. Th·ªëng k√™ tr∆∞·ªõc khi x√≥a
        const embed = new EmbedBuilder()
            .setTitle("üóëÔ∏è X√≥a D·ªØ Li·ªáu n.toplose")
            .setColor("#ff6b6b")
            .setTimestamp();

        // ƒê·∫øm t·ªïng s·ªë GameStats records
        const totalRecords = await GameStatsService.getServerGameStats(guildId);
        const totalGameStats = totalRecords.length;

        if (totalGameStats === 0) {
            embed.setDescription("‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu n.toplose n√†o ƒë·ªÉ x√≥a!");
            return message.reply({ embeds: [embed] });
        }

        // Th·ªëng k√™ theo gameType
        const gameStatsByType = await GameStatsService.getServerLoseStats(guildId);
        
        let statsText = "üìä **Th·ªëng k√™ tr∆∞·ªõc khi x√≥a:**\n\n";
        statsText += `üìà **T·ªïng s·ªë GameStats records:** ${totalGameStats}\n\n`;
        
        if (gameStatsByType.length > 0) {
            statsText += "üéÆ **Th·ªëng k√™ theo lo·∫°i game:**\n";
            gameStatsByType.forEach(stat => {
                const totalLost = stat.totalLost || 0n;
                const totalBet = stat.totalBet || 0n;
                const totalGames = stat.totalGames || 0;
                const totalWins = stat.totalWins || 0;
                
                statsText += `‚Ä¢ **${getGameDisplayName(stat.gameType)}**: ${stat.totalGames} tr·∫≠n, ${totalLost.toLocaleString()} AniCoin thua\n`;
            });
        }

        // 2. C·∫£nh b√°o v√† x√°c nh·∫≠n
        statsText += "\n‚ö†Ô∏è **C·∫£nh b√°o:**\n";
        statsText += "‚Ä¢ H√†nh ƒë·ªông n√†y **KH√îNG TH·ªÇ HO√ÄN T√ÅC**!\n";
        statsText += "‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu n.toplose s·∫Ω b·ªã m·∫•t vƒ©nh vi·ªÖn!\n";
        statsText += "‚Ä¢ C√°c l·ªánh sau s·∫Ω kh√¥ng ho·∫°t ƒë·ªông:\n";
        statsText += "  - `n.toplose`\n";
        statsText += "  - `n.toplose all`\n";
        statsText += "  - `n.toplose blackjack`\n";
        statsText += "  - `n.toplose slots`\n";
        statsText += "  - `n.toplose roulette`\n";
        statsText += "  - `n.toplose coinflip`\n";
        statsText += "  - `n.toplose stats`\n";
        statsText += "‚Ä¢ Top Lose GIF trong `n.fishing` s·∫Ω kh√¥ng hi·ªÉn th·ªã!\n\n";
        statsText += "ü§î **B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?**\n";
        statsText += "G√µ `n.delete toplose confirm` ƒë·ªÉ x√°c nh·∫≠n x√≥a.";

        embed.setDescription(statsText);

        // Th√™m footer
        embed.setFooter({
            text: "S·ª≠ d·ª•ng n.delete toplose confirm ƒë·ªÉ x√°c nh·∫≠n x√≥a",
            iconURL: message.client.user.displayAvatarURL()
        });

        message.reply({ embeds: [embed] });

    } catch (error) {
        console.error("Error in deleteTopLoseData:", error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("C√≥ l·ªói x·∫£y ra khi th·ªëng k√™ d·ªØ li·ªáu n.toplose!")
            .setColor("#ff0000")
            .setTimestamp();

        message.reply({ embeds: [errorEmbed] });
    }
}

async function deleteTopLoseDataConfirm(message: any, guildId: string, userId: string) {
    try {
        const embed = new EmbedBuilder()
            .setTitle("üóëÔ∏è X√°c Nh·∫≠n X√≥a D·ªØ Li·ªáu n.toplose")
            .setColor("#ff6b6b")
            .setTimestamp();

        // Th·ªëng k√™ tr∆∞·ªõc khi x√≥a
        const totalRecords = await GameStatsService.getServerGameStats(guildId);
        const totalGameStats = totalRecords.length;

        if (totalGameStats === 0) {
            embed.setDescription("‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu n.toplose n√†o ƒë·ªÉ x√≥a!");
            return message.reply({ embeds: [embed] });
        }

        // B·∫Øt ƒë·∫ßu x√≥a
        let deleteText = "üîÑ **ƒêang x√≥a d·ªØ li·ªáu n.toplose...**\n\n";

        // X√≥a t·∫•t c·∫£ GameStats records
        const deletedCount = await GameStatsService.deleteAllGameStats(guildId);
        
        deleteText += `‚úÖ **ƒê√£ x√≥a th√†nh c√¥ng:**\n`;
        deleteText += `‚Ä¢ ${deletedCount} GameStats records\n`;
        deleteText += `‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu n.toplose ƒë√£ b·ªã x√≥a\n\n`;

        // Th·ªëng k√™ sau khi x√≥a
        const remainingRecords = await GameStatsService.getServerGameStats(guildId);
        const remainingCount = remainingRecords.length;

        deleteText += `üìä **Th·ªëng k√™ sau khi x√≥a:**\n`;
        deleteText += `‚Ä¢ GameStats records c√≤n l·∫°i: ${remainingCount}\n\n`;

        if (remainingCount === 0) {
            deleteText += "üéâ **X√≥a ho√†n t·∫•t!**\n";
            deleteText += "‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu n.toplose ƒë√£ ƒë∆∞·ª£c x√≥a s·∫°ch\n";
            deleteText += "‚Ä¢ C√°c l·ªánh n.toplose s·∫Ω kh√¥ng ho·∫°t ƒë·ªông cho ƒë·∫øn khi c√≥ data m·ªõi\n";
            deleteText += "‚Ä¢ Top Lose GIF trong n.fishing s·∫Ω kh√¥ng hi·ªÉn th·ªã\n\n";
            deleteText += "üí° **L∆∞u √Ω:** D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i khi ng∆∞·ªùi d√πng ch∆°i game";
        } else {
            deleteText += "‚ö†Ô∏è **C·∫£nh b√°o:** V·∫´n c√≤n d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c x√≥a!";
        }

        embed.setDescription(deleteText);

        // Th√™m footer
        embed.setFooter({
            text: "X√≥a d·ªØ li·ªáu n.toplose ho√†n t·∫•t",
            iconURL: message.client.user.displayAvatarURL()
        });

        message.reply({ embeds: [embed] });

    } catch (error) {
        console.error("Error in deleteTopLoseDataConfirm:", error);
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription("C√≥ l·ªói x·∫£y ra khi x√≥a d·ªØ li·ªáu n.toplose!")
            .setColor("#ff0000")
            .setTimestamp();

        message.reply({ embeds: [errorEmbed] });
    }
}

async function showHelp(message: any) {
    const embed = new EmbedBuilder()
        .setTitle("üóëÔ∏è H∆∞·ªõng D·∫´n L·ªánh Delete")
        .setColor("#ff6b6b")
        .setDescription("L·ªánh ƒë·ªÉ x√≥a d·ªØ li·ªáu trong h·ªá th·ªëng")
        .addFields(
            { name: "üóëÔ∏è X√≥a d·ªØ li·ªáu n.toplose", value: "`n.delete toplose` - Xem th·ªëng k√™ v√† x√°c nh·∫≠n x√≥a\n`n.delete toplose confirm` - X√°c nh·∫≠n x√≥a d·ªØ li·ªáu", inline: false },
            { name: "üìä Xem th·ªëng k√™", value: "`n.delete toplose` - Xem th·ªëng k√™ tr∆∞·ªõc khi x√≥a", inline: false },
            { name: "‚ùì Tr·ª£ gi√∫p", value: "`n.delete help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y", inline: false }
        )
        .setFooter({
            text: "L∆∞u √Ω: H√†nh ƒë·ªông x√≥a kh√¥ng th·ªÉ ho√†n t√°c!",
            iconURL: message.client.user.displayAvatarURL()
        })
        .setTimestamp();

    message.reply({ embeds: [embed] });
}

function getGameDisplayName(gameType: string): string {
    const nameMap: Record<string, string> = {
        blackjack: "Blackjack",
        slots: "Slots",
        roulette: "Roulette",
        coinflip: "Coin Flip",
        fishing: "Fishing"
    };
    return nameMap[gameType] || gameType;
} 