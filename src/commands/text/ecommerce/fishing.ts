import { EmbedBuilder, Message } from "discord.js";

import { Bot } from "@/classes";
import { config } from "@/config";
import { EcommerceService } from "@/utils/ecommerce-db";
import { FishingService, FISH_LIST, FISHING_RODS, BAITS } from "@/utils/fishing";
import { AchievementService } from "@/utils/achievement";
import { SpamProtectionService } from "@/utils/spam-protection";
import prisma from "@/utils/prisma";
import { SeasonalFishingService } from '@/utils/seasonal-fishing';

function getRarityColor(rarity: string): number {
    switch (rarity) {
        case "common": return 0xffffff;
        case "rare": return 0x0099ff;
        case "epic": return 0x9932cc;
        case "legendary": return 0xffd700;
        default: return 0xffffff;
    }
}

function getRarityText(rarity: string): string {
    switch (rarity) {
        case "common": return "Th∆∞·ªùng";
        case "rare": return "Hi·∫øm";
        case "epic": return "Qu√Ω hi·∫øm";
        case "legendary": return "Huy·ªÅn tho·∫°i";
        default: return "Th∆∞·ªùng";
    }
}

function getRarityEmoji(rarity: string): string {
    switch (rarity) {
        case "common": return "‚ö™";
        case "rare": return "üîµ";
        case "epic": return "üü£";
        case "legendary": return "üü°";
        default: return "‚ö™";
    }
}

export default Bot.createCommand({
    structure: {
        name: "fishing",
        aliases: ["fish", "f"],
    },
    options: {
        cooldown: 1000, // Gi·∫£m cooldown xu·ªëng 1 gi√¢y ƒë·ªÉ tr√°nh spam
        permissions: ["SendMessages", "EmbedLinks"],
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;
        const args = message.content.split(" ").slice(1);

        if (args.length === 0) {
            // M·∫∑c ƒë·ªãnh l√† c√¢u c√° v·ªõi animation
            return await fishWithAnimation(message);
        }

        const subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "fish":
            case "c√¢u":
                return await fishWithAnimation(message);
            case "shop":
            case "c·ª≠a h√†ng":
                return await showShop(message);
            case "buy":
            case "mua":
                return await buyItem(message, args.slice(1));
            case "sell":
            case "b√°n":
                return await sellFish(message, args.slice(1));
            case "price":
            case "gi√°":
                return await showFishPrices(message, args.slice(1));
            case "setrod":
            case "setc·∫ßn":
                return await setCurrentRod(message, args.slice(1));
            case "setbait":
            case "setm·ªìi":
                return await setCurrentBait(message, args.slice(1));
            case "inventory":
            case "inv":
            case "t√∫i ƒë·ªì":
            case "t√∫i":
                return await showInventory(message);
            case "stats":
            case "th·ªëng k√™":
                return await showStats(message);
            case "season":
            case "m√πa":
                return await showSeasonInfo(message);
            case "help":
                return await showHelp(message);
            default:
                // N·∫øu kh√¥ng c√≥ subcommand h·ª£p l·ªá, m·∫∑c ƒë·ªãnh l√† c√¢u c√° v·ªõi animation
                return await fishWithAnimation(message);
        }
    },
});

// Map ƒë·ªÉ l∆∞u tr·∫°ng th√°i ƒëang c√¢u c√° c·ªßa user
const fishingInProgress = new Map<string, boolean>();

async function fishWithAnimation(message: Message) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    // Ki·ªÉm tra spam protection
    const spamService = SpamProtectionService.getInstance();
    const spamCheck = spamService.checkSpam(userId, guildId, "fishing");
    
    if (!spamCheck.allowed) {
        // Tr·∫£ v·ªÅ embed l·ªói t·ª´ spam protection
        if (spamCheck.embed) {
            return await message.reply({ embeds: [spamCheck.embed] });
        }
        
        // Fallback embed n·∫øu kh√¥ng c√≥ embed t·ª´ spam service
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå B·ªã Ch·∫∑n Spam")
            .setDescription("B·∫°n ƒë√£ spam l·ªánh c√¢u c√° qu√° nhi·ªÅu l·∫ßn!")
            .setColor("#ff0000")
            .setTimestamp();
            
        return await message.reply({ embeds: [errorEmbed] });
    }

    // Ki·ªÉm tra xem user c√≥ ƒëang c√¢u c√° kh√¥ng
    if (fishingInProgress.get(userId)) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚è≥ ƒêang C√¢u C√°...")
            .setDescription("B·∫°n ƒëang c√¢u c√°, vui l√≤ng ƒë·ª£i ho√†n th√†nh!")
            .setColor("#ff9900")
            .setTimestamp();

        return await message.reply({ embeds: [errorEmbed] });
    }

    try {
        // ƒê√°nh d·∫•u user ƒëang c√¢u c√°
        fishingInProgress.set(userId, true);

        // Ki·ªÉm tra quy·ªÅn Admin
        const member = await message.guild?.members.fetch(userId);
        const isAdmin = member?.permissions.has('Administrator') || false;

        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† top 1 fisher kh√¥ng
        const topFisher = await FishingService.getTopFisher(guildId);
        const isTopFisher = topFisher && topFisher.userId === userId;

        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† top 1 lose kh√¥ng
        const { GameStatsService } = await import('@/utils/gameStats');
        const topLoseUser = await GameStatsService.getTopLoseUser(guildId, message.client);
        const isTopLose = topLoseUser && topLoseUser.userId === userId;

        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† top 1 FishCoin kh√¥ng
        const topFishCoinUser = await GameStatsService.getTopFishCoinUser(guildId);
        const isTopFishCoin = topFishCoinUser === userId;

        // Ki·ªÉm tra Achievement c·ªßa user (PRIORITY CAO NH·∫§T)
        const userAchievement = await AchievementService.getHighestPriorityAchievement(userId);
        const hasAchievement = userAchievement !== null;

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√¢u c√° tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu animation (Admin bypass)
        const cooldownCheck = await FishingService.canFish(userId, guildId, isAdmin);
        if (!cooldownCheck.canFish) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Kh√¥ng th·ªÉ c√¢u c√°")
                .setDescription(cooldownCheck.message || `B·∫°n c·∫ßn ƒë·ª£i ${Math.ceil(cooldownCheck.remainingTime / 1000)} gi√¢y n·ªØa ƒë·ªÉ c√¢u c√°!`)
                .setColor("#ff9900")
                .setTimestamp();

            return await message.reply({ embeds: [errorEmbed] });
        }

        // Ki·ªÉm tra s·ªë d∆∞ FishCoin
        const balance = await prisma.user.findUnique({
            where: { userId_guildId: { userId, guildId } }
        });

        if (!balance || balance.fishBalance < 10n) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Kh√¥ng ƒë·ªß FishCoin")
                .setDescription("B·∫°n c·∫ßn √≠t nh·∫•t 10 FishCoin ƒë·ªÉ c√¢u c√°!")
                .setColor("#ff0000")
                .setTimestamp();

            return await message.reply({ embeds: [errorEmbed] });
        }

        // L·∫•y th√¥ng tin c·∫ßn c√¢u v√† m·ªìi hi·ªán t·∫°i
        const fishingData = await FishingService.getFishingData(userId, guildId);
        let rodName = "Kh√¥ng c√≥";
        let baitName = "Kh√¥ng c√≥";
        
        // L∆∞u th√¥ng tin c·∫ßn c√¢u ban ƒë·∫ßu ƒë·ªÉ so s√°nh sau n√†y
        const originalRodName = fishingData.currentRod ? FISHING_RODS[fishingData.currentRod]?.name || 'Unknown' : 'None';
        // L∆∞u th√¥ng tin m·ªìi ban ƒë·∫ßu ƒë·ªÉ so s√°nh sau n√†y
        const originalBaitName = fishingData.currentBait ? BAITS[fishingData.currentBait]?.name || 'Unknown' : 'None';
        
        if (fishingData.currentRod && fishingData.currentRod !== "") {
            rodName = FISHING_RODS[fishingData.currentRod]?.name || "Kh√¥ng x√°c ƒë·ªãnh";
        }
        
        if (fishingData.currentBait && fishingData.currentBait !== "") {
            baitName = BAITS[fishingData.currentBait]?.name || "Kh√¥ng x√°c ƒë·ªãnh";
        }

        // T·ªëi ∆∞u: Load GIF m·ªôt l·∫ßn v√† t√°i s·ª≠ d·ª•ng
        const fishingGifUrl = "https://cdn.discordapp.com/attachments/1396335030216822875/1397399341475430411/fish-shark.gif?ex=6881950d&is=6880438d&hm=60523d4d9a24ab5f45a42e6fd1c8dddf28680e015cadf0e5fce617e12599f552&";
        
        // GIF ƒë·∫∑c bi·ªát cho Admin (hi·ªÉn th·ªã tr√™n c√πng)
        const adminGifUrl = "https://cdn.discordapp.com/attachments/1396335030216822875/1398569226188619787/113_146.gif?ex=6885d697&is=68848517&hm=51f234796bc3ada147d02b4b679afe6995bc1602f98f09571de115c5854cffb0&";
        
        // GIF ƒë·∫∑c bi·ªát cho Top 1 Fisher (theo y√™u c·∫ßu)
        const topFisherGifUrl = "https://media.discordapp.net/attachments/1396335030216822875/1398568859987869696/113_137.gif?ex=6885d640&is=688484c0&hm=caa5221123afc40711c4fcfc972f92181fc6ed9fbbc2052d689e7962b6a0e55d&=&width=480&height=184";
        
        // GIF ƒë·∫∑c bi·ªát cho Top 1 Lose (theo y√™u c·∫ßu)
        const topLoseGifUrl = "https://media.discordapp.net/attachments/1396335030216822875/1398569302663368714/113_156.gif?ex=6885d6a9&is=68848529&hm=e67d702c44f4916882ea5cb64940485e0b66aed91f74b7f7f5f6e53934fcd47d&=&width=408&height=192";
        
        // GIF ƒë·∫∑c bi·ªát cho Top 1 FishCoin (theo y√™u c·∫ßu)
        const topFishCoinGifUrl = "https://media.discordapp.net/attachments/1396335030216822875/1398569226595336324/113_147.gif?ex=6885d697&is=68848517&hm=6997312ba231ae7d566ffde7a4176d509ccc9dc85d2ff312934a34508c072e1c&=&width=600&height=168";
        
        // Animation 3 gi√¢y v·ªõi c√°c b∆∞·ªõc kh√°c nhau (ch·ªâ text thay ƒë·ªïi, GIF gi·ªØ nguy√™n)
        const animationSteps = [
            "üé£ ƒêang th·∫£ m·ªìi...",
            "üåä ƒêang ch·ªù c√° c·∫Øn c√¢u...",
            "üêü C√≥ g√¨ ƒë√≥ ƒëang c·∫Øn c√¢u!",
            "üé£ ƒêang k√©o c√° l√™n..."
        ];

        // B·∫Øt ƒë·∫ßu animation c√¢u c√° v·ªõi GIF ngay t·ª´ ƒë·∫ßu
        const fishingEmbed = new EmbedBuilder()
            .setTitle("üé£ ƒêang C√¢u C√°...")
            .setDescription(
                `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                `ü™± **M·ªìi:** ${baitName}\n\n` +
                `‚è≥ ${animationSteps[0]}`
            )
            .setColor("#0099ff")
            .setThumbnail(message.author.displayAvatarURL())
            .setImage(fishingGifUrl) // Lu√¥n gi·ªØ GIF c√¢u c√° c≈©
            .setTimestamp();

        // T·∫°o embed cho Admin GIF (hi·ªÉn th·ªã nh·ªè g·ªçn - 100x50px equivalent)
        let adminEmbed: EmbedBuilder | undefined = undefined;
        if (isAdmin) {
            adminEmbed = new EmbedBuilder()
                .setThumbnail(adminGifUrl) // GIF ƒë·∫∑c bi·ªát cho Admin (nh·ªè g·ªçn)
                .setColor("#ffd700") // M√†u v√†ng cho Admin
                .setTitle("üëë Admin Fishing"); // Ti√™u ƒë·ªÅ nh·ªè cho Admin
        }

        // T·∫°o embed cho Top 1 Fisher GIF (hi·ªÉn th·ªã nh·ªè g·ªçn)
        let topFisherEmbed: EmbedBuilder | undefined = undefined;
        if (isTopFisher && !isAdmin) {
            topFisherEmbed = new EmbedBuilder()
                .setThumbnail(topFisherGifUrl)
                .setColor("#ff6b35")
                .setTitle("üèÜ Top 1 C√¢u C√°");
        }

        // T·∫°o embed cho Top 1 Lose GIF (hi·ªÉn th·ªã nh·ªè g·ªçn)
        let topLoseEmbed: EmbedBuilder | undefined = undefined;
        if (isTopLose && !isAdmin && !isTopFisher) {
            topLoseEmbed = new EmbedBuilder()
                .setThumbnail(topLoseGifUrl)
                .setColor("#ff4757")
                .setTitle("üí∏ Top 1 Thua L·ªó");
        }

        // T·∫°o embed cho Top 1 FishCoin GIF (hi·ªÉn th·ªã nh·ªè g·ªçn)
        let topFishCoinEmbed: EmbedBuilder | undefined = undefined;
        if (isTopFishCoin && !isAdmin && !isTopFisher) {
            topFishCoinEmbed = new EmbedBuilder()
                .setThumbnail(topFishCoinGifUrl)
                .setColor("#00d4aa")
                .setTitle("üí∞ Top 1 FishCoin");
        }

        // T·∫°o embed cho Achievement (PRIORITY CAO NH·∫§T)
        let achievementEmbed: EmbedBuilder | undefined = undefined;
        if (hasAchievement && userAchievement) {
            const achievementEmoji = AchievementService.getAchievementTypeEmoji(userAchievement.type);
            const achievementTypeName = AchievementService.getAchievementTypeName(userAchievement.type);
            
            achievementEmbed = new EmbedBuilder()
                .setThumbnail(userAchievement.link) // S·ª≠ d·ª•ng link ·∫£nh t·ª´ achievement
                .setColor("#ff6b35") // M√†u cam cho achievement
                // .setTitle(`${achievementEmoji} ${userAchievement.name}`) // T√™n achievement
                .setTitle(`${userAchievement.name}`) // T√™n achievement
                .setDescription(`üèÖ **${achievementTypeName}**`); // Type achievement
        }

        // G·ª≠i embed(s) d·ª±a tr√™n vai tr√≤ - Priority: Achievement > Admin > Top Fisher > Top FishCoin > Top Lose
        let embeds: EmbedBuilder[] = [fishingEmbed];
        if (hasAchievement && achievementEmbed) {
            embeds = [achievementEmbed, fishingEmbed]; // Achievement c√≥ priority cao nh·∫•t
        } else if (isAdmin && adminEmbed) {
            embeds = [adminEmbed, fishingEmbed];
        } else if (isTopFisher && topFisherEmbed) {
            embeds = [topFisherEmbed, fishingEmbed];
        } else if (isTopFishCoin && topFishCoinEmbed) {
            embeds = [topFishCoinEmbed, fishingEmbed];
        } else if (isTopLose && topLoseEmbed) {
            embeds = [topLoseEmbed, fishingEmbed];
        }
        const fishingMsg = await message.reply({ embeds });

        // C·∫≠p nh·∫≠t c√°c b∆∞·ªõc ti·∫øp theo (ch·ªâ thay ƒë·ªïi description, kh√¥ng ƒë·ªông ƒë·∫øn image ƒë·ªÉ tr√°nh nh√°y GIF)
        for (let i = 1; i < animationSteps.length; i++) {
            await new Promise(resolve => setTimeout(resolve, 750)); // 750ms m·ªói b∆∞·ªõc = 3 gi√¢y t·ªïng
            
            if (hasAchievement && achievementEmbed) {
                // Achievement: C·∫≠p nh·∫≠t c·∫£ hai embed
                const updatedFishingEmbed = EmbedBuilder.from(fishingMsg.embeds[1]) // Embed th·ª© 2 l√† fishing embed
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                const updatedEmbeds = [achievementEmbed, updatedFishingEmbed];
                await fishingMsg.edit({ embeds: updatedEmbeds });
            } else if (isAdmin && adminEmbed) {
                // Admin: C·∫≠p nh·∫≠t c·∫£ hai embed
                const updatedFishingEmbed = EmbedBuilder.from(fishingMsg.embeds[1]) // Embed th·ª© 2 l√† fishing embed
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                const updatedEmbeds = [adminEmbed, updatedFishingEmbed];
                await fishingMsg.edit({ embeds: updatedEmbeds });
            } else if (isTopFisher && topFisherEmbed) {
                // Top 1 Fisher: C·∫≠p nh·∫≠t c·∫£ hai embed
                const updatedFishingEmbed = EmbedBuilder.from(fishingMsg.embeds[1]) // Embed th·ª© 2 l√† fishing embed
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                const updatedEmbeds = [topFisherEmbed, updatedFishingEmbed];
                await fishingMsg.edit({ embeds: updatedEmbeds });
            } else if (isTopFishCoin && topFishCoinEmbed) {
                // Top 1 FishCoin: C·∫≠p nh·∫≠t c·∫£ hai embed
                const updatedFishingEmbed = EmbedBuilder.from(fishingMsg.embeds[1]) // Embed th·ª© 2 l√† fishing embed
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                const updatedEmbeds = [topFishCoinEmbed, updatedFishingEmbed];
                await fishingMsg.edit({ embeds: updatedEmbeds });
            } else if (isTopLose && topLoseEmbed) {
                // Top 1 Lose: C·∫≠p nh·∫≠t c·∫£ hai embed
                const updatedFishingEmbed = EmbedBuilder.from(fishingMsg.embeds[1]) // Embed th·ª© 2 l√† fishing embed
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                const updatedEmbeds = [topLoseEmbed, updatedFishingEmbed];
                await fishingMsg.edit({ embeds: updatedEmbeds });
            } else {
                // Normal user: Ch·ªâ c·∫≠p nh·∫≠t m·ªôt embed
                const updatedEmbed = EmbedBuilder.from(fishingMsg.embeds[0])
                    .setDescription(
                        `**${message.author.username}** ƒëang c√¢u c√°...\n\n` +
                        `üé£ **C·∫ßn c√¢u:** ${rodName}\n` +
                        `ü™± **M·ªìi:** ${baitName}\n\n` +
                        `‚è≥ ${animationSteps[i]}`
                    );
                
                await fishingMsg.edit({ embeds: [updatedEmbed] });
            }
        }

        // Th·ª±c hi·ªán c√¢u c√°
        const result = await FishingService.fish(userId, guildId, isAdmin);
        const { fish, value, isPityActivated } = result;

        // Ki·ªÉm tra auto-switch bait sau khi c√¢u c√°
        let autoSwitchMessage = '';
        try {
            const fishingData = await FishingService.getFishingData(userId, guildId);
            const currentBait = fishingData.baits.find((b: any) => b.baitType === fishingData.currentBait);
            
            // N·∫øu m·ªìi hi·ªán t·∫°i h·∫øt, th√¥ng b√°o ƒë√£ auto-switch
            if (!currentBait || currentBait.quantity <= 0) {
                // T√¨m m·ªìi m·ªõi ƒë∆∞·ª£c ch·ªçn
                const newBait = fishingData.baits.find((b: any) => b.baitType === fishingData.currentBait);
                if (newBait) {
                    const baitData = BAITS[newBait.baitType];
                    autoSwitchMessage = `\n\nüîÑ **T·ª± ƒë·ªông chuy·ªÉn sang m·ªìi:** ${baitData.emoji} ${baitData.name} (${newBait.quantity} c√≤n l·∫°i)`;
                }
            }
        } catch (error) {
            console.error('Error checking auto-switch bait:', error);
        }

        // Ki·ªÉm tra auto-equip bait (trang b·ªã m·ªìi t·ª± ƒë·ªông)
        let autoEquipMessage = '';
        try {
            // So s√°nh v·ªõi bait ban ƒë·∫ßu ƒë·ªÉ xem c√≥ auto-equip kh√¥ng
            if (originalBaitName !== baitName) {
                const baitData = BAITS[fishingData.currentBait];
                const currentBait = fishingData.baits.find((b: any) => b.baitType === fishingData.currentBait);
                if (baitData && currentBait) {
                    autoEquipMessage = `\n\n‚ö° **T·ª± ƒë·ªông trang b·ªã m·ªìi:** ${baitData.emoji} ${baitData.name} (${currentBait.quantity} c√≤n l·∫°i)`;
                }
            }
        } catch (error) {
            console.error('Error checking auto-equip bait:', error);
        }

        // Ki·ªÉm tra auto-switch rod sau khi c√¢u c√°
        let autoSwitchRodMessage = '';
        try {
            const fishingData = await FishingService.getFishingData(userId, guildId);
            const currentRod = fishingData.rods.find((r: any) => r.rodType === fishingData.currentRod);
            if (!currentRod || currentRod.durability <= 0) {
                // T√¨m c·∫ßn m·ªõi ƒë∆∞·ª£c ch·ªçn
                const newRod = fishingData.rods.find((r: any) => r.rodType === fishingData.currentRod);
                if (newRod) {
                    const rodData = FISHING_RODS[newRod.rodType];
                    autoSwitchRodMessage = `\n\nüîÑ **T·ª± ƒë·ªông chuy·ªÉn sang c·∫ßn c√¢u:** ${rodData.emoji} ${rodData.name} (ƒê·ªô b·ªÅn: ${newRod.durability})`;
                }
            }
        } catch (error) {
            console.error('Error checking auto-switch rod:', error);
        }

        // Ki·ªÉm tra auto-equip rod (trang b·ªã c·∫ßn t·ª± ƒë·ªông)
        let autoEquipRodMessage = '';
        try {
            if (originalRodName !== rodName) {
                const rodData = FISHING_RODS[fishingData.currentRod];
                const currentRod = fishingData.rods.find((r: any) => r.rodType === fishingData.currentRod);
                if (rodData && currentRod) {
                    autoEquipRodMessage = `\n\n‚ö° **T·ª± ƒë·ªông trang b·ªã c·∫ßn c√¢u:** ${rodData.emoji} ${rodData.name} (ƒê·ªô b·ªÅn: ${currentRod.durability})`;
                }
            }
        } catch (error) {
            console.error('Error checking auto-equip rod:', error);
        }

        // T·ª± ƒë·ªông th√™m c√° huy·ªÅn tho·∫°i v√†o fish inventory
        let fishInventoryMessage = '';
        if (fish.rarity === 'legendary') {
            try {
                const { FishBreedingService } = await import('@/utils/fish-breeding');
                const { FishInventoryService } = await import('@/utils/fish-inventory');
                
                // T·∫°o c√° trong h·ªá th·ªëng nu√¥i
                const fishData = {
                    userId,
                    guildId,
                    species: fish.name,
                    level: 1,
                    experience: 0,
                    rarity: 'legendary',
                    value: value, // S·ª≠ d·ª•ng value t·ª´ k·∫øt qu·∫£ c√¢u c√°
                    generation: 1,
                    specialTraits: JSON.stringify(['Caught']),
                    status: 'growing',
                };
                
                const createdFish = await prisma.fish.create({ data: fishData });
                
                // Th√™m v√†o fish inventory
                const addResult = await FishInventoryService.addFishToInventory(userId, guildId, createdFish.id);
                
                if (addResult.success) {
                    fishInventoryMessage = '\n\nüêü **C√° huy·ªÅn tho·∫°i ƒë√£ ƒë∆∞·ª£c th√™m v√†o r∆∞∆°ng nu√¥i!**\nD√πng `n.fishbarn` ƒë·ªÉ m·ªü r∆∞∆°ng nu√¥i c√°.';
                } else {
                    fishInventoryMessage = '\n\n‚ö†Ô∏è **Kh√¥ng th·ªÉ th√™m v√†o r∆∞∆°ng nu√¥i:** ' + addResult.error;
                }
            } catch (error) {
                console.error('Error adding legendary fish to inventory:', error);
                fishInventoryMessage = '\n\n‚ö†Ô∏è **L·ªói khi th√™m v√†o r∆∞∆°ng nu√¥i!**';
            }
        }

        // L·∫•y th√¥ng tin t·ªïng s·ªë l·∫ßn c√¢u c√° (s·ª≠ d·ª•ng fishingData ƒë√£ c√≥)
        const totalFishingCount = fishingData.totalFish;
        
        // T·∫°o hi·ªáu ·ª©ng cho s·ªë l·∫ßn c√¢u
        let fishingCountEffect = '';
        if (totalFishingCount >= 1000) {
            fishingCountEffect = 'üî• **FISHING MASTER!** üî•';
        } else if (totalFishingCount >= 500) {
            fishingCountEffect = '‚ö° **FISHING EXPERT!** ‚ö°';
        } else if (totalFishingCount >= 100) {
            fishingCountEffect = 'üéØ **FISHING PRO!** üéØ';
        } else if (totalFishingCount >= 50) {
            fishingCountEffect = 'üåü **FISHING STAR!** üåü';
        } else if (totalFishingCount >= 10) {
            fishingCountEffect = '‚≠ê **FISHING BEGINNER!** ‚≠ê';
        }

        // Th√™m th√¥ng tin m√πa
        const seasonInfo = SeasonalFishingService.getSeasonInfoText();

        // Th√¥ng b√°o pity system n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t
        let pityMessage = '';
        if (isPityActivated) {
            pityMessage = '\n\nüéâ **PITY SYSTEM K√çCH HO·∫†T!** üéâ\nB·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i nh·ªù h·ªá th·ªëng b·∫£o h·ªô!';
        }

        const successEmbed = new EmbedBuilder()
            .setTitle("üé£ C√¢u C√° Th√†nh C√¥ng!")
            .setDescription(
                `**${message.author.username}** ƒë√£ c√¢u ƒë∆∞·ª£c:\n\n` +
                `${fish.emoji} **${fish.name}**\n` +
                `${getRarityEmoji(fish.rarity)} **${getRarityText(fish.rarity)}**\n` +
                `üêü **Gi√° tr·ªã:** ${value} FishCoin\n\n` +
                `üìä **Th·ªëng k√™ c√¢u c√°:**\n` +
                `üé£ **T·ªïng s·ªë l·∫ßn c√¢u:** ${totalFishingCount.toLocaleString()} l·∫ßn\n` +
                (fishingCountEffect ? `${fishingCountEffect}\n` : '') +
                `üí∞ **T·ªïng thu nh·∫≠p:** ${fishingData.totalEarnings.toLocaleString()} FishCoin\n\n` +
                `üåç **${seasonInfo}**${fishInventoryMessage}${autoSwitchMessage}${autoEquipMessage}${autoSwitchRodMessage}${autoEquipRodMessage}${pityMessage}` +
                (isAdmin && fish.rarity === 'legendary' ? '\n\nüëë **Admin ƒë√£ c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i!**' : '')
            )
            .setColor(getRarityColor(fish.rarity))
            .setThumbnail(message.author.displayAvatarURL())
            .setTimestamp();

        // G·ª≠i k·∫øt qu·∫£ d·ª±a tr√™n vai tr√≤ - Priority: Achievement > Admin > Top Fisher > Top FishCoin > Top Lose
        if (hasAchievement && achievementEmbed) {
            const finalEmbeds = [achievementEmbed, successEmbed];
            await fishingMsg.edit({ embeds: finalEmbeds });
        } else if (isAdmin && adminEmbed) {
            const finalEmbeds = [adminEmbed, successEmbed];
            await fishingMsg.edit({ embeds: finalEmbeds });
        } else if (isTopFisher && topFisherEmbed) {
            const finalEmbeds = [topFisherEmbed, successEmbed];
            await fishingMsg.edit({ embeds: finalEmbeds });
        } else if (isTopFishCoin && topFishCoinEmbed) {
            const finalEmbeds = [topFishCoinEmbed, successEmbed];
            await fishingMsg.edit({ embeds: finalEmbeds });
        } else if (isTopLose && topLoseEmbed) {
            const finalEmbeds = [topLoseEmbed, successEmbed];
            await fishingMsg.edit({ embeds: finalEmbeds });
        } else {
            await fishingMsg.edit({ embeds: [successEmbed] });
        }
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi c√¢u c√°!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    } finally {
        // X√≥a tr·∫°ng th√°i ƒëang c√¢u c√°
        fishingInProgress.delete(userId);
    }
}

async function fish(message: Message) {
    // Redirect to fishWithAnimation for consistency
    return await fishWithAnimation(message);
}

async function showShop(message: Message) {
    const embed = new EmbedBuilder()
        .setTitle("üè™ C·ª≠a H√†ng C√¢u C√°")
        .setDescription(
            "**C·∫ßn c√¢u:**\n" +
            Object.entries(FISHING_RODS).map(([key, rod]: [string, typeof FISHING_RODS[string]]) =>
                `${rod.emoji} **${rod.name}** - ${rod.price}üêü | ƒê·ªô b·ªÅn: ${rod.durability} | Bonus: +${rod.rarityBonus}%`
            ).join("\n") +
            "\n\n**M·ªìi:**\n" +
            Object.entries(BAITS).map(([key, bait]: [string, typeof BAITS[string]]) =>
                `${bait.emoji} **${bait.name}** - ${bait.price}üêü | Bonus: +${bait.rarityBonus}%`
            ).join("\n") +
            "\n\n**Mua:** `n.fishing buy <lo·∫°i> <s·ªë l∆∞·ª£ng>`\n" +
            "V√≠ d·ª•: `n.fishing buy copper 1` ho·∫∑c `n.fishing buy good 5`\n" +
            "\n**Ho·∫∑c s·ª≠ d·ª•ng Shop UI b√™n d∆∞·ªõi ƒë·ªÉ mua d·ªÖ d√†ng h∆°n!**"
        )
        .setColor(config.embedColor)
        .setTimestamp();

    // T·∫°o n√∫t m·ªü shop UI
    const row = {
        type: 1 as const,
        components: [
            {
                type: 2 as const,
                style: 1 as const, // Primary button
                label: "üõí M·ªü Shop UI",
                custom_id: JSON.stringify({
                    n: "FishingShop",
                    d: { action: "shop" }
                })
            }
        ]
    };

    await message.reply({ embeds: [embed], components: [row] });
}

async function buyItem(message: Message, args: string[]) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.fishing buy <lo·∫°i> [s·ªë l∆∞·ª£ng]`");
    }

    const itemType = args[0].toLowerCase();
    const quantity = parseInt(args[1]) || 1;

    if (quantity <= 0) {
        return message.reply("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!");
    }

    try {
        if (FISHING_RODS[itemType]) {
            // Mua c·∫ßn c√¢u
            const rod = await FishingService.buyRod(userId, guildId, itemType);
            const embed = new EmbedBuilder()
                .setTitle("‚úÖ Mua Th√†nh C√¥ng!")
                .setDescription(
                    `**${message.author.username}** ƒë√£ mua:\n\n` +
                    `${rod.emoji} **${rod.name}**\n` +
                    `üêü **Gi√°:** ${rod.price} FishCoin\n` +
                    `üîß **ƒê·ªô b·ªÅn:** ${rod.durability}\n` +
                    `üìà **TƒÉng t·ª∑ l·ªá hi·∫øm:** +${rod.rarityBonus}%`
                )
                .setColor("#00ff00")
                .setTimestamp();

            await message.reply({ embeds: [embed] });
        } else if (BAITS[itemType]) {
            // Mua m·ªìi
            const result = await FishingService.buyBait(userId, guildId, itemType, quantity);
            const embed = new EmbedBuilder()
                .setTitle("‚úÖ Mua Th√†nh C√¥ng!")
                .setDescription(
                    `**${message.author.username}** ƒë√£ mua:\n\n` +
                    `${result.bait.emoji} **${result.bait.name}** x${quantity}\n` +
                    `üêü **T·ªïng gi√°:** ${result.totalCost} FishCoin\n` +
                    `üìà **TƒÉng t·ª∑ l·ªá hi·∫øm:** +${result.bait.rarityBonus}%`
                )
                .setColor("#00ff00")
                .setTimestamp();

            await message.reply({ embeds: [embed] });
        } else {
            return message.reply("‚ùå Lo·∫°i v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá! D√πng `n.fishing shop` ƒë·ªÉ xem danh s√°ch.");
        }
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi mua v·∫≠t ph·∫©m!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function sellFish(message: Message, args: string[]) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.fishing sell <t√™n c√°> [s·ªë l∆∞·ª£ng]`");
    }

    // Parse fishName and quantity, h·ªó tr·ª£ t√™n c√° c√≥ d·∫•u c√°ch v√† ngo·∫∑c k√©p
    let fishName = args[0];
    let quantity = 1;
    if (fishName.startsWith('"')) {
        let i = 1;
        while (i < args.length && !args[i].endsWith('"')) {
            fishName += ' ' + args[i];
            i++;
        }
        if (i < args.length) {
            fishName += ' ' + args[i];
            quantity = parseInt(args[i + 1]) || 1;
            // B·ªè d·∫•u ngo·∫∑c k√©p
            fishName = fishName.slice(1, -1);
        } else {
            // N·∫øu kh√¥ng c√≥ d·∫•u " ƒë√≥ng, fallback l·∫•y h·∫øt
            fishName = fishName.slice(1);
        }
    } else if (args.length > 1) {
        quantity = parseInt(args[1]) || 1;
    }

    if (quantity <= 0) {
        return message.reply("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!");
    }

    try {
        const result = await FishingService.sellFish(userId, guildId, fishName, quantity);
        const embed = new EmbedBuilder()
            .setTitle("üí∞ B√°n Th√†nh C√¥ng!")
            .setDescription(
                `**${message.author.username}** ƒë√£ b√°n:\n\n` +
                `üêü **${result.fishName}** x${result.quantity}\n` +
                `üêü **Gi√° hi·ªán t·∫°i:** ${result.currentPrice} FishCoin\n` +
                `üíµ **T·ªïng gi√°:** ${result.totalValue} FishCoin`
            )
            .setColor("#00ff00")
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi b√°n c√°!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function showInventory(message: Message) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    try {
        const fishingData = await FishingService.getFishingData(userId, guildId);

        // T·∫°o th√¥ng tin c·∫ßn c√¢u v√† m·ªìi
        let rodInfo = "Kh√¥ng c√≥";
        let baitInfo = "Kh√¥ng c√≥";
        
        if (fishingData.currentRod && fishingData.currentRod !== "") {
            const currentRod = fishingData.rods.find((r: any) => r.rodType === fishingData.currentRod);
            if (currentRod) {
                const rodData = FISHING_RODS[fishingData.currentRod];
                rodInfo = `${rodData.emoji} **${rodData.name}** (ƒê·ªô b·ªÅn: ${currentRod.durability})`;
            }
        }
        
        if (fishingData.currentBait && fishingData.currentBait !== "") {
            const currentBait = fishingData.baits.find((b: any) => b.baitType === fishingData.currentBait);
            if (currentBait) {
                const baitData = BAITS[fishingData.currentBait];
                baitInfo = `${baitData.emoji} **${baitData.name}** (S·ªë l∆∞·ª£ng: ${currentBait.quantity})`;
            }
        }

        // L·ªçc ra ch·ªâ c√° th∆∞·ªùng (kh√¥ng ph·∫£i legendary)
        const normalFish = fishingData.fish.filter((f: any) => {
            const fishInfo = FISH_LIST.find(fish => fish.name === f.fishName);
            return fishInfo && fishInfo.rarity !== 'legendary';
        });

        const embed = new EmbedBuilder()
            .setTitle("üéí T√∫i ƒê·ªì C√¢u C√°")
            .setDescription(`**${message.author.username}**\n\n` +
                `üé£ **C·∫ßn c√¢u hi·ªán t·∫°i:** ${rodInfo}\n` +
                `ü™± **M·ªìi hi·ªán t·∫°i:** ${baitInfo}\n\n` +
                `**C√° ƒë√£ b·∫Øt:**\n` +
                                 (normalFish.length > 0 
                     ? normalFish.map((f: any) => 
                         `${FISH_LIST.find(fish => fish.name === f.fishName)?.emoji || "üêü"} **${f.fishName}** x${f.quantity} (${f.fishValue} FishCoin)`
                     ).join("\n")
                     : "Ch∆∞a c√≥ c√° n√†o"
                 )
            )
            .setColor(config.embedColor)
            .setTimestamp();

        // T·∫°o components v·ªõi n√∫t b√°n nhanh cho t·ª´ng lo·∫°i c√° (gi·ªõi h·∫°n 5 components)
        const components = [];
        if (normalFish.length > 0) {
            // Ch·ªâ hi·ªÉn th·ªã t·ªëi ƒëa 4 lo·∫°i c√° ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° gi·ªõi h·∫°n 5 components
            const fishToShow = normalFish.slice(0, 4);
            
            for (let i = 0; i < fishToShow.length; i += 2) {
                const row = {
                    type: 1 as const,
                    components: fishToShow.slice(i, i + 2).map((f: any) => ({
                        type: 2 as const,
                        style: 3 as const, // Green button
                        label: `B√°n ${f.fishName}`,
                        custom_id: JSON.stringify({
                            n: "SellFish",
                            d: {
                                fishId: f.id,
                                fishName: f.fishName
                            }
                        }),
                        emoji: { name: "üí∞" }
                    }))
                };
                components.push(row);
            }
        }

        // Th√™m n√∫t qu·∫£n l√Ω trang b·ªã (n·∫øu ch∆∞a ƒë·ªß 5 components)
        if (components.length < 5) {
            const manageRow = {
                type: 1 as const,
                components: [
                    {
                        type: 2 as const,
                        style: 2 as const, // Secondary button
                        label: "‚öôÔ∏è Qu·∫£n L√Ω Trang B·ªã",
                        custom_id: JSON.stringify({
                            n: "FishingShop",
                            d: { action: "manage" }
                        }),
                        emoji: { name: "‚öôÔ∏è" }
                    }
                ]
            };
            components.push(manageRow);
        }

        await message.reply({ 
            embeds: [embed],
            components: components.length > 0 ? components : undefined
        });
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi xem t√∫i ƒë·ªì!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function showStats(message: Message) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    try {
        const fishingData = await FishingService.getFishingData(userId, guildId);

        const embed = new EmbedBuilder()
            .setTitle("üìä Th·ªëng K√™ C√¢u C√°")
            .setDescription(`**${message.author.username}**\n\n` +
                `üé£ **T·ªïng s·ªë l·∫ßn c√¢u:** ${fishingData.totalFish}\n` +
                `üêü **T·ªïng thu nh·∫≠p:** ${fishingData.totalEarnings} FishCoin\n` +
                `üêü **C√° l·ªõn nh·∫•t:** ${fishingData.biggestFish || "Ch∆∞a c√≥"} (${fishingData.biggestValue} FishCoin)\n` +
                `${getRarityEmoji(fishingData.rarestRarity)} **C√° hi·∫øm nh·∫•t:** ${fishingData.rarestFish || "Ch∆∞a c√≥"} (${getRarityText(fishingData.rarestRarity)})`
            )
            .setColor(config.embedColor)
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi xem th·ªëng k√™!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function showSeasonInfo(message: Message) {
    const embed = SeasonalFishingService.createSeasonInfoEmbed();
    return await message.reply({ embeds: [embed] });
}

async function showHelp(message: Message) {
    const embed = new EmbedBuilder()
        .setTitle("üé£ H·ªá Th·ªëng C√¢u C√° - H∆∞·ªõng D·∫´n")
        .setDescription(
            "**C√¢u c√°:** `n.fishing` (v·ªõi animation 3 gi√¢y)\n" +
            "**Xem c·ª≠a h√†ng:** `n.fishing shop`\n" +
            "**Mua v·∫≠t ph·∫©m:** `n.fishing buy <lo·∫°i> [s·ªë l∆∞·ª£ng]`\n" +
            "**B√°n c√°:** `n.fishing sell <t√™n c√°> [s·ªë l∆∞·ª£ng]`\n" +
            "**Xem gi√° c√°:** `n.fishing price` ho·∫∑c `n.fishing price <t√™n c√°>`\n" +
            "**Set c·∫ßn c√¢u:** `n.fishing setrod <lo·∫°i>`\n" +
            "**Set m·ªìi:** `n.fishing setbait <lo·∫°i>`\n" +
            "**Xem t√∫i ƒë·ªì:** `n.fishing inv` ho·∫∑c `n.fishing inventory`\n" +
            "**Xem th·ªëng k√™:** `n.fishing stats`\n" +
            "**Xem th√¥ng tin m√πa:** `n.fishing season` ho·∫∑c `n.fishing m√πa`\n\n" +
            "**V√≠ d·ª•:**\n" +
            "‚Ä¢ `n.fishing` - C√¢u c√° v·ªõi animation\n" +
            "‚Ä¢ `n.fishing fish` - C√¢u c√° v·ªõi animation\n" +
            "‚Ä¢ `n.fishing buy copper 1` - Mua c·∫ßn c√¢u ƒë·ªìng\n" +
            "‚Ä¢ `n.fishing buy good 5` - Mua 5 m·ªìi ngon\n" +
            "‚Ä¢ `n.fishing price` - Xem t·∫•t c·∫£ gi√° c√° hi·ªán t·∫°i\n" +
            "‚Ä¢ `n.fishing price \"C√° r√¥ phi\"` - Xem gi√° c√° r√¥ phi\n" +
            "‚Ä¢ `n.fishing setrod copper` - Set c·∫ßn c√¢u ƒë·ªìng l√†m c·∫ßn hi·ªán t·∫°i\n" +
            "‚Ä¢ `n.fishing setbait good` - Set m·ªìi ngon l√†m m·ªìi hi·ªán t·∫°i\n" +
            "‚Ä¢ `n.fishing sell \"C√° r√¥ phi\" 1` - B√°n 1 con c√° r√¥ phi\n" +
            "‚Ä¢ `n.fishing season` - Xem th√¥ng tin m√πa hi·ªán t·∫°i\n\n" +
            "**üåç H·ªá Th·ªëng C√¢u C√° Theo M√πa:**\n" +
            "‚Ä¢ **M√πa H√® ‚òÄÔ∏è:** Cooldown 20s, gi√° c√° -20%\n" +
            "‚Ä¢ **M√πa Thu üçÇ:** Cooldown 30s, gi√° c√° +10%\n" +
            "‚Ä¢ **M√πa ƒê√¥ng ‚ùÑÔ∏è:** Cooldown 40s, gi√° c√° +40%\n" +
            "‚Ä¢ **M√πa Xu√¢n üå∏:** Cooldown 35s, gi√° c√° +10%, may m·∫Øn +20%\n\n" +
            "**L∆∞u √Ω:**\n" +
            "‚Ä¢ **B·∫°n c·∫ßn mua c·∫ßn c√¢u v√† m·ªìi tr∆∞·ªõc khi c√¢u c√°!**\n" +
            "‚Ä¢ M·ªói l·∫ßn c√¢u t·ªën 10 FishCoin\n" +
            "‚Ä¢ Cooldown thay ƒë·ªïi theo m√πa (20-40 gi√¢y)\n" +
            "‚Ä¢ Animation c√¢u c√° k√©o d√†i 3 gi√¢y\n" +
            "‚Ä¢ C·∫ßn c√¢u v√† m·ªìi t·ªët h∆°n s·∫Ω tƒÉng t·ª∑ l·ªá b·∫Øt c√° hi·∫øm\n" +
            "‚Ä¢ C·∫ßn c√¢u c√≥ ƒë·ªô b·ªÅn, m·ªìi c√≥ s·ªë l∆∞·ª£ng gi·ªõi h·∫°n\n" +
            "‚Ä¢ Khi h·∫øt ƒë·ªô b·ªÅn ho·∫∑c m·ªìi, b·∫°n c·∫ßn mua m·ªõi\n" +
            "‚Ä¢ **Gi√° c√° thay ƒë·ªïi m·ªói 10 ph√∫t v·ªõi bi·∫øn ƒë·ªông ¬±10%**\n" +
            "‚Ä¢ Trong t√∫i ƒë·ªì c√≥ n√∫t \"B√°n t·∫•t c·∫£\" ƒë·ªÉ b√°n to√†n b·ªô s·ªë l∆∞·ª£ng c√° nhanh\n\n" +
            "**üìã Ph√¢n bi·ªát c√°c lo·∫°i c√°:**\n" +
            "‚Ä¢ **C√° th∆∞·ªùng (Common/Rare/Epic):** Hi·ªÉn th·ªã trong `n.fishing inventory`\n" +
            "‚Ä¢ **C√° huy·ªÅn tho·∫°i (Legendary):** Ch·ªâ hi·ªÉn th·ªã trong `n.fishbarn` (r∆∞∆°ng nu√¥i c√°)\n" +
            "‚Ä¢ **C√° huy·ªÅn tho·∫°i kh√¥ng xu·∫•t hi·ªán trong `n.fishing inventory`**"
        )
        .setColor(config.embedColor)
        .setTimestamp();

    await message.reply({ embeds: [embed] });
}

async function setCurrentRod(message: Message, args: string[]) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.fishing setrod <lo·∫°i c·∫ßn c√¢u>`");
    }

    const rodType = args[0].toLowerCase();

    try {
        const rod = await FishingService.setCurrentRod(userId, guildId, rodType);
        const rodInfo = FISHING_RODS[rodType];
        const embed = new EmbedBuilder()
            .setTitle("‚úÖ ƒê√£ Set C·∫ßn C√¢u!")
            .setDescription(
                `**${message.author.username}** ƒë√£ set:\n\n` +
                `${rodInfo.emoji} **${rodInfo.name}** l√†m c·∫ßn c√¢u hi·ªán t·∫°i\n` +
                `üîß **ƒê·ªô b·ªÅn c√≤n l·∫°i:** ${rod.durability}\n` +
                `üìà **TƒÉng t·ª∑ l·ªá hi·∫øm:** +${rodInfo.rarityBonus}%`
            )
            .setColor("#00ff00")
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi set c·∫ßn c√¢u!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function setCurrentBait(message: Message, args: string[]) {
    const userId = message.author.id;
    const guildId = message.guildId!;

    if (args.length < 1) {
        return message.reply("‚ùå Thi·∫øu tham s·ªë! D√πng: `n.fishing setbait <lo·∫°i m·ªìi>`");
    }

    const baitType = args[0].toLowerCase();

    try {
        const bait = await FishingService.setCurrentBait(userId, guildId, baitType);
        const baitInfo = BAITS[baitType];
        const embed = new EmbedBuilder()
            .setTitle("‚úÖ ƒê√£ Set M·ªìi!")
            .setDescription(
                `**${message.author.username}** ƒë√£ set:\n\n` +
                `${baitInfo.emoji} **${baitInfo.name}** l√†m m·ªìi hi·ªán t·∫°i\n` +
                `üì¶ **S·ªë l∆∞·ª£ng c√≤n l·∫°i:** ${bait.quantity}\n` +
                `üìà **TƒÉng t·ª∑ l·ªá hi·∫øm:** +${baitInfo.rarityBonus}%`
            )
            .setColor("#00ff00")
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi set m·ªìi!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
}

async function showFishPrices(message: Message, args: string[]) {
    try {
        // Import FishPriceService
        const { FishPriceService } = await import("@/utils/fishing");
        
        if (args.length > 0) {
            // Xem gi√° c·ªßa m·ªôt lo·∫°i c√° c·ª• th·ªÉ
            const fishName = args.join(" ");
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i c√° huy·ªÅn tho·∫°i kh√¥ng
            const legendaryFish = FISH_LIST.find(f => f.name === fishName);
            if (legendaryFish && legendaryFish.rarity === 'legendary') {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ú® C√° Huy·ªÅn Tho·∫°i")
                    .setDescription(
                        `**${fishName}** l√† c√° huy·ªÅn tho·∫°i v√† ch·ªâ c√≥ th·ªÉ b√°n trong r∆∞∆°ng nu√¥i c√°!\n\n` +
                        `üêü **S·ª≠ d·ª•ng:** \`n.fishbarn\` ƒë·ªÉ m·ªü r∆∞∆°ng nu√¥i c√°\n` +
                        `üí∞ **Gi√° tr·ªã:** C√° huy·ªÅn tho·∫°i c√≥ gi√° tr·ªã c·ªë ƒë·ªãnh v√† kh√¥ng bi·∫øn ƒë·ªông\n` +
                        `üé£ **C√°ch c√≥:** Ch·ªâ c√≥ th·ªÉ c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i khi c√¢u c√°`
                    )
                    .setColor("#FFD700")
                    .setTimestamp();

                return await message.reply({ embeds: [errorEmbed] });
            }
            
            const fishPriceInfo = await FishPriceService.getFishPriceInfo(fishName);
            
            if (!fishPriceInfo) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng t√¨m th·∫•y")
                    .setDescription(`Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° c·ªßa **${fishName}**`)
                    .setColor("#ff0000")
                    .setTimestamp();

                return await message.reply({ embeds: [errorEmbed] });
            }

            const fishInfo = FISH_LIST.find(f => f.name === fishName);
            const changeEmoji = fishPriceInfo.changePercent > 0 ? "üìà" : fishPriceInfo.changePercent < 0 ? "üìâ" : "‚û°Ô∏è";
            const changeColor = fishPriceInfo.changePercent > 0 ? "#00ff00" : fishPriceInfo.changePercent < 0 ? "#ff0000" : "#ffff00";

            const embed = new EmbedBuilder()
                .setTitle(`${fishInfo?.emoji || "üêü"} Gi√° ${fishName}`)
                .setDescription(
                                    `**Gi√° hi·ªán t·∫°i:** ${fishPriceInfo.currentPrice} FishCoin\n` +
                `**Gi√° g·ªëc:** ${fishPriceInfo.basePrice} FishCoin\n` +
                    `**Thay ƒë·ªïi:** ${changeEmoji} ${fishPriceInfo.priceChange > 0 ? "+" : ""}${fishPriceInfo.priceChange} (${fishPriceInfo.changePercent > 0 ? "+" : ""}${fishPriceInfo.changePercent.toFixed(1)}%)\n` +
                    `**C·∫≠p nh·∫≠t l√∫c:** ${fishPriceInfo.lastUpdated.toLocaleString("vi-VN")}`
                )
                .setColor(changeColor)
                .setTimestamp();

            await message.reply({ embeds: [embed] });
        } else {
            // Xem t·∫•t c·∫£ gi√° c√°
            const allPrices = await FishPriceService.getAllFishPrices();
            
            if (allPrices.length === 0) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu")
                    .setDescription("Ch∆∞a c√≥ th√¥ng tin gi√° c√°. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông kh·ªüi t·∫°o.")
                    .setColor("#ff0000")
                    .setTimestamp();

                return await message.reply({ embeds: [errorEmbed] });
            }

            // Nh√≥m theo rarity
            const commonFish = allPrices.filter(p => {
                const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                return fishInfo?.rarity === "common";
            });
            
            const rareFish = allPrices.filter(p => {
                const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                return fishInfo?.rarity === "rare";
            });
            
            const epicFish = allPrices.filter(p => {
                const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                return fishInfo?.rarity === "epic";
            });
            
            const legendaryFishPrices = allPrices.filter(p => {
                const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                return fishInfo?.rarity === "legendary";
            });

            const embed = new EmbedBuilder()
                .setTitle("üí∞ B·∫£ng Gi√° C√° Hi·ªán T·∫°i")
                .setDescription(
                    `**C·∫≠p nh·∫≠t l√∫c:** ${new Date().toLocaleString("vi-VN")}\n\n` +
                    `**üêü C√° th∆∞·ªùng:**\n` +
                    commonFish.map(p => {
                        const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                        const changeEmoji = p.changePercent > 0 ? "üìà" : p.changePercent < 0 ? "üìâ" : "‚û°Ô∏è";
                        return `${fishInfo?.emoji || "üêü"} **${p.fishName}:** ${p.currentPrice} (${p.changePercent > 0 ? "+" : ""}${p.changePercent.toFixed(1)}%) ${changeEmoji}`;
                    }).join("\n") +
                    `\n\n**üê† C√° hi·∫øm:**\n` +
                    rareFish.map(p => {
                        const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                        const changeEmoji = p.changePercent > 0 ? "üìà" : p.changePercent < 0 ? "üìâ" : "‚û°Ô∏è";
                        return `${fishInfo?.emoji || "üê†"} **${p.fishName}:** ${p.currentPrice} (${p.changePercent > 0 ? "+" : ""}${p.changePercent.toFixed(1)}%) ${changeEmoji}`;
                    }).join("\n") +
                    `\n\n**ü¶à C√° qu√Ω hi·∫øm:**\n` +
                    epicFish.map(p => {
                        const fishInfo = FISH_LIST.find(f => f.name === p.fishName);
                        const changeEmoji = p.changePercent > 0 ? "üìà" : p.changePercent < 0 ? "üìâ" : "‚û°Ô∏è";
                        return `${fishInfo?.emoji || "ü¶à"} **${p.fishName}:** ${p.currentPrice} (${p.changePercent > 0 ? "+" : ""}${p.changePercent.toFixed(1)}%) ${changeEmoji}`;
                    }).join("\n") +
                    `\n\n**‚ú® C√° huy·ªÅn tho·∫°i:**\n` +
                    `*C√° huy·ªÅn tho·∫°i ch·ªâ c√≥ th·ªÉ b√°n trong r∆∞∆°ng nu√¥i c√° (\`n.fishbarn\`)*\n` +
                    `*Gi√° tr·ªã c·ªë ƒë·ªãnh, kh√¥ng bi·∫øn ƒë·ªông theo th·ªã tr∆∞·ªùng*` +
                    `\n\n**üí° L∆∞u √Ω:** Gi√° c√° thay ƒë·ªïi m·ªói 10 ph√∫t v·ªõi bi·∫øn ƒë·ªông ¬±15%`
                )
                .setColor("#0099ff")
                .setTimestamp();

            await message.reply({ embeds: [embed] });
        }
    } catch (error: any) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói")
            .setDescription(error.message || "ƒê√£ x·∫£y ra l·ªói khi xem gi√° c√°!")
            .setColor("#ff0000")
            .setTimestamp();

        await message.reply({ embeds: [errorEmbed] });
    }
} 