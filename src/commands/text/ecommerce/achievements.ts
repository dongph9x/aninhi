import { EmbedBuilder, Message, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";
import { Bot } from "@/classes";
import { AchievementService } from "@/utils/achievement";

export default Bot.createCommand({
    structure: {
        name: "achievements",
        aliases: ["achievement", "danhhieu", "badge"],
    },
    options: {
        cooldown: 3000,
        permissions: ["SendMessages", "EmbedLinks"],
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;

        try {
            // L·∫•y t·∫•t c·∫£ achievements c·ªßa user
            const userAchievements = await AchievementService.getUserAchievements(userId);

            if (userAchievements.length === 0) {
                const noAchievementEmbed = new EmbedBuilder()
                    .setTitle("üèÖ Danh Hi·ªáu C·ªßa B·∫°n")
                    .setDescription(
                        `**${message.author.username}** ch∆∞a c√≥ danh hi·ªáu n√†o!\n\n` +
                        `üéØ **C√°ch nh·∫≠n danh hi·ªáu:**\n` +
                        `üèÜ **Top c√¢u c√°**: C√¢u c√° nhi·ªÅu nh·∫•t server\n` +
                        `üí∞ **Top FishCoin**: C√≥ nhi·ªÅu FishCoin nh·∫•t\n` +
                        `‚öîÔ∏è **Top FishBattle**: Th·∫Øng nhi·ªÅu tr·∫≠n ƒë·∫•u c√° nh·∫•t\n` +
                        `üéñÔ∏è **Top Custom**: Danh hi·ªáu ƒë·∫∑c bi·ªát t·ª´ Admin\n\n` +
                        `üí° H√£y c·ªë g·∫Øng ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c danh hi·ªáu ƒë·∫ßu ti√™n!`
                    )
                    .setColor("#ff6b35")
                    .setThumbnail(message.author.displayAvatarURL())
                    .setTimestamp();

                return await message.reply({ embeds: [noAchievementEmbed] });
            }

            // T·∫°o embed hi·ªÉn th·ªã achievements
            const achievementEmbed = new EmbedBuilder()
                .setTitle(`üèÖ Danh Hi·ªáu C·ªßa ${message.author.username}`)
                .setDescription(
                    `**${message.author.username}** ƒë√£ s·ªü h·ªØu **${userAchievements.length}** danh hi·ªáu!\n\n` +
                    `üéØ **Danh hi·ªáu hi·ªán t·∫°i:**`
                )
                .setColor("#ff6b35")
                .setThumbnail(message.author.displayAvatarURL())
                .setTimestamp();

            // Th√™m t·ª´ng achievement v√†o embed
            userAchievements.forEach((achievement, index) => {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(achievement.type);
                const typeName = AchievementService.getAchievementTypeName(achievement.type);
                const createdAt = achievement.createdAt.toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                const statusEmoji = achievement.active ? '‚úÖ' : '‚ùå';
                const statusText = achievement.active ? 'ƒêang Active' : 'Ch∆∞a Active';

                achievementEmbed.addFields({
                    name: `${index + 1}. ${typeEmoji} ${achievement.name} ${statusEmoji}`,
                    value: `üèÖ **Lo·∫°i:** ${typeName}\nüìÖ **Nh·∫≠n ng√†y:** ${createdAt}\nüîó **·∫¢nh:** [Xem ·∫£nh](${achievement.link})\nüéØ **Tr·∫°ng th√°i:** ${statusText}`,
                    inline: false
                });
            });

            // Th√™m th√¥ng tin v·ªÅ achievement c√≥ priority cao nh·∫•t
            const highestPriority = await AchievementService.getHighestPriorityAchievement(userId);
            if (highestPriority) {
                const typeEmoji = AchievementService.getAchievementTypeEmoji(highestPriority.type);
                const typeName = AchievementService.getAchievementTypeName(highestPriority.type);
                
                achievementEmbed.addFields({
                    name: "üéØ Danh Hi·ªáu ∆Øu Ti√™n Cao Nh·∫•t",
                    value: `${typeEmoji} **${highestPriority.name}**\nüèÖ **Lo·∫°i:** ${typeName}\nüí° **S·∫Ω hi·ªÉn th·ªã khi c√¢u c√°**`,
                    inline: false
                });
            }

            // Th√™m footer v·ªõi th·ªëng k√™
            achievementEmbed.setFooter({
                text: `T·ªïng c·ªông: ${userAchievements.length} danh hi·ªáu ‚Ä¢ Danh hi·ªáu ∆∞u ti√™n s·∫Ω hi·ªÉn th·ªã khi c√¢u c√°`
            });

            // T·∫°o buttons ƒë·ªÉ ch·ªçn active achievement (ch·ªâ khi c√≥ nhi·ªÅu h∆°n 1 achievement)
            let components: ActionRowBuilder<ButtonBuilder>[] = [];
            
            if (userAchievements.length > 1) {
                const activeButtons = userAchievements.map((achievement, index) => {
                    const typeEmoji = AchievementService.getAchievementTypeEmoji(achievement.type);
                    const statusEmoji = achievement.active ? '‚úÖ' : '‚ùå';
                    
                    return new ButtonBuilder()
                        .setCustomId(`activate_achievement_${achievement.id}`)
                        .setLabel(`${index + 1}. ${achievement.name} ${statusEmoji}`)
                        .setStyle(achievement.active ? ButtonStyle.Success : ButtonStyle.Secondary)
                        .setEmoji(typeEmoji);
                });

                // Chia buttons th√†nh c√°c h√†ng (t·ªëi ƒëa 3 buttons m·ªói h√†ng)
                for (let i = 0; i < activeButtons.length; i += 3) {
                    const row = new ActionRowBuilder<ButtonBuilder>()
                        .addComponents(activeButtons.slice(i, i + 3));
                    components.push(row);
                }

                // Th√™m button ƒë·ªÉ deactivate t·∫•t c·∫£
                const deactivateRow = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('deactivate_all_achievements')
                            .setLabel('Deactivate T·∫•t C·∫£')
                            .setStyle(ButtonStyle.Danger)
                            .setEmoji('üö´')
                    );
                components.push(deactivateRow);
            }

            return await message.reply({ 
                embeds: [achievementEmbed],
                components: components
            });

        } catch (error) {
            console.error('Error fetching user achievements:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói Khi T·∫£i Danh Hi·ªáu")
                .setDescription("C√≥ l·ªói x·∫£y ra khi t·∫£i danh hi·ªáu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau!")
                .setColor("#ff0000")
                .setTimestamp();

            return await message.reply({ embeds: [errorEmbed] });
        }
    },
}); 