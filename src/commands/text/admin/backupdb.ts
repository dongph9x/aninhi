import { Message, AttachmentBuilder } from 'discord.js';
import fs from 'fs';
import path from 'path';

import { Bot } from "@/classes";

export default Bot.createCommand({
    structure: {
        name: "backupdb",
        aliases: [],
    },
    options: { onlyDev: false, inGuild: true },
    hidden: false,
    run: async ({ client, message }) => {
        // Ch·ªâ cho ph√©p admin
        if (!message.member?.permissions.has('Administrator')) {
            return message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
        }

        try {
            // S·ª≠ d·ª•ng Prisma database th·ª±c t·∫ø (database m√† bot ƒëang d√πng)
            const dbPath = path.resolve('prisma/data/database.db');
            const backupDir = path.resolve('data/backup');
            
            // N·∫øu Prisma database kh√¥ng t·ªìn t·∫°i, fallback v·ªÅ data/database.db
            if (!fs.existsSync(dbPath)) {
                const fallbackPath = path.resolve('data/database.db');
                if (!fs.existsSync(fallbackPath)) {
                    return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y file database!');
                }
                console.log('‚ö†Ô∏è Using fallback database path:', fallbackPath);
            }
            
            const actualDbPath = fs.existsSync(dbPath) ? dbPath : path.resolve('data/database.db');
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true });
            }
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupFile = path.join(backupDir, `database-${timestamp}.db`);
            fs.copyFileSync(actualDbPath, backupFile);
            const stats = fs.statSync(backupFile);
            const sizeMB = stats.size / (1024 * 1024);
            const sizeKB = Math.round(stats.size / 1024);
            const dbSource = actualDbPath.includes('prisma') ? 'Prisma Database' : 'Data Database';
            
            if (sizeMB <= 8) {
                // G·ª≠i file backup v·ªÅ Discord
                const attachment = new AttachmentBuilder(backupFile);
                await message.reply({
                    content: `‚úÖ ƒê√£ backup database th√†nh c√¥ng!\nüìä Ngu·ªìn: ${dbSource}\nüìÅ K√≠ch th∆∞·ªõc: ${sizeKB} KB`,
                    files: [attachment],
                });
            } else {
                await message.reply(`‚úÖ ƒê√£ backup database th√†nh c√¥ng!\nüìä Ngu·ªìn: ${dbSource}\nüìÅ File: data/backup/${path.basename(backupFile)}\nüìÅ K√≠ch th∆∞·ªõc: ${sizeKB} KB (qu√° l·ªõn ƒë·ªÉ g·ª≠i file l√™n Discord)`);
            }
        } catch (err) {
            console.error('Backup DB error:', err);
            await message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi backup database!');
        }
    },
}); 