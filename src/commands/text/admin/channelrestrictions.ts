import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { config, emojis, defaultChannelRestrictions, addToWhitelist, removeFromWhitelist, addToBlacklist, removeFromBlacklist, addCategoryToWhitelist, removeCategoryFromWhitelist, addCategoryToBlacklist, removeCategoryFromBlacklist } from "@/config";
import { ChannelRestrictionsStorage } from "@/utils/channel-restrictions-storage";

export default Bot.createCommand({
    structure: {
        name: "channelrestrictions",
        aliases: ["chrestrict", "chrest", "restrictch"],
    },
    options: { 
        inGuild: true,
        permissions: ["Administrator"]
    },
    run: async ({ client, message, args }) => {
        if (!message.member?.permissions.has("Administrator")) {
            return message.reply(`${emojis.error} B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!`);
        }

        const action = args[0]?.toLowerCase();
        const type = args[1]?.toLowerCase();
        const target = args[2];

        if (!action || action === "help") {
            const helpEmbed = new EmbedBuilder()
                .setTitle("üîí Qu·∫£n L√Ω H·∫°n Ch·∫ø Channel")
                .setDescription("L·ªánh ƒë·ªÉ qu·∫£n l√Ω c√°c channel ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot")
                .setColor("#ffa5f8")
                .addFields(
                    {
                        name: "üìã C√°ch s·ª≠ d·ª•ng",
                        value: "`n.channelrestrictions <action> <type> [target]`",
                        inline: false
                    },
                    {
                        name: "üîÑ Actions",
                        value: "`show` - Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i\n`add` - Th√™m v√†o whitelist/blacklist\n`remove` - X√≥a kh·ªèi whitelist/blacklist\n`clear` - X√≥a t·∫•t c·∫£ c·∫•u h√¨nh\n`mode` - B·∫≠t/t·∫Øt whitelist/blacklist mode\n`backup` - T·∫°o backup\n`restore` - Kh√¥i ph·ª•c t·ª´ backup\n`export` - Xu·∫•t c·∫•u h√¨nh\n`import` - Nh·∫≠p c·∫•u h√¨nh",
                        inline: false
                    },
                    {
                        name: "üìù Types",
                        value: "`channel` - √Åp d·ª•ng cho channel c·ª• th·ªÉ\n`category` - √Åp d·ª•ng cho category (t·∫•t c·∫£ channels trong category)",
                        inline: false
                    },
                    {
                        name: "üéØ V√≠ d·ª•",
                        value: "```\nn.chrestrict add channel 123456789\nn.chrestrict add category 987654321\nn.chrestrict remove channel 123456789\nn.chrestrict show\nn.chrestrict mode whitelist on\nn.chrestrict mode blacklist off```",
                        inline: false
                    }
                )
                .setTimestamp();

            return message.reply({ embeds: [helpEmbed] });
        }

        // Kh·ªüi t·∫°o channel restrictions n·∫øu ch∆∞a c√≥
        if (!client.channelRestrictions) {
            client.channelRestrictions = ChannelRestrictionsStorage.load();
        }

        if (action === "show") {
            const restrictions = client.channelRestrictions;
            const embed = new EmbedBuilder()
                .setTitle("üîí C·∫•u H√¨nh Channel Restrictions")
                .setColor("#ffa5f8")
                .addFields(
                    {
                        name: "‚öôÔ∏è Ch·∫ø ƒë·ªô",
                        value: `**Whitelist Mode:** ${restrictions.useWhitelistMode ? "‚úÖ B·∫≠t" : "‚ùå T·∫Øt"}\n**Blacklist Mode:** ${restrictions.useBlacklistMode ? "‚úÖ B·∫≠t" : "‚ùå T·∫Øt"}\n**Check Categories:** ${restrictions.checkCategories ? "‚úÖ B·∫≠t" : "‚ùå T·∫Øt"}`,
                        inline: false
                    },
                    {
                        name: "‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng",
                        value: restrictions.useWhitelistMode && restrictions.allowedChannels.length === 0 
                            ? "**Whitelist mode ƒëang B·∫¨T nh∆∞ng ch∆∞a c√≥ channel n√†o ƒë∆∞·ª£c ph√©p!**\nT·∫•t c·∫£ l·ªánh s·∫Ω b·ªã ch·∫∑n. H√£y th√™m channels v√†o whitelist."
                            : "H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.",
                        inline: false
                    },
                    {
                        name: "‚úÖ Channels ƒë∆∞·ª£c ph√©p",
                        value: restrictions.allowedChannels.length > 0 
                            ? restrictions.allowedChannels.map(id => `<#${id}>`).join(", ")
                            : "Kh√¥ng c√≥",
                        inline: false
                    },
                    {
                        name: "‚ùå Channels b·ªã c·∫•m",
                        value: restrictions.blockedChannels.length > 0 
                            ? restrictions.blockedChannels.map(id => `<#${id}>`).join(", ")
                            : "Kh√¥ng c√≥",
                        inline: false
                    },
                    {
                        name: "‚úÖ Categories ƒë∆∞·ª£c ph√©p",
                        value: restrictions.allowedCategories.length > 0 
                            ? restrictions.allowedCategories.map(id => `<#${id}>`).join(", ")
                            : "Kh√¥ng c√≥",
                        inline: false
                    },
                    {
                        name: "‚ùå Categories b·ªã c·∫•m",
                        value: restrictions.blockedCategories.length > 0 
                            ? restrictions.blockedCategories.map(id => `<#${id}>`).join(", ")
                            : "Kh√¥ng c√≥",
                        inline: false
                    }
                )
                .setTimestamp();

            return message.reply({ embeds: [embed] });
        }

        if (action === "add" || action === "remove") {
            if (!type || !target) {
                return message.reply(`${emojis.error} Thi·∫øu tham s·ªë! D√πng \`n.channelrestrictions help\` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.`);
            }

            if (!target.match(/^\d+$/)) {
                return message.reply(`${emojis.error} ID kh√¥ng h·ª£p l·ªá! Vui l√≤ng cung c·∫•p ID channel/category h·ª£p l·ªá.`);
            }

            const targetId = target;
            let newRestrictions = { ...client.channelRestrictions };

            if (type === "channel") {
                if (action === "add") {
                    // H·ªèi ng∆∞·ªùi d√πng mu·ªën th√™m v√†o whitelist hay blacklist
                    const response = await message.reply(`${emojis.info} B·∫°n mu·ªën th√™m channel <#${targetId}> v√†o:\n1Ô∏è‚É£ **Whitelist** (ch·ªâ cho ph√©p channels n√†y)\n2Ô∏è‚É£ **Blacklist** (c·∫•m channel n√†y)\n\nPh·∫£n h·ªìi b·∫±ng s·ªë 1 ho·∫∑c 2.`);
                    
                    try {
                        const filter = (m: any) => m.author.id === message.author.id && ['1', '2'].includes(m.content);
                        const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });
                        
                        if (collected.size === 0) {
                            return message.reply(`${emojis.error} H·∫øt th·ªùi gian!`);
                        }

                        const choice = collected.first()!.content;
                        
                        if (choice === "1") {
                            newRestrictions = addToWhitelist(newRestrictions, targetId);
                            await message.reply(`${emojis.success} ƒê√£ th√™m channel <#${targetId}> v√†o **whitelist**!`);
                        } else {
                            newRestrictions = addToBlacklist(newRestrictions, targetId);
                            await message.reply(`${emojis.success} ƒê√£ th√™m channel <#${targetId}> v√†o **blacklist**!`);
                        }
                    } catch (error) {
                        return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra!`);
                    }
                } else {
                    // X√≥a kh·ªèi c·∫£ whitelist v√† blacklist
                    newRestrictions = removeFromWhitelist(newRestrictions, targetId);
                    newRestrictions = removeFromBlacklist(newRestrictions, targetId);
                    await message.reply(`${emojis.success} ƒê√£ x√≥a channel <#${targetId}> kh·ªèi c·∫£ whitelist v√† blacklist!`);
                }
            } else if (type === "category") {
                if (action === "add") {
                    // H·ªèi ng∆∞·ªùi d√πng mu·ªën th√™m v√†o whitelist hay blacklist
                    const response = await message.reply(`${emojis.info} B·∫°n mu·ªën th√™m category <#${targetId}> v√†o:\n1Ô∏è‚É£ **Whitelist** (ch·ªâ cho ph√©p categories n√†y)\n2Ô∏è‚É£ **Blacklist** (c·∫•m category n√†y)\n\nPh·∫£n h·ªìi b·∫±ng s·ªë 1 ho·∫∑c 2.`);
                    
                    try {
                        const filter = (m: any) => m.author.id === message.author.id && ['1', '2'].includes(m.content);
                        const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });
                        
                        if (collected.size === 0) {
                            return message.reply(`${emojis.error} H·∫øt th·ªùi gian!`);
                        }

                        const choice = collected.first()!.content;
                        
                        if (choice === "1") {
                            newRestrictions = addCategoryToWhitelist(newRestrictions, targetId);
                            await message.reply(`${emojis.success} ƒê√£ th√™m category <#${targetId}> v√†o **whitelist**!`);
                        } else {
                            newRestrictions = addCategoryToBlacklist(newRestrictions, targetId);
                            await message.reply(`${emojis.success} ƒê√£ th√™m category <#${targetId}> v√†o **blacklist**!`);
                        }
                    } catch (error) {
                        return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra!`);
                    }
                } else {
                    // X√≥a kh·ªèi c·∫£ whitelist v√† blacklist
                    newRestrictions = removeCategoryFromWhitelist(newRestrictions, targetId);
                    newRestrictions = removeCategoryFromBlacklist(newRestrictions, targetId);
                    await message.reply(`${emojis.success} ƒê√£ x√≥a category <#${targetId}> kh·ªèi c·∫£ whitelist v√† blacklist!`);
                }
            } else {
                return message.reply(`${emojis.error} Type kh√¥ng h·ª£p l·ªá! D√πng \`channel\` ho·∫∑c \`category\`.`);
            }

            client.channelRestrictions = newRestrictions;
            // L∆∞u v√†o file
            ChannelRestrictionsStorage.save(newRestrictions);
            return;
        }

        if (action === "clear") {
            client.channelRestrictions = { ...defaultChannelRestrictions };
            ChannelRestrictionsStorage.save(client.channelRestrictions);
            return message.reply(`${emojis.success} ƒê√£ x√≥a t·∫•t c·∫£ c·∫•u h√¨nh channel restrictions!`);
        }

        if (action === "mode") {
            const mode = args[1]?.toLowerCase();
            const status = args[2]?.toLowerCase();

            if (!mode || !status || !['whitelist', 'blacklist'].includes(mode) || !['on', 'off'].includes(status)) {
                return message.reply(`${emojis.error} C√°ch d√πng: \`n.channelrestrictions mode <whitelist|blacklist> <on|off>\``);
            }

            if (mode === "whitelist") {
                client.channelRestrictions.useWhitelistMode = status === "on";
                ChannelRestrictionsStorage.save(client.channelRestrictions);
                await message.reply(`${emojis.success} **Whitelist mode** ƒë√£ ƒë∆∞·ª£c ${status === "on" ? "B·∫¨T" : "T·∫ÆT"}!`);
            } else {
                client.channelRestrictions.useBlacklistMode = status === "on";
                ChannelRestrictionsStorage.save(client.channelRestrictions);
                await message.reply(`${emojis.success} **Blacklist mode** ƒë√£ ƒë∆∞·ª£c ${status === "on" ? "B·∫¨T" : "T·∫ÆT"}!`);
            }

            return;
        }

        if (action === "backup") {
            const success = ChannelRestrictionsStorage.backup();
            if (success) {
                return message.reply(`${emojis.success} ƒê√£ t·∫°o backup channel restrictions th√†nh c√¥ng!`);
            } else {
                return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra khi t·∫°o backup!`);
            }
        }

        if (action === "restore") {
            const backupFiles = ChannelRestrictionsStorage.getBackupFiles();
            if (backupFiles.length === 0) {
                return message.reply(`${emojis.error} Kh√¥ng c√≥ file backup n√†o!`);
            }

            const latestBackup = backupFiles[0];
            const success = ChannelRestrictionsStorage.restore(latestBackup);
            if (success) {
                // Reload restrictions v√†o client
                client.channelRestrictions = ChannelRestrictionsStorage.load();
                return message.reply(`${emojis.success} ƒê√£ kh√¥i ph·ª•c channel restrictions t·ª´ backup th√†nh c√¥ng!`);
            } else {
                return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra khi kh√¥i ph·ª•c backup!`);
            }
        }

        if (action === "export") {
            const success = ChannelRestrictionsStorage.export();
            if (success) {
                return message.reply(`${emojis.success} ƒê√£ xu·∫•t channel restrictions th√†nh c√¥ng!`);
            } else {
                return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra khi xu·∫•t c·∫•u h√¨nh!`);
            }
        }

        if (action === "import") {
            if (!target) {
                return message.reply(`${emojis.error} Vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n file import!`);
            }

            const success = ChannelRestrictionsStorage.import(target);
            if (success) {
                // Reload restrictions v√†o client
                client.channelRestrictions = ChannelRestrictionsStorage.load();
                return message.reply(`${emojis.success} ƒê√£ nh·∫≠p channel restrictions th√†nh c√¥ng!`);
            } else {
                return message.reply(`${emojis.error} C√≥ l·ªói x·∫£y ra khi nh·∫≠p c·∫•u h√¨nh!`);
            }
        }

        return message.reply(`${emojis.error} Action kh√¥ng h·ª£p l·ªá! D√πng \`n.channelrestrictions help\` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.`);
    },
}); 