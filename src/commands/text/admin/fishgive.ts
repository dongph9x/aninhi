import { EmbedBuilder } from "discord.js";

import { Bot } from "@/classes";
import { config } from "@/config";
import { fishCoinDB } from "@/utils/fish-coin";

export default Bot.createCommand({
    structure: {
        name: "fishgive",
        aliases: ["fishadd", "fishremove", "fishset"],
    },
    run: async ({ message, t }) => {
        const userId = message.author.id;
        const guildId = message.guildId!;
        const args = message.content.split(" ").slice(1);

        // Ki·ªÉm tra quy·ªÅn admin
        const { FishBattleService } = await import('@/utils/fish-battle');
        const isAdmin = await FishBattleService.isAdministrator(userId, guildId);
        
        if (!isAdmin) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Kh√¥ng C√≥ Quy·ªÅn")
                .setDescription("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
                .setColor("#ff0000")
                .setTimestamp();

            return message.reply({ embeds: [errorEmbed] });
        }

        if (args.length < 2) {
                                        const helpEmbed = new EmbedBuilder()
                                .setTitle("üêü Admin FishCoin Commands")
                                .setDescription(
                                    "**C√∫ ph√°p:** `!fishgive @user <s·ªë l∆∞·ª£ng>`\n" +
                                    "**V√≠ d·ª•:** `!fishgive @username 1000`\n" +
                                    "**V√≠ d·ª• cho ch√≠nh m√¨nh:** `!fishgive @yourself 1000`\n\n" +
                                    "**C√°c l·ªánh kh√°c:**\n" +
                                    "‚Ä¢ `!fishadd @user <s·ªë l∆∞·ª£ng>` - Th√™m FishCoin\n" +
                                    "‚Ä¢ `!fishremove @user <s·ªë l∆∞·ª£ng>` - B·ªõt FishCoin\n" +
                                    "‚Ä¢ `!fishset @user <s·ªë l∆∞·ª£ng>` - Set FishCoin (s·∫Ω t·∫°o migration ri√™ng)\n\n" +
                                    "**L∆∞u √Ω:**\n" +
                                    "‚Ä¢ Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng\n" +
                                    "‚Ä¢ C√≥ th·ªÉ thao t√°c v·ªõi ch√≠nh m√¨nh\n" +
                                    "‚Ä¢ S·ªë l∆∞·ª£ng c√≥ th·ªÉ √¢m ƒë·ªÉ b·ªõt FishCoin"
                                )
                                .setColor("#00CED1")
                                .setTimestamp();

            return message.reply({ embeds: [helpEmbed] });
        }

        try {
            // L·∫•y user ƒë∆∞·ª£c mention
            const mentionedUser = message.mentions.users.first();
            if (!mentionedUser) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("Vui l√≤ng mention ng∆∞·ªùi d√πng!")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [errorEmbed] });
            }

            const targetUserId = mentionedUser.id;

            // L·∫•y s·ªë l∆∞·ª£ng FishCoin
            const amount = parseInt(args[1]);
            if (isNaN(amount)) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ùå L·ªói")
                    .setDescription("S·ªë l∆∞·ª£ng FishCoin ph·∫£i l√† s·ªë!")
                    .setColor("#ff0000")
                    .setTimestamp();

                return message.reply({ embeds: [errorEmbed] });
            }

            // X√°c ƒë·ªãnh lo·∫°i thao t√°c
            const command = message.content.toLowerCase();
            let operation = "add";
            let description = "";

            if (command.includes("remove") || command.includes("subtract")) {
                operation = "subtract";
                description = `Admin removed ${Math.abs(amount)} FishCoin`;
            } else if (command.includes("set")) {
                operation = "set";
                description = `Admin set FishCoin to ${amount}`;
            } else {
                description = `Admin added ${amount} FishCoin`;
            }

            let result;
            let oldBalance = 0n;
            let newBalance = 0n;

            if (operation === "set") {
                // Set balance (s·∫Ω implement sau)
                const errorEmbed = new EmbedBuilder()
                    .setTitle("‚ö†Ô∏è T√≠nh NƒÉng Ch∆∞a Ho√†n Thi·ªán")
                    .setDescription("L·ªánh set FishCoin s·∫Ω ƒë∆∞·ª£c implement trong migration ti·∫øp theo!")
                    .setColor("#ffa500")
                    .setTimestamp();

                return message.reply({ embeds: [errorEmbed] });
            } else if (operation === "subtract") {
                // B·ªõt FishCoin
                oldBalance = await fishCoinDB.getFishBalance(targetUserId, guildId);
                await fishCoinDB.subtractFishCoin(targetUserId, guildId, Math.abs(amount), description);
                newBalance = await fishCoinDB.getFishBalance(targetUserId, guildId);
            } else {
                // Th√™m FishCoin
                oldBalance = await fishCoinDB.getFishBalance(targetUserId, guildId);
                await fishCoinDB.addFishCoin(targetUserId, guildId, amount, description);
                newBalance = await fishCoinDB.getFishBalance(targetUserId, guildId);
            }

            const successEmbed = new EmbedBuilder()
                .setTitle("‚úÖ Admin FishCoin Operation")
                .setDescription(
                    `**Admin:** ${message.author.username}\n` +
                    `**Ng∆∞·ªùi d√πng:** ${mentionedUser.username}\n` +
                    `**Thao t√°c:** ${operation === "subtract" ? "B·ªõt" : "Th√™m"} **${Math.abs(amount).toLocaleString()}** FishCoin\n\n` +
                    `**S·ªë d∆∞ thay ƒë·ªïi:**\n` +
                    `üêü **Tr∆∞·ªõc:** ${oldBalance.toLocaleString()} FishCoin\n` +
                    `üêü **Sau:** ${newBalance.toLocaleString()} FishCoin\n` +
                    `üìä **Thay ƒë·ªïi:** ${operation === "subtract" ? "-" : "+"}${Math.abs(amount).toLocaleString()} FishCoin`
                )
                .setColor("#00FF00")
                .setThumbnail(message.author.displayAvatarURL())
                .setFooter({
                    text: `Admin FishCoin Operation | ${new Date().toLocaleDateString('vi-VN')}`,
                    iconURL: message.author.displayAvatarURL(),
                })
                .setTimestamp();

            return message.reply({ embeds: [successEmbed] });

        } catch (error) {
            console.error("Error in fishgive command:", error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå L·ªói")
                .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán thao t√°c FishCoin!")
                .setColor("#ff0000")
                .setTimestamp();

            return message.reply({ embeds: [errorEmbed] });
        }
    },
}); 